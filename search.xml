<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces Round 635 Div.2 题解</title>
      <link href="/3213635929/"/>
      <url>/3213635929/</url>
      
        <content type="html"><![CDATA[<p>正常了一把，可以没过了E<br><a id="more"></a></p><p>前两题也没啥好讲的，看代码就🆗</p><h2 id="1337A-Ichihime-and-Triangle"><a href="#1337A-Ichihime-and-Triangle" class="headerlink" title="1337A Ichihime and Triangle"></a>1337A Ichihime and Triangle</h2><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1337B-Kana-and-Dragon-Quest-game"><a href="#1337B-Kana-and-Dragon-Quest-game" class="headerlink" title="1337B Kana and Dragon Quest game"></a>1337B Kana and Dragon Quest game</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp;&amp; x &gt; <span class="number">20</span>) </span><br><span class="line">                --n, x = x / <span class="number">2</span> + <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (m) </span><br><span class="line">                --m, x -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336A-Linova-and-Kingdom"><a href="#1336A-Linova-and-Kingdom" class="headerlink" title="1336A Linova and Kingdom"></a>1336A Linova and Kingdom</h2><p>有一颗以$1$为根的树，把$k$个点涂成黑色，问每个黑色点到根的路径上白色点数量的和是多少。</p><p>如果一个点涂黑了，意味着这颗子树全部被涂黑了，那么讨论这个点（的子树除了自己全部涂色后）涂色对答案的贡献，即 $(dpt_i-1)sz_i-dpt_i(sz_i-1)$，排序后取前$n-k$大就是答案，$O(n\log n)$，题解提到如果用 $STL$ 的 $nth_element()$ 部分排序可以做到$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll cnt[N], dpt[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ps;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dpt[v] = dpt[u] + <span class="number">1</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    ++cnt[u];</span><br><span class="line">    ps.emplace_back(u, (dpt[u] - <span class="number">1</span>) * cnt[u] - dpt[u] * (cnt[u] - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dpt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    sort(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>(), [&amp;](pii a, pii b) &#123; <span class="keyword">return</span> a.second &gt; b.second; &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        ans += ps[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336B-Xenia-and-Colorful-Gems"><a href="#1336B-Xenia-and-Colorful-Gems" class="headerlink" title="1336B Xenia and Colorful Gems"></a>1336B Xenia and Colorful Gems</h2><p>有三种颜色的宝石，每个宝石都有权值，要求每个颜色的宝石取一个，问能取的最小的$(x-y)^2+(y-z)^2+(z-x)^2$是多少。</p><p>如果我们将取得得三个值排序，那么两边得数越接近中间的，答案就越小。因此枚举中间值，二分找另外两个数，$O(n\log n)$。</p><p>（这里的代码是我另写了一版，静态数组$600+ms$，然鹅<a href="https://codeforces.com/contest/1337/submission/76916000" target="_blank" rel="noopener">现场交</a>的$vector$才$170ms$）</p><figure class="highlight reasonml"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const <span class="built_in">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">int</span> a<span class="literal">[<span class="number">3</span>]</span><span class="literal">[N]</span>, n<span class="literal">[<span class="number">3</span>]</span>;</span><br><span class="line"></span><br><span class="line">void calc(<span class="built_in">int</span> q, <span class="built_in">int</span> w, <span class="built_in">int</span> e) &#123;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n<span class="literal">[<span class="identifier">q</span>]</span>; ++i) &#123;</span><br><span class="line">        auto p2 = lower<span class="constructor">_bound(<span class="params">a</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">w</span>] + <span class="params">n</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">w</span>]</span>;</span><br><span class="line">        auto p3 = upper<span class="constructor">_bound(<span class="params">a</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">e</span>] + <span class="params">n</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">e</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span> (p3 != <span class="number">0</span>) --p3;</span><br><span class="line">        <span class="keyword">if</span> (p2<span class="operator"> == </span>n<span class="literal">[<span class="identifier">w</span>]</span>) --p2;</span><br><span class="line">        ll x = a<span class="literal">[<span class="identifier">q</span>]</span><span class="literal">[<span class="identifier">i</span>]</span>, y = a<span class="literal">[<span class="identifier">w</span>]</span><span class="literal">[<span class="identifier">p2</span>]</span>, z = a<span class="literal">[<span class="identifier">e</span>]</span><span class="literal">[<span class="identifier">p3</span>]</span>;</span><br><span class="line">        ans = min(ans, (x - y)<span class="operator"> * </span>(x - y) + (x - z)<span class="operator"> * </span>(x - z) + (y - z)<span class="operator"> * </span>(y - z));</span><br><span class="line">        p2 = upper<span class="constructor">_bound(<span class="params">a</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">w</span>] + <span class="params">n</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">w</span>]</span>;</span><br><span class="line">        p3 = lower<span class="constructor">_bound(<span class="params">a</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">e</span>] + <span class="params">n</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">e</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span> (p2 != <span class="number">0</span>) --p2;</span><br><span class="line">        <span class="keyword">if</span> (p3<span class="operator"> == </span>n<span class="literal">[<span class="identifier">e</span>]</span>) --p3;</span><br><span class="line">        x = a<span class="literal">[<span class="identifier">q</span>]</span><span class="literal">[<span class="identifier">i</span>]</span>, y = a<span class="literal">[<span class="identifier">w</span>]</span><span class="literal">[<span class="identifier">p2</span>]</span>, z = a<span class="literal">[<span class="identifier">e</span>]</span><span class="literal">[<span class="identifier">p3</span>]</span>;</span><br><span class="line">        ans = min(ans, (x - y)<span class="operator"> * </span>(x - y) + (x - z)<span class="operator"> * </span>(x - z) + (y - z)<span class="operator"> * </span>(y - z));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; n<span class="literal">[<span class="number">0</span>]</span> &gt;&gt; n<span class="literal">[<span class="number">1</span>]</span> &gt;&gt; n<span class="literal">[<span class="number">2</span>]</span>;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n<span class="literal">[<span class="identifier">i</span>]</span>; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; a<span class="literal">[<span class="identifier">i</span>]</span><span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(a<span class="literal">[<span class="identifier">i</span>]</span>, a<span class="literal">[<span class="identifier">i</span>]</span> + n<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = LLONG_MAX;</span><br><span class="line">        calc(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        calc(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        calc(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336C-Kaavi-and-Magic-Spell"><a href="#1336C-Kaavi-and-Magic-Spell" class="headerlink" title="1336C Kaavi and Magic Spell"></a>1336C Kaavi and Magic Spell</h2><p>感觉挺开拓思维的一道题 <del>其实是我$dp$太差想不到</del><br>有两个字符串$s,t$和一个空串$a$，现在每次操作可以把$s$的首字母添加到$a$的头或尾，问在所有的操作序列中，产生的$a$以$t$为前缀个序列个数，具体题意请看<a href="https://codeforces.com/contest/1336/problem/C" target="_blank" rel="noopener">样例解释</a>吧。</p><p>正解是区间$dp$，设$dp[l][r]$为操作第$x$个字母后，与$t[l][r]$匹配的$a$的个数，那么：</p><ul><li>当枚举到第$x$个字母时，$r=l+x-1$；</li><li>当$s_x == t_l$时，也就是说可以从$dp[l+1][r]$转移到$dp[l][r]$；</li><li>当$s_x == t_r$时，也就是说可以从$dp[l][r-1]$转移到$dp[l][r]$；</li><li>对于上述的$l,r&gt;m$时，因为已经不会影响匹配，就可以直接转移；</li><li>当$x=1$时，需要从$dp[i][i-1]$转移一下，此时设为$1$即可；<br>答案即$\sum_{i=m}^n dp[1][i]$，$O(n^2)$</li></ul><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> n = s.length(), m = t.length();</span><br><span class="line">    s = <span class="string">' '</span> + s, t = <span class="string">' '</span> + t;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n + <span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        dp[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n - i + <span class="number">1</span>; ++l) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; m || s[i] == t[l]) dp[l][r] = (dp[l][r] + dp[l + <span class="number">1</span>][r]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; m || s[i] == t[r]) dp[l][r] = (dp[l][r] + dp[l][r - <span class="number">1</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans = (ans + dp[<span class="number">1</span>][i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 634 Div.3 题解</title>
      <link href="/3995717809/"/>
      <url>/3995717809/</url>
      
        <content type="html"><![CDATA[<p>前几题也没什么好讲的，只写了E、F的分析。</p><a id="more"></a><h2 id="1335A-Candies-and-Two-Sisters"><a href="#1335A-Candies-and-Two-Sisters" class="headerlink" title="1335A Candies and Two Sisters"></a>1335A Candies and Two Sisters</h2><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        n = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335B-Construct-the-String"><a href="#1335B-Construct-the-String" class="headerlink" title="1335B Construct the String"></a>1335B Construct the String</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(i % b + <span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335C-Two-Teams-Composing"><a href="#1335C-Two-Teams-Composing" class="headerlink" title="1335C Two Teams Composing"></a>1335C Two Teams Composing</h2><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            ++mp[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : mp) &#123;</span><br><span class="line">            cnt.emplace_back(i.second, i.first);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt.back().first - <span class="number">1</span> &gt;= cnt.<span class="built_in">size</span>())</span><br><span class="line">            ans = cnt.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; !ans; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt.back().first &gt;= i ) &#123;</span><br><span class="line">                ans = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335D-Anti-Sudoku"><a href="#1335D-Anti-Sudoku" class="headerlink" title="1335D Anti-Sudoku"></a>1335D Anti-Sudoku</h2><p>题目的要求提示也比较明显，$9$行$9$列和$9$大方块对应一下。</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">0</span>] = s[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                s[i * <span class="number">3</span> + j][j * <span class="number">3</span> + i] = s[i * <span class="number">3</span>][j * <span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335E-Three-Blocks-Palindrome-easy-amp-hard-version"><a href="#1335E-Three-Blocks-Palindrome-easy-amp-hard-version" class="headerlink" title="1335E Three Blocks Palindrome (easy &amp; hard version)"></a>1335E Three Blocks Palindrome (easy &amp; hard version)</h2><p>首先可以想到枚举两个颜色，咋一看好像复杂度是$200\times 200 \times 2e…^5$，但是实际上可以想到对于一个颜色作为两端来说，它确定左端长度，也就有唯一对应的右端，那么就是找中间段的某个颜色最多的个数，由于$\sum pos_i \leq 2e^5$，那么最多只有这么多$\div 2$个位置对，每个位置对再前缀和后暴力枚举众数，复杂度最多$O(2e^7)$。<br>$E1$可以通过暴力解决，具体的话我么想。</p><figure class="highlight inform7"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5 + 5;</span><br><span class="line"></span><br><span class="line">int a<span class="comment">[N]</span>, cnt<span class="comment">[N]</span><span class="comment">[200]</span>;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        int n, ans = 0;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; pos(201);</span><br><span class="line">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a<span class="comment">[i]</span>;</span><br><span class="line">            for (int j = 1; j &lt;= 200; ++j) &#123;</span><br><span class="line">                cnt<span class="comment">[i]</span><span class="comment">[j]</span> = cnt<span class="comment">[i - 1]</span><span class="comment">[j]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt<span class="comment">[i]</span><span class="comment">[a<span class="comment">[i]</span>]</span>;</span><br><span class="line">            pos<span class="comment">[a<span class="comment">[i]</span>]</span>.emplace_back(i);</span><br><span class="line">            ans = max(ans, cnt<span class="comment">[i]</span><span class="comment">[a<span class="comment">[i]</span>]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= 200; ++i) &#123;</span><br><span class="line">            if (pos<span class="comment">[i]</span>.empty()) continue;</span><br><span class="line">            int l = 0, r = pos<span class="comment">[i]</span>.size() - 1;</span><br><span class="line">            for (;l &lt; pos<span class="comment">[i]</span>.size() &amp;&amp; l &lt; r; ++l) &#123;</span><br><span class="line">                while (cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[i]</span> &gt; cnt<span class="comment">[n]</span><span class="comment">[i]</span> - cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[r - 1]</span>]</span><span class="comment">[i]</span>) --r;</span><br><span class="line">                if (l &gt;= r) break;</span><br><span class="line">                for (int j = 1; j &lt;= 200; ++j) &#123;</span><br><span class="line">                    ans = max(ans, 2 * cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[i]</span> + cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[r]</span> - 1]</span><span class="comment">[j]</span> - cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[j]</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335F-Robots-on-a-Grid"><a href="#1335F-Robots-on-a-Grid" class="headerlink" title="1335F Robots on a Grid"></a>1335F Robots on a Grid</h2><p>这个题解法还是挺明显的，因为某些路径一定会成环（否则机器人就不能无限走下去了），那么如果将矩阵转化为图后，每个连通块就是一个基环内向树，最多放机器人个数就是环长的和。最多在黑色格子的可以这样考虑：<br>如果环外的链上有若干黑色点，那么如果把这些链按方向合并到环上，最后环上有几个黑色点，就是最多的答案。<br>（自己写成码农了，后来跟jls学了波姿势，灰常清楚）</p><figure class="highlight pgsql"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q<span class="comment">--) &#123;</span></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        vector&lt;string&gt; g(n), col(n);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="keyword">to</span>(n * m), dgr(n * m);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; e(n * m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; col[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; g[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> xx = i, yy = j;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">'U'</span>) <span class="comment">--xx;</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">'D'</span>) ++xx;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">'L'</span>) <span class="comment">--yy;</span></span><br><span class="line">                <span class="keyword">else</span> ++yy;</span><br><span class="line">                <span class="keyword">to</span>[i * m + j] = xx * m + yy;</span><br><span class="line">                ++dgr[<span class="keyword">to</span>[i * m + j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; cut_chain = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            <span class="comment">--dgr[x];</span></span><br><span class="line">            e[<span class="keyword">to</span>[x]].emplace_back(x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="comment">--dgr[to[x]] == 0)</span></span><br><span class="line">                cut_chain(<span class="keyword">to</span>[x]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dgr[i])</span><br><span class="line">                cut_chain(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dgr[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="keyword">to</span>[i]; j != i; j = <span class="keyword">to</span>[j]) &#123;</span><br><span class="line">                    e[<span class="keyword">to</span>[j]].emplace_back(j);</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">                ans1 += cnt;</span><br><span class="line">                vector&lt;<span class="type">bool</span>&gt; cc(cnt);</span><br><span class="line">                <span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> dpt) &#123;</span><br><span class="line">                    dgr[u] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (col[u / m][u % m] == <span class="string">'0'</span>) cc[dpt % cnt] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> v : e[u])</span><br><span class="line">                        dfs(v, dpt + <span class="number">1</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">                dfs(i, <span class="number">0</span>);</span><br><span class="line">                ans2 += count(cc.<span class="keyword">begin</span>(), cc.<span class="keyword">end</span>(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans1 &lt;&lt; <span class="string">' '</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 85 题解</title>
      <link href="/1577963147/"/>
      <url>/1577963147/</url>
      
        <content type="html"><![CDATA[<p>本来想补了后面题再写的，不过这几天好像事有点多<br><a id="more"></a></p><h2 id="1334A-Level-Statistics"><a href="#1334A-Level-Statistics" class="headerlink" title="1334A Level Statistics"></a>1334A Level Statistics</h2><p>有个关卡，给出每天$a-$挑战的人次，$b-$通关的人次，问一个序列是否满足逻辑。</p><p>就和现实一样，判断$a,b$关系和上一轮关系，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, n, ta, tb, f = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        --n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; b) f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ta &gt;&gt; tb;</span><br><span class="line">            <span class="keyword">if</span> (ta &lt; tb) f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; ta || b &gt; tb) f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (tb - b &gt; ta - a) f = <span class="number">0</span>;</span><br><span class="line">            a = ta, b = tb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334B-Middle-Class"><a href="#1334B-Middle-Class" class="headerlink" title="1334B Middle Class"></a>1334B Middle Class</h2><p>有一些数字，可以选择一些数，把他们变成和额度平均值，问最多能让多少个数$\geq x$。</p><p>排序后从大到小贪心，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, x, num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= x) sum += t, ++num;</span><br><span class="line">            <span class="keyword">else</span> a.emplace_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span> (!a.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sum + a.back()) / x &lt; num + <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            sum += a.back();</span><br><span class="line">            a.pop_back();</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334C-Circle-of-Monsters"><a href="#1334C-Circle-of-Monsters" class="headerlink" title="1334C Circle of Monsters"></a>1334C Circle of Monsters</h2><p>有一些怪在一个环上，开一枪可以让一个怪血量$-1$，一个怪死后会对背后的怪溅射伤害，如果背后的怪已经死了则无影响。问最少开几枪打死全部怪。</p><p>因为在打死一个怪以后，环就变成了链，那么开枪的顺序就固定下来了，因此枚举第一个打死哪个怪即可，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[N], b[N], ss[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">            ss[i] = <span class="built_in">max</span>(<span class="number">0l</span>l, a[i] - b[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ss[<span class="number">1</span>] = <span class="built_in">max</span>(<span class="number">0l</span>l, a[<span class="number">1</span>] - b[n]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            sum += ss[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = INF64;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, sum - ss[i] + a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334D-Minimum-Euler-Cycle"><a href="#1334D-Minimum-Euler-Cycle" class="headerlink" title="1334D Minimum Euler Cycle"></a>1334D Minimum Euler Cycle</h2><p>一个有向的完全图，按字典序最小的方式走出欧拉环，然后问第$l\sims r$的数字是哪些。</p><p>这个顺序只要画画能发现，即$1,2,1,3,1,4…1,x,2,3,2,4…2,x,3,4……$，所以预处理下每一段长度再计算一下即可，$(r-l)$。</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; cnt[n]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ptr = lower_bound(cnt, cnt + n, x) - cnt;</span><br><span class="line">    <span class="keyword">int</span> t = x - cnt[ptr - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) <span class="keyword">return</span> ptr;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> t / <span class="number">2</span> + ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        ll l, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cnt[i] = cnt[i - <span class="number">1</span>] + <span class="number">2</span> * (n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; calc(i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334E-Divisor-Paths"><a href="#1334E-Divisor-Paths" class="headerlink" title="1334E Divisor Paths"></a>1334E Divisor Paths</h2><p>过阵子必补</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> edu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> edu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 633 Div.2 题解</title>
      <link href="/1196325615/"/>
      <url>/1196325615/</url>
      
        <content type="html"><![CDATA[<p>照例<br><a id="more"></a></p><h2 id="1339A-Filling-Diamonds"><a href="#1339A-Filling-Diamonds" class="headerlink" title="1339A Filling Diamonds"></a>1339A Filling Diamonds</h2><p>这样的<a href="https://espresso.codeforces.com/253cb03aef62ea2260f28f431e7e51c962b79f23.png" target="_blank" rel="noopener">图形</a>，用$n=1$的子图形去<a href="https://espresso.codeforces.com/e72f8c635d8dc8aff12edac5df922a9410645cbb.png" target="_blank" rel="noopener">这样填</a>，问有几种填法。</p><p>由于必有且仅有一个竖的，那么答案就是$n$，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1339B-Sorted-Adjacent-Differences"><a href="#1339B-Sorted-Adjacent-Differences" class="headerlink" title="1339B Sorted Adjacent Differences"></a>1339B Sorted Adjacent Differences</h2><p>有一个序列，要求重排后，$|a_i-a_{i-1}|\leq |a_i-a_{i+1}|$，给出方案。</p><p>从小到大排序后从两端向中间取，差的绝对值一定越来越小，再反向输出，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            ans.emplace_back(a[l++]);</span><br><span class="line">            ans.emplace_back(a[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l == r) ans.emplace_back(a[l]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1338A-Powered-Addition"><a href="#1338A-Powered-Addition" class="headerlink" title="1338A Powered Addition"></a>1338A Powered Addition</h2><p>有一个序列，在第$x$次操作可以选一些数给它$+=2^{x-1}$，问最少到第几次操作结束后序列可以变为非减的。</p><p>最后的序列一定是阶梯状的，那么就是找前面的最大值和后面较小值的最大的差，答案就是差的二进制位数，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        ll mx = <span class="number">-1e9</span>, mxx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (ll &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, a[i]);</span><br><span class="line">            mxx = <span class="built_in">max</span>(mxx, mx - a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mxx &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">                ans = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1338B-Edge-Weight-Assignment"><a href="#1338B-Edge-Weight-Assignment" class="headerlink" title="1338B Edge Weight Assignment"></a>1338B Edge Weight Assignment</h2><p>有一颗树，边有边权，要求叶子到叶子的路径权值异或和为$0$，问最少用几种数字和最多用几种。</p><ul><li>最少的答案可以很明显想到和叶子间的路径长度奇偶性有关，如果距离都是偶数，那么用一样的数就可以了；那么如果有一个或以上的奇数呢，首先一定会有偶数的距离（或只有一条奇数长度链），那么用$1,2,3$，将$1$放在偶数那些叶子那条边上，剩下用其他的填，一定有方案。</li><li>最多答案的话，答案最多是总边数，而且可以发现如果有距离为$2$的叶子对的话，这两边必须相同，手写一下好像其他一定有方案（其实不会证，看官方题解叭）。<br>$O(n)$（莽了一发过了。。。）</li></ul><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> has[N][<span class="number">2</span>], f;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g[u].<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        has[u][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        has[u][<span class="number">1</span>] |= has[v][<span class="number">0</span>];</span><br><span class="line">        has[u][<span class="number">0</span>] |= has[v][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (has[u][<span class="number">0</span>] &amp;&amp; has[u][<span class="number">1</span>]) f = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : g[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[v].<span class="built_in">size</span>() == <span class="number">1</span>) ++t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (g[i].<span class="built_in">size</span>() &gt; <span class="number">1</span>) rt = i;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) ans += t;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt);</span><br><span class="line"></span><br><span class="line">    ans = n - <span class="number">1</span> - ans;</span><br><span class="line">    <span class="keyword">if</span> (f) <span class="built_in">cout</span> &lt;&lt; <span class="string">"3 "</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 632 Div.2 题解</title>
      <link href="/3661732761/"/>
      <url>/3661732761/</url>
      
        <content type="html"><![CDATA[<p>没想清就写-&gt;细节爆炸<br><a id="more"></a></p><h2 id="1333A-Little-Artem"><a href="#1333A-Little-Artem" class="headerlink" title="1333A Little Artem"></a>1333A Little Artem</h2><p>记$W$为相邻至少有一个黑格的白格数，$B$为相邻至少有一个白格的黑格数，给出一种涂色使$B=W+1$成立。</p><p>就是交叉放，分个小类讨论下，$O(nm)$。<br>一看觉得很简单，决定手模，然后 （+1）</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (n * m &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BW"</span>[(i + j) &amp; <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"WB"</span>[(i + j) &amp; <span class="number">1</span> | (i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333B-Kind-Anton"><a href="#1333B-Kind-Anton" class="headerlink" title="1333B Kind Anton"></a>1333B Kind Anton</h2><p>一个仅有$0,-1,1$构成的序列$a$，现在可以把前面的一个数加到这个数上，问能不能通过若干次这样的操作得到序列$b$。</p><p>就是看前面有没有$+1，-1$，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], has[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            has[i][<span class="number">0</span>] = has[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            has[i][<span class="number">1</span>] = has[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) has[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) has[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i] == a[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b[i] &lt; a[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!has[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                    f = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!has[i - <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                f = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333C-Eugene-and-an-array"><a href="#1333C-Eugene-and-an-array" class="headerlink" title="1333C Eugene and an array"></a>1333C Eugene and an array</h2><p>有一个序列，求有多少个子段，它的子段内没有求合为$0$的段。</p><p>从前往后枚举$r$也就是右边界，找到最右的左边界$l$，使得$\sum_{j=l}^{r}a_j = 0$,可以通过前缀和找。<br>那么这样可以得到很多对$(l,r)$，左右任选都是不合法的答案，也就是$l\times (n-l+1)$。很明显这样有重复，因此稍微（+4，写到最后发现一开始斥飞了）容斥一下。<br>可以发现多算的部分就是$min(l_i,l-j)\times (n +1 -max(r_i,r_j))$，那么按$r$排序，每次保留最右的$l$的答案就好了，具体看代码吧，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, f = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">map</span>&lt;ll, ll&gt; mp;</span><br><span class="line">    ll pre = <span class="number">0</span>, ans = <span class="number">0</span>, l = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        pre += t;</span><br><span class="line">        <span class="keyword">if</span> (mp.count(pre)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[pre] + <span class="number">1</span> &gt;= l) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f) ans -= <span class="built_in">min</span>(mp[pre] + <span class="number">1</span>, l) * (n - i + <span class="number">1</span>);</span><br><span class="line">                l = mp[pre] + <span class="number">1</span>;</span><br><span class="line">                ans += l * (n - i + <span class="number">1</span>);</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[pre] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ll(n + <span class="number">1</span>) * n / <span class="number">2</span> - ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333D-Challenges-in-school-№41"><a href="#1333D-Challenges-in-school-№41" class="headerlink" title="1333D Challenges in school №41"></a>1333D Challenges in school №41</h2><p>有一堆小孩在一列，向左或向右看，每次可以操作一对相互看的小孩反向，问能否精确$k$轮使得没有一对小孩可以继续操作。</p><p>因为题目保证答案存在就一定在$n^2$内，那么就可以暴力预处理，每轮把可以操作的位置都操作，到最后一定在$n^2$内结束。<br>然后就变成了构造题，一共操作$mx$个位置，最少操作$cnt$轮，那么此外的$k$都是无法构造出来的，从尾开始“伸展”是一种比较简单的写法（我自己的写法+3…）。</p><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> &amp;t : c) <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="string">'R'</span> &amp;&amp; c[i + <span class="number">1</span>] == <span class="string">'L'</span>) &#123;</span><br><span class="line">                ans[cnt].emplace_back(i + <span class="number">1</span>);</span><br><span class="line">                swap(c[i], c[i + <span class="number">1</span>]);</span><br><span class="line">                ++i; ++mx; f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mx &lt; k || k &lt; cnt) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        --cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[cnt].empty()) --cnt;</span><br><span class="line">            <span class="keyword">if</span> (i == cnt) <span class="keyword">break</span>;</span><br><span class="line">            ans[i] = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;ans[cnt].back()&#125;;</span><br><span class="line">            ans[cnt].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i].<span class="built_in">size</span>() &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;j : ans[i]) </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333E-Road-to-1600"><a href="#1333E-Road-to-1600" class="headerlink" title="1333E Road to 1600"></a>1333E Road to 1600</h2><p>国际象棋车走四个方向，后走八个方向，对于一个棋盘，每次都走可达位置中权值最小的点，如果没位置可走就要花一代价跳跃至权值最小点，要求构造一个$n\times n$的矩阵，使得后走完所有点的代价比车大。</p><p>可以通过先构造一个小的矩阵使得 后的代价$&gt;$车的代价，然后剩下的构造一条路使得二车代价一样即可，$O(nm)$。<br>这里构造的是：</p><script type="math/tex; mode=display">\begin{matrix} 8&5&1 \\ 7&4&9 \\ 6&3&2 \end{matrix}</script><figure class="highlight lsl"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    if (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">vector</span>&lt;<span class="type">vector</span>&lt;int&gt;&gt; ans(n + <span class="number">1</span>, <span class="type">vector</span>&lt;int&gt; (n + <span class="number">1</span>));</span><br><span class="line">    int cnt = n * n;</span><br><span class="line">    ans[<span class="number">2</span>][<span class="number">3</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">1</span>] = cnt--; ans[<span class="number">2</span>][<span class="number">1</span>] = cnt--;</span><br><span class="line">    ans[<span class="number">3</span>][<span class="number">1</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">2</span>] = cnt--; ans[<span class="number">2</span>][<span class="number">2</span>] = cnt--;</span><br><span class="line">    ans[<span class="number">3</span>][<span class="number">2</span>] = cnt--; ans[<span class="number">3</span>][<span class="number">3</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">3</span>] = cnt--;</span><br><span class="line">    for (int i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        if (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            for (int j = <span class="number">1</span>; j &lt;= i; ++j) ans[j][i] = cnt--;</span><br><span class="line">            for (int j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) ans[i][j] = cnt--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int j = <span class="number">1</span>; j &lt;= i; ++j) ans[i][j] = cnt--;</span><br><span class="line">            for (int j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) ans[j][i] = cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; ' ';</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333F-Kate-and-imperfection"><a href="#1333F-Kate-and-imperfection" class="headerlink" title="1333F Kate and imperfection"></a>1333F Kate and imperfection</h2><p>对于$1…n$个数，选择一个子序列，他的权值为序列里最大的$gcd(i,j),(i!=j)$，现在问子序列长度从$2…n$的全部答案。</p><p>很明显和质数有点关系</p><ul><li>如果答案是$1$的话，那么所有的数都必须是互质的，这样一直选$1$和质数是最多的；</li><li>如果是$2$的话，那么最多选$1$和质数和$4$；</li><li>如果是$3$的话，那么最多选$1$和质数和$4$，以及$6,9$；</li><li>也就是说，对于答案为$x$，那么序列最长长度和$x$以及$\leq x$的质数有关。<br>那么就可以操作了，直接按下面代码贪就好了，$O(n\log n)$</li></ul><figure class="highlight arduino"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= n; j += i)</span><br><span class="line">            a[j] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 631 Div.2 题解</title>
      <link href="/2787163714/"/>
      <url>/2787163714/</url>
      
        <content type="html"><![CDATA[<p>场上可能忘记带🧠了<br><a id="more"></a></p><h2 id="1330A-Dreamoon-and-Ranking-Collection"><a href="#1330A-Dreamoon-and-Ranking-Collection" class="headerlink" title="1330A Dreamoon and Ranking Collection"></a>1330A Dreamoon and Ranking Collection</h2><p>一列$[1,100]$的数，可以向其补$x$个数，问从$[1,k]$都出现过打的最大的$k$是多少。</p><p>前缀和找一下最大的$k - cnt[k] = x$，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">205</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            a[t] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i) &#123;</span><br><span class="line">            a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i - a[i] == x) ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1330B-Dreamoon-Likes-Permutations"><a href="#1330B-Dreamoon-Likes-Permutations" class="headerlink" title="1330B Dreamoon Likes Permutations"></a>1330B Dreamoon Likes Permutations</h2><p>现在有个序列$a$，问把$a$分为两段，且两段都是排列的方案数。</p><p>分别记一下每个位置从头从尾的方向是否是排列，然后枚举分界点。<br>$O(n\log n)$（我这里用了线段树判断是否是排列，应该有别的做法）</p><figure class="highlight excel"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">namespace data_struct &#123;</span><br><span class="line">    class segment_tree &#123;</span><br><span class="line">#define nd node[<span class="built_in">now</span>]</span><br><span class="line">#define ndl node[<span class="built_in">now</span> &lt;&lt; <span class="number">1</span>]</span><br><span class="line">#define ndr node[<span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]</span><br><span class="line">#define <span class="built_in">mid</span> ((nd.l + nd.r) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    publ<span class="symbol">ic:</span></span><br><span class="line">        struct segment_node &#123;</span><br><span class="line">            <span class="built_in">int</span> l, r, val;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> nn;</span><br><span class="line">        vector&lt;segment_node&gt; node;</span><br><span class="line"></span><br><span class="line">        void pushup(<span class="built_in">int</span> <span class="built_in">now</span>) &#123;</span><br><span class="line">            nd.val = ndl.val + ndr.val;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        void build(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            nd.l = s, nd.r = <span class="built_in">t</span>;</span><br><span class="line">            <span class="built_in">if</span> (s == <span class="built_in">t</span>) &#123;</span><br><span class="line">                nd.val = <span class="number">0</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            build(s, (s + <span class="built_in">t</span>) &gt;&gt; <span class="number">1</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            build(((s + <span class="built_in">t</span>) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            pushup(<span class="built_in">now</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void update(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= nd.l &amp;&amp; <span class="built_in">t</span> &gt;= nd.r) &#123;</span><br><span class="line">                nd.val |= <span class="number">1</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= <span class="built_in">mid</span>)</span><br><span class="line">                update(s, <span class="built_in">t</span>, x, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (<span class="built_in">t</span> &gt; <span class="built_in">mid</span>)</span><br><span class="line">                update(s, <span class="built_in">t</span>, x, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            pushup(<span class="built_in">now</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> query(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= nd.l &amp;&amp; <span class="built_in">t</span> &gt;= nd.r) &#123;</span><br><span class="line">                return nd.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= <span class="built_in">mid</span>) &#123;</span><br><span class="line">                ret += query(s, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span> (<span class="built_in">t</span> &gt; <span class="built_in">mid</span>) &#123;</span><br><span class="line">                ret += query(s, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            return ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void init(<span class="built_in">int</span> nnn) &#123;</span><br><span class="line">            nn = nnn;</span><br><span class="line">            node.resize(nn &lt;&lt; <span class="number">2</span> | <span class="number">3</span>);</span><br><span class="line">            build(<span class="number">1</span>, nn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; tree;</span><br><span class="line">&#125;</span><br><span class="line">using namespace data_struct;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">        cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line"></span><br><span class="line">        tree.init(<span class="built_in">n</span>);</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; a(<span class="built_in">n</span> + <span class="number">5</span>), pre(<span class="built_in">n</span> + <span class="number">5</span>), suf(<span class="built_in">n</span> + <span class="number">5</span>);</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            tree.update(a[i], a[i], <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (tree.query(<span class="number">1</span>, i) == i)</span><br><span class="line">                pre[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tree.init(<span class="built_in">n</span>);</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="built_in">n</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            tree.update(a[i], a[i], <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (tree.query(<span class="number">1</span>, <span class="built_in">n</span> - i + <span class="number">1</span>) == <span class="built_in">n</span> - i + <span class="number">1</span>)</span><br><span class="line">                suf[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;pii&gt; ans;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">if</span> (pre[i] &amp;&amp; suf[i + <span class="number">1</span>])</span><br><span class="line">                ans.emplace_back(i, <span class="built_in">n</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans.size() &lt;&lt; endl;</span><br><span class="line">        for (pii i <span class="symbol">:</span> ans)</span><br><span class="line">            cout &lt;&lt; i.first &lt;&lt; ' ' &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329A-Dreamoon-Likes-Coloring"><a href="#1329A-Dreamoon-Likes-Coloring" class="headerlink" title="1329A Dreamoon Likes Coloring"></a>1329A Dreamoon Likes Coloring</h2><p>有$n$个位置，$m$个颜色，每个颜色涂长$l_i$的段，问能否让每个格子都被涂色，且最终每个颜色至少留下一格。</p><p>因为每个颜色只涂一次，那么从右涂，下一次涂色覆盖它的一部分，仅留下右端点，如果剩余的长度$\geq$当前段长度，就能保证每个颜色出现一次。如果有格子没涂，只需要将后涂的颜色从左涂就行，$O(m)$。</p><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, nn;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    nn = n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l[i];</span><br><span class="line">        sum += l[i];</span><br><span class="line">        <span class="keyword">if</span> (l[i] &gt; n) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.emplace_back(n - l[i] + <span class="number">1</span>);</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; nn) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.back() != <span class="number">1</span>) &#123;</span><br><span class="line">        ans.back() = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i] + l[i] &lt; ans[i - <span class="number">1</span>])</span><br><span class="line">                ans[i - <span class="number">1</span>] = ans[i] + l[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : ans) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329B-Dreamoon-Likes-Sequences"><a href="#1329B-Dreamoon-Likes-Sequences" class="headerlink" title="1329B Dreamoon Likes Sequences"></a>1329B Dreamoon Likes Sequences</h2><p>有一个上界$d$，一个任意长度的序列如果$a_i\leq d$，且$\oplus_{j=1}^{i-1} a_i&lt; \oplus_{j=1}^i a_i, i\in [1,n]$即合法，求能构造的合法序列数量。</p><p>关键在于异或是不进位的加法，那么新加入的数必定要比前一个数的二进制第一个有效位靠前，所有按每个数二进制最高位分组统计个数$(cnt[i])$，然后设&amp;dp[i]&amp;表示序列最长长度为$i$时的答案，转移方程为：</p><script type="math/tex; mode=display">dp[i] = (dp[i - 1] + 1) * cnt[i - 1]</script><p>因为前一组的答案都可以再添加一个当前组的数字，也可以只选当前组的数字，所以是$dp[i - 1] + 1$，$O(32)$。</p><figure class="highlight lsl"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int q, m, n;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="type">vector</span>&lt;int&gt; dp(<span class="number">35</span>), cnt(<span class="number">35</span>);</span><br><span class="line">        for (int i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; <span class="number">31</span>; ++i) &#123;</span><br><span class="line">            cnt[i] = (min(n, (j &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>) + <span class="number">1</span> - j) % m;</span><br><span class="line">            if (cnt[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cnt[i] = <span class="number">0</span>;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = <span class="number">1</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            dp[i] = (ll(dp[i - <span class="number">1</span>] + <span class="number">1</span>) * cnt[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>]) % m;</span><br><span class="line">        cout &lt;&lt; dp[<span class="number">31</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329C-Drazil-Likes-Heap"><a href="#1329C-Drazil-Likes-Heap" class="headerlink" title="1329C Drazil Likes Heap"></a>1329C Drazil Likes Heap</h2><p>有一个满二叉树形式的高$h$的堆，现在可以选择一个位置，将这个位置值变成大儿子的值，然后再递归操作自己的大儿子，问如何操作让堆变成满二叉树且树高为$g$的形式，且权值最小的方案。<br>（上面说的操作相当于选一个点删除，递归的把大儿子移上来）</p><p>因为大顶堆，所以每次从上层操作收益一定是最大的。而当我们选定一个点后，如果操作，那么它的路径是唯一的。因此我们从树顶开始枚举，能删就删。判断是否可以删除，只需要看最终影响的叶子节点的高度，详细可以看代码。$O(2^gh)$</p><figure class="highlight arduino"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h, g;</span><br><span class="line"><span class="keyword">int</span> a[sz &lt;&lt; <span class="number">1</span>], hit[sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l (u &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r l + 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> uu = u;</span><br><span class="line">    hit[u] = hit[u &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[l] &gt; a[r]) u = l;</span><br><span class="line">        <span class="keyword">else</span> u = r;</span><br><span class="line">        hit[u] = hit[u &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hit[u] &gt; g) &#123;</span><br><span class="line">        u = uu;</span><br><span class="line">        <span class="keyword">while</span> (a[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[l] &gt; a[r]) a[u] = a[l], u = l;</span><br><span class="line">            <span class="keyword">else</span> a[u] = a[r], u = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; h &gt;&gt; g;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; h); ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; h; i &lt; (<span class="number">2</span> &lt;&lt; h); ++i)</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        hit[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; g); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (check(i))</span><br><span class="line">                ans.emplace_back(i);</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : ans) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（下一题太难了，所以结束了）</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 79 题解</title>
      <link href="/3592098837/"/>
      <url>/3592098837/</url>
      
        <content type="html"><![CDATA[<p>VP了一场<br><a id="more"></a></p><h2 id="1279A-New-Year-Garland"><a href="#1279A-New-Year-Garland" class="headerlink" title="1279A New Year Garland"></a>1279A New Year Garland</h2><p>有三种东西，分别$a,b,c$个，问能不能组成相同物品不相邻的一列。</p><p>挑最大的把其他插到最大的间隔里就行，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">        sort(a, a + <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] + a[<span class="number">1</span>] &lt; a[<span class="number">2</span>] - <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279B-Verse-For-Santa"><a href="#1279B-Verse-For-Santa" class="headerlink" title="1279B Verse For Santa"></a>1279B Verse For Santa</h2><p>有$n$个物品，各自有长度，依次的放在长$s$内，现在可以省略一个，问最多放几个。</p><p>贪心比较，如果有必要省略必定省去最长的，否则不省略，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum = <span class="number">0</span>, la = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (la &lt; a[i]) &#123;</span><br><span class="line">                sum += la;</span><br><span class="line">                la = a[i];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> sum += a[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; k) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k - sum &gt;= la) ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279C-Stack-of-Presents"><a href="#1279C-Stack-of-Presents" class="headerlink" title="1279C Stack of Presents"></a>1279C Stack of Presents</h2><p>有一个长$n$的排列，从右到左压到栈里，现在要取出$m$个数，如果这个数上面有$k$个数，需要花$2k+1$秒，但在放回$k$个数时，可以按任意顺序放回，问取出$m$个数的最小耗时。</p><p>在取出一个较深的数的时候，前面的数我们可以按照被取的顺序，倒序放回，这样取它的时候就会在栈顶。那么维护一个最深操作的深度，在操作比这个位置深得数的代价就是$2k+1$，否则代价是$1$，$O(n+m)$</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, la = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            pos[t] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            <span class="keyword">if</span> (pos[t] &lt; la) ++ans;</span><br><span class="line">            <span class="keyword">else</span> ans += <span class="number">2</span> * (pos[t] - i) + <span class="number">1</span>;</span><br><span class="line">            la = <span class="built_in">max</span>(la, pos[t]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279D-Santa’s-Bot"><a href="#1279D-Santa’s-Bot" class="headerlink" title="1279D Santa’s Bot"></a>1279D Santa’s Bot</h2><p>圣诞老人用机器人发礼物，有$n$个小孩，每个小孩有$k_i$个愿望。但是机器人会随机的选一个小孩$x$，再随机选他的一个愿望$y$，再随机发给某个小孩$z$，假如$y$确实是$z$的愿望之一，那么这样的一个三元组$(x,y,z)$就是正确的，问机器人选出正确三元组的概率。</p><p>因为愿望最多不超过$10^6$，所有我们枚举愿望。选中一个孩子的概率是$\frac 1n$，选他的一个愿望被选中的概率是$\frac 1{k_i}$，统计想要这个礼物的孩子个数$cnt[j]$，那么发送正确的概率是$\frac {cnt[j]}n$，因为每个情况独立，可以相加，$O(\sum k_i)$。</p><figure class="highlight excel"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">mod</span> = <span class="number">998244353</span>;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">1</span>e6 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; gift[<span class="built_in">N</span>];</span><br><span class="line">ll cnt[<span class="built_in">N</span>], inv[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line">void init() &#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1</span>e6; ++i) &#123;</span><br><span class="line">        inv[i] = (<span class="built_in">mod</span> - <span class="built_in">mod</span> / i) * inv[<span class="built_in">mod</span> % i] % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">t</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; <span class="built_in">t</span>;</span><br><span class="line">        gift[i].resize(<span class="built_in">t</span>);</span><br><span class="line">        for (<span class="built_in">int</span> &amp;j <span class="symbol">:</span> gift[i]) &#123;</span><br><span class="line">            cin &gt;&gt; j;</span><br><span class="line">            ++cnt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        for (<span class="built_in">int</span> j <span class="symbol">:</span> gift[i]) tmp += cnt[j];</span><br><span class="line">        ans = (ans + inv[gift[i].size()] * tmp % <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * inv[<span class="built_in">n</span>] % <span class="built_in">mod</span> * inv[<span class="built_in">n</span>] % <span class="built_in">mod</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279E-New-Year-Permutations"><a href="#1279E-New-Year-Permutations" class="headerlink" title="1279E New Year Permutations"></a>1279E New Year Permutations</h2><p>题意比较难描述，建议看<a href="https://codeforces.com/contest/1279/problem/E" target="_blank" rel="noopener">原文</a>/翻译</p><p>首先考虑一个长$n$的大环有多少排列，因为$n$一定是开头，$1$一定是$n$的前驱，之后剩下的$n-2$个点可以任意排，即$(n-2)!$。现在设$dp[i]$表示长为$i$的串有多少种合法排列，转移方程即：</p><script type="math/tex; mode=display">dp[i] = \sum_{j=0}^{i-1}dp[j](i-j-2)!</script><p>然后我们可以通过从字典序由小到大枚举，得到第$k$大的排列由哪些长度小序列组成。根据这一步得到的结果，问题被分解成了长为$l$的环，$l$位置固定，$1$固定是$l$前驱，字典序的第$x$个环是哪个（在按位枚举字典序的时候其实就是空闲位的阶乘，枚举的过程中要保证不能形成小环，即长度必须是上一步算出的结果）,那么拼起来就可以得到最终答案，$O(n^2)$</p><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">55</span>], fa[<span class="number">55</span>], vis[<span class="number">55</span>];</span><br><span class="line">ll dp[<span class="number">55</span>], fac[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    x -= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &lt;= <span class="number">50</span>; ++i)</span><br><span class="line">        fac[i] = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">22</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            dp[i] += dp[j] * calc(i - j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">22</span>; i &lt;= <span class="number">50</span>; ++i) &#123;</span><br><span class="line">        dp[i] = <span class="number">1e18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != fa[x])</span><br><span class="line">        <span class="keyword">return</span> fa[x] = fi(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permute</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, ll rk)</span> </span>&#123;</span><br><span class="line">    ans[l] = r;</span><br><span class="line">    vis[r] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = r - l - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt;= r; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == r &amp;&amp; !vis[j]) &#123;</span><br><span class="line">                ans[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (vis[j] || fi(i) == fi(j)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (fac[x] &gt;= rk) &#123;</span><br><span class="line">                --x;</span><br><span class="line">                ans[i] = vis[j] = j;</span><br><span class="line">                fa[fi(j)] = fi(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                rk -= fac[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        ll k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; dp[n]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (r = l; r &lt;= n; ++r) &#123;</span><br><span class="line">                ll term = calc(r - l + <span class="number">1</span>) * dp[n - r];</span><br><span class="line">                <span class="keyword">if</span> (term &gt;= k)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k -= term;</span><br><span class="line">            &#125;</span><br><span class="line">            ll rk = (k - <span class="number">1</span>) / dp[n - r] + <span class="number">1</span>;</span><br><span class="line">            k = (k - <span class="number">1</span>) % dp[n - r] + <span class="number">1</span>;</span><br><span class="line">            permute(l, r, rk);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279F-New-Year-and-Handle-Change"><a href="#1279F-New-Year-and-Handle-Change" class="headerlink" title="1279F New Year and Handle Change"></a>1279F New Year and Handle Change</h2><p>有一个字符串，含有大小写字母，每次操作可以把长为$l$的一段字母全变成大写或小写，问最后能得到的$min$（大写字母，小写字母）的值。</p><p>挂个链，有缘回来看。<a href="https://twifor.github.io/2020/01/29/Educational-Codeforces-Round-79/" target="_blank" rel="noopener">题解</a></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> edu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
            <tag> edu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 630 Div.2 题解</title>
      <link href="/1747842812/"/>
      <url>/1747842812/</url>
      
        <content type="html"><![CDATA[<p>忘记比赛时间了…<br><a id="more"></a></p><h2 id="1332A-Exercising-Walk"><a href="#1332A-Exercising-Walk" class="headerlink" title="1332A Exercising Walk"></a>1332A Exercising Walk</h2><p>有一个机器人开始位于$(x,y)$，现在要求上下左右分别走$a,b,c,d$步，要求路径在$(x1,y1),(x2,y2)$为对角的矩形范围内，问是否可行。</p><p>横竖可以分别考虑，如果最终点在限制范围内，一定可以有满足条件的路，但当给的矩形长或宽为$1$的时候要特判，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d, x, y, x1, y1, x2, y2, f = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d</span><br><span class="line">            &gt;&gt; x &gt;&gt; y &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="keyword">if</span> ((x1 == x2) &amp;&amp; (a || b))</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((y1 == y2) &amp;&amp; (c || d))</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        b -= a, d -= c;</span><br><span class="line">        <span class="keyword">if</span> (b + x &lt; x1 || b + x &gt; x2)</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (d + y &lt; y1 || d + y &gt; y2)</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332B-Composite-Coloring"><a href="#1332B-Composite-Coloring" class="headerlink" title="1332B Composite Coloring"></a>1332B Composite Coloring</h2><p>有$n$个$\le 1000$的数，要求涂色相同的数字不互质，最多$11$种颜色，问一种合法的涂色方案。</p><p>读反要求了，刚了好一会。。只要按最小质因子涂色就行，因为第$11$个因子是$31$，那么比它大的合数一定在这$11$个质数内有质因子，$O(n^2)$。</p><figure class="highlight properties"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">int</span> <span class="string">main() &#123;</span></span><br><span class="line">    <span class="attr">int</span> <span class="string">q;</span></span><br><span class="line">    <span class="attr">cin</span> <span class="string">&gt;&gt; q;</span></span><br><span class="line">    <span class="attr">while</span> <span class="string">(q--) &#123;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">n, t;</span></span><br><span class="line">        <span class="attr">cin</span> <span class="string">&gt;&gt; n;</span></span><br><span class="line">        <span class="meta">vector&lt;int&gt;</span> <span class="string">ans(n), tmp[1001];</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">            <span class="attr">cin</span> <span class="string">&gt;&gt; t;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(int j = 2; j &lt; 1001; ++j) &#123;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(t % j == 0) &#123;</span></span><br><span class="line">                    <span class="attr">tmp[j].emplace_back(i);</span></span><br><span class="line">                    <span class="attr">break;</span></span><br><span class="line">                <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">cnt = 0;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(auto &amp;i : tmp) &#123;</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(!i.empty()) ++cnt;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(int j : i) ans[j] = cnt;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">            <span class="attr">cout</span> <span class="string">&lt;&lt; ans[i] &lt;&lt; ' ';</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; endl;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">0;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1332C-K-Complete-Word"><a href="#1332C-K-Complete-Word" class="headerlink" title="1332C K-Complete Word"></a>1332C K-Complete Word</h2><p>一个字符串$S$，要求$T$是回文的，且$k$是它的周期，一次操作可以换一个字符，问最少操作次数让$S$满足要求。</p><p>因为$S$对应的合法串是固定的，那么按题意取某些对应位置暴力就行了，每个位置只访问一次，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j += k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!v[j]) &#123;</span><br><span class="line">                    v[j] = <span class="number">1</span>;</span><br><span class="line">                    ++cnt[s[j] - <span class="string">'a'</span>];</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!v[n - j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    v[n - j - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    ++cnt[s[n - j - <span class="number">1</span>] - <span class="string">'a'</span>];</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">                tmp = <span class="built_in">max</span>(tmp, cnt[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = num - tmp;</span><br><span class="line">            ans += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332D-Walk-on-Matrix"><a href="#1332D-Walk-on-Matrix" class="headerlink" title="1332D Walk on Matrix"></a>1332D Walk on Matrix</h2><p>现在有一个假$DP$算法，求一个矩阵从左上到右下角路径各店权值$\&amp;$起来的最大权值，要求构造一个矩阵$(n\leq 500)$，是真实值和算法得到的结果相差$k$。</p><p>假的原因是贪心对$\&amp;$不成立。其实只要构造两条路的矩阵，一条的值稍大，另一条稍小，但到终点的时候大值没办法取就好，$O(1)$。<br>（听说了很多乱搞的做法，但其实样例2提醒挺明显的。。。）</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3 3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span> &lt;&lt; (<span class="number">32</span> - __builtin_clz(k));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (c + k) &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="string">" 0"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">         &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="string">" 0"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">         &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; (c + k) &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332E-Height-All-the-Same"><a href="#1332E-Height-All-the-Same" class="headerlink" title="1332E Height All the Same"></a>1332E Height All the Same</h2><p>一个大小为$n\times m$的矩阵，初始值为${ij}$，每次操作可以把一个位置增加$2$，或把相邻的两个位置各增加$1$，要求$L \leq a_{ij} \leq R$，问这样的矩阵有几个。</p><p>其实很容易想到奇偶性的问题，操作二可以把相邻的两个数奇偶性取反，第一个操作可以把奇偶性相同的数补成相同值。那么如果原始矩阵里奇数的个数或偶数的个数为偶数，就一定可以把所有数奇偶性转化相同。<br>问题就变成了$n\times m$各数字有几种放法，我们把总数分奇偶考虑：</p><ul><li>如果$n\times m$是奇数，那么所有数字可以随便放，答案就是$(R-L+1)^{n\times m}$</li><li>如果$n\times m$是偶数，设$odd$为$a_{ij}$为奇数个数，$even$为偶数个数，那么$odd$和$even$都需要取偶数，设$x$为$[L,R]$中的奇数个数，$y$为$[L,R]$中的偶数个数，答案就是$\sum_{odd=2k}^{n\times m}C_{odd}^{n\times m - odd}x^{odd}y^{even}$。可以发现这其实就是二项式中的偶数项的和，因此化简为：<script type="math/tex; mode=display">\frac {(x + y)^{n\times m} - (x - y)^{n\times m}}{2}</script>$O(\log nm)$</li></ul><figure class="highlight nginx"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attribute">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ll</span> qpow(ll a, ll b) &#123;</span><br><span class="line">    <span class="attribute">ll</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">while</span> (b) &#123;</span><br><span class="line">        <span class="attribute">if</span> (b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        <span class="attribute">a</span> = a * a % mod; <span class="attribute">b</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">int</span> main() &#123;</span><br><span class="line">    <span class="attribute">ll</span> l, r, n, m;</span><br><span class="line">    <span class="attribute">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="attribute">n</span> *= m;</span><br><span class="line">    <span class="attribute">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="attribute">cout</span> &lt;&lt; qpow(r - l + <span class="number">1</span>, n) &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="section">else</span> &#123;</span><br><span class="line">        <span class="attribute">ll</span> odd = (r + <span class="number">1</span>) / <span class="number">2</span> - l / <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ll</span> even = r / <span class="number">2</span> - (l - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">cout</span> &lt;&lt; ((qpow(even + odd, n) + qpow(even - odd, n)) * (mod + <span class="number">1</span>) / <span class="number">2</span>) % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332F-Independent-Set"><a href="#1332F-Independent-Set" class="headerlink" title="1332F Independent Set"></a>1332F Independent Set</h2><p>有一颗无根树，现在求出各个边导出子图各独立集个数的和。</p><p>首先一颗树的独立集个数可以树$dp$得到，此题要求所有的边导出子图求和，实际上相当于删掉了一些边，其中如果有孤立点的话不能选中这个点。做法是维护$3$个值，$dp[u][0]$表示点$u$不被选中时的答案，$dp[u][1]$表示点$u$不被选中时的答案，$dp[u][2]$表示点$u$和子结点一条边都不连时的答案。在$DFS$中用$num0$表示以$u$的子结点$v$为根的子树的全部答案，用$num1$表示子树的全部答案去掉$v$孤立的答案，那么转移：</p><ul><li>$dp[u][0]=\prod (num0+num1)$，即当$u$选中时，子结点状态任意:<ul><li>当$u$不选时，选$e(u,v)$这条边，那么有$num1$的贡献。</li><li>当$u$不选时，不选$e(u,v)$这条边，那么有$num0$的贡献（因为不能让$v$孤立且被选）。</li></ul></li><li>$dp[u][1]=\prod (num0+dp[v][0])$，当$u$选中时，子结点不能被选；<ul><li>当$u$选中时，选$e(u,v)$这条边，那么有$dp[v][0]$的贡献（因为相邻结点不能再被选中）。</li><li>当$u$选中时，不选$e(u,v)$这条边，那么有$num0$的贡献（同上$2$）。</li></ul></li><li>$dp[u][2]=\prod num0$，<ul><li>当$u$孤立时，那么有$num0$的贡献（同上$2$）。</li></ul></li></ul><figure class="highlight prolog"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int <span class="symbol">N</span> = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="symbol">N</span>][<span class="number">3</span>];</span><br><span class="line">vector&lt;int&gt; g[<span class="symbol">N</span>];</span><br><span class="line"></span><br><span class="line">void dfs(int u, int fa = <span class="number">0</span>) &#123;</span><br><span class="line">    dp[u][<span class="number">0</span>] = dp[u][<span class="number">1</span>] = dp[u][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    for (int v : g[u]) &#123;</span><br><span class="line">        if (v == fa) continue;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        ll num1 = dp[v][<span class="number">0</span>] + dp[v][<span class="number">1</span>] - dp[v][<span class="number">2</span>];</span><br><span class="line">        ll num0 = dp[v][<span class="number">0</span>] + dp[v][<span class="number">1</span>];</span><br><span class="line">        dp[u][<span class="number">0</span>] = dp[u][<span class="number">0</span>] * (num1 + num0) <span class="comment">% mod;</span></span><br><span class="line">        dp[u][<span class="number">2</span>] = dp[u][<span class="number">2</span>] * (num1) <span class="comment">% mod;</span></span><br><span class="line">        dp[u][<span class="number">1</span>] = dp[u][<span class="number">1</span>] * (num1 + dp[v][<span class="number">0</span>]) <span class="comment">% mod;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; (dp[<span class="number">1</span>][<span class="number">0</span>] + dp[<span class="number">1</span>][<span class="number">1</span>] - dp[<span class="number">1</span>][<span class="number">2</span>] - <span class="number">1</span> + <span class="number">2</span> * mod) <span class="comment">% mod &lt;&lt; endl;</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 612 Div.2 题解</title>
      <link href="/1925655048/"/>
      <url>/1925655048/</url>
      
        <content type="html"><![CDATA[<p>补习一场期末时候没打的DIv.2<br><a id="more"></a></p><h2 id="1287A-Angry-Students"><a href="#1287A-Angry-Students" class="headerlink" title="1287A Angry Students"></a>1287A Angry Students</h2><p>有一个长$n$字符串，由$A$和$P$构成。每秒一个$A$可以将紧随其后的一个$P$变成$A$，问最后一个从$P$变成$A$的时间。</p><p>出先过$A$之后最长的连续$P$的长度，$O(n\log n)$。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; s;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, la = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'A'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (la != <span class="number">-1</span>)</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, i - la - <span class="number">1</span>);</span><br><span class="line">                la = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (la != <span class="number">-1</span>)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="keyword">int</span>(s.length()) - la - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1287B-Hyperset"><a href="#1287B-Hyperset" class="headerlink" title="1287B Hyperset"></a>1287B Hyperset</h2><p>有$n$个长为$k$字符串，由$S$、$E$和$T$构成，求对应位置字符相同或这个位置两两不同的三元组的数目。</p><p>枚举前两个字符串，暴力得到目标串，$O(kn^2\log n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        ++mp[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> calc = [k](<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b) &#123;</span><br><span class="line">        <span class="built_in">string</span> tmp = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[i]) tmp[i] = a[i];</span><br><span class="line">            <span class="keyword">else</span> tmp[i] = (<span class="string">'S'</span> + <span class="string">'E'</span> + <span class="string">'T'</span> - a[i] - b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            ans += mp[calc(s[i], s[j])];</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j]) ans -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans / <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1286A-Garland"><a href="#1286A-Garland" class="headerlink" title="1286A Garland"></a>1286A Garland</h2><p>有长为$n$的排列，一些位置的数字被去掉了，现在填上数字，要求最小化相邻数字奇偶性不同的对数。</p><p>官方题解贪心，不过DP也很明显。<br>设$dp[i][x][y][0/1]$，表示处理到第$i$位，奇数剩x个，偶数剩y个，最后一个数的奇偶性，转移也很明显，$O(50^2n)$;</p><figure class="highlight prolog"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int dp[<span class="number">105</span>][<span class="number">55</span>][<span class="number">55</span>][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    ios_base::sync_with_stdio(false);</span><br><span class="line">    cin.tie(nullptr);</span><br><span class="line">#ifdef <span class="symbol">MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line">//    freopen(<span class="string">"../0out.txt"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    int odd = (n + <span class="number">1</span>) / <span class="number">2</span>, eve = n / <span class="number">2</span>;</span><br><span class="line">    int a[<span class="number">105</span>] = &#123;&#125;;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        if (a[i]) &#123;</span><br><span class="line">            if (a[i] &amp; <span class="number">1</span>)</span><br><span class="line">                --odd;</span><br><span class="line">            else</span><br><span class="line">                --eve;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    memset(dp, <span class="number">0x3f</span>, sizeof(dp));</span><br><span class="line">    dp[<span class="number">0</span>][odd][eve][<span class="number">0</span>] = dp[<span class="number">0</span>][odd][eve][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    for (int i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        if (a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            int tt = a[i + <span class="number">1</span>] &amp; <span class="number">1</span>;</span><br><span class="line">            for (int j = <span class="number">0</span>; j &lt; <span class="number">52</span>; ++j) &#123;</span><br><span class="line">                for (int k = <span class="number">0</span>; k &lt; <span class="number">52</span>; ++k) &#123;</span><br><span class="line">                    if (dp[i][j][k][<span class="number">0</span>] != <span class="symbol">INF32</span>) &#123;</span><br><span class="line">                        if (tt) dp[i + <span class="number">1</span>][j][k][<span class="number">1</span>] = min(dp[i][j][k][<span class="number">1</span>], dp[i][j][k][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                        else dp[i + <span class="number">1</span>][j][k][<span class="number">0</span>] = min(dp[i][j][k][<span class="number">0</span>], dp[i][j][k][<span class="number">0</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (dp[i][j][k][<span class="number">1</span>] != <span class="symbol">INF32</span>) &#123;</span><br><span class="line">                        if (tt) dp[i + <span class="number">1</span>][j][k][<span class="number">1</span>] = min(dp[i + <span class="number">1</span>][j][k][<span class="number">1</span>], dp[i][j][k][<span class="number">1</span>]);</span><br><span class="line">                        else dp[i + <span class="number">1</span>][j][k][<span class="number">0</span>] = min(dp[i + <span class="number">1</span>][j][k][<span class="number">0</span>], dp[i][j][k][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int j = <span class="number">0</span>; j &lt; <span class="number">52</span>; ++j) &#123;</span><br><span class="line">                for (int k = <span class="number">0</span>; k &lt; <span class="number">52</span>; ++k) &#123;</span><br><span class="line">                    if (dp[i][j][k][<span class="number">0</span>] != <span class="symbol">INF32</span>) &#123;</span><br><span class="line">                        if (k) dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>][<span class="number">0</span>] = min(dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>][<span class="number">0</span>], dp[i][j][k][<span class="number">0</span>]);</span><br><span class="line">                        if (j) dp[i + <span class="number">1</span>][j - <span class="number">1</span>][k][<span class="number">1</span>] = min(dp[i + <span class="number">1</span>][j - <span class="number">1</span>][k][<span class="number">1</span>], dp[i][j][k][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (dp[i][j][k][<span class="number">1</span>] != <span class="symbol">INF32</span>) &#123;</span><br><span class="line">                        if (k) dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>][<span class="number">0</span>] = min(dp[i + <span class="number">1</span>][j][k - <span class="number">1</span>][<span class="number">0</span>], dp[i][j][k][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                        if (j) dp[i + <span class="number">1</span>][j - <span class="number">1</span>][k][<span class="number">1</span>] = min(dp[i + <span class="number">1</span>][j - <span class="number">1</span>][k][<span class="number">1</span>], dp[i][j][k][<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; min(dp[n][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>], dp[n][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1286B-Numbers-on-Tree"><a href="#1286B-Numbers-on-Tree" class="headerlink" title="1286B Numbers on Tree"></a>1286B Numbers on Tree</h2><p>一颗有根树，每个结点有权值$a_i$，再定义$c_i$是在$i$的子树中的$a_j$小于$a_i$的数目，判断是否合法，合法给出一个$a$的构造。</p><p>首先假如在一个一维序列上做类似问题，那么从尾到头反向处理，边插入边排序，同时保证$a$的值唯一就可得到构造。那么对于树上来说。只要从$DFS$序反向处理，同样边排序边插入，维护序列的值，就可以得到答案。而不合法情况就是当$i$结点的所有子结点权值都小于$a_i$仍不满足$c_i$的要求。$O(n^2\log n)$</p><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2005</span>], cnt[<span class="number">2005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">2005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">vector</span>&lt;pii&gt; &amp;tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        dfs(v, tmp);</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c[u] &gt; cnt[u]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[u]++;</span><br><span class="line">    pii t = &#123;c[u], <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> p = lower_bound(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q = p; q &lt; tmp.<span class="built_in">end</span>(); ++q) ++q-&gt;first;</span><br><span class="line">    tmp.insert(p, &#123;c[u], u&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, rt;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, p, t; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) rt = i;</span><br><span class="line">        <span class="keyword">else</span> g[p].emplace_back(i);</span><br><span class="line">        c[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; v;</span><br><span class="line">    dfs(rt, v);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (pii &amp;i : v) c[i.second] = i.first + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1286C1-amp-amp-C2-Madhouse-Both-version"><a href="#1286C1-amp-amp-C2-Madhouse-Both-version" class="headerlink" title="1286C1&amp;&amp;C2 Madhouse (Both version)"></a>1286C1&amp;&amp;C2 Madhouse (Both version)</h2><p>有一个长$n$的字符串，每次询问$l r$，吧其中的所有字串内的顺序乱排后返回，最多三次询问，求原字符串。</p><p>对于$E1$来说，先问$S[1,n]$，再问$S[2,n]$，用$map$记录排序后的串出现的次数，再相减就可以得到$S[1,1],S[1,2]…S[1,n]$，依次就可以得到原串$S$。<br>对于$E2$来说，由于限制了返回串的数目，不能直接照搬$E1$，那么我们发现$S[1,n]$询问的结果按长度不同把字符出现次数统计起来，在层与层之间字符出现次数不同，可以通过做差算出这层的两端是哪些字母,比如：$abcde$</p><script type="math/tex; mode=display">a,b,c,d,e\;(a-1, b-1, c-1, d-1, e-1) \\ab,bc,cd,de(a-1, b-2, c-2, d-2, e-1) \\abc,bcd,cde(a-1, b-2, c-3, d-2, e-1) \\abcd,bcde\quad(a-1, b-2, c-2, d-2, e-1) \\abcde\qquad\;(a-1, b-1, c-1, d-1, e-1)</script><p>但这时无法确定首尾顺序，那么再将前$n/2$按$C1$的做法得到，就可以推出原串$S$。</p><figure class="highlight arduino"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line"><span class="comment">//    freopen("../0in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> r = (n + <span class="number">1</span>) / <span class="number">2</span>, nn = (r + <span class="number">1</span>) * r / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"? 1 "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        ++mp[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"? 2 "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        nn -= r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">            --mp[s];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : mp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.second) tmp.push_back(i.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> cmp = [](<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b) &#123; <span class="keyword">return</span> a.length() &lt; b.length(); &#125;;</span><br><span class="line">    sort(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tcnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : tmp[i])  ++tcnt[c - <span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tcnt[j] &gt; cnt[j])</span><br><span class="line">                ans[i] = j + <span class="string">'a'</span>;</span><br><span class="line">            cnt[j] = tcnt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nn = (n + <span class="number">1</span>) * n / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"? 1 "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">num</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) ++num[s.length()][c - <span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fill</span>(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    r = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ht;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = (num[<span class="number">1</span>][j] - cnt[j]) * (i + <span class="number">1</span>) - (num[i + <span class="number">1</span>][j] - num[<span class="number">0</span>][j]);</span><br><span class="line">            <span class="keyword">while</span> (p--) &#123;</span><br><span class="line">                ht.emplace_back(j);</span><br><span class="line">                ++cnt[j]; num[<span class="number">0</span>][j] += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans[i - <span class="number">1</span>] == ht[<span class="number">0</span>] + <span class="string">'a'</span>) ans[n - i] = ht[<span class="number">1</span>] + <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[n - i] = ht[<span class="number">0</span>] + <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 84 题解</title>
      <link href="/1933395439/"/>
      <url>/1933395439/</url>
      
        <content type="html"><![CDATA[<p>又血崩了一场<br><a id="more"></a></p><h2 id="1237A-Sum-of-Odd-Integers"><a href="#1237A-Sum-of-Odd-Integers" class="headerlink" title="1237A Sum of Odd Integers"></a>1237A Sum of Odd Integers</h2><p>给一个数$n$，问能否分成$k$个奇数的和。</p><p>可以等差数列算出$k$个奇数最小的和，之后判断它和$n$的关系就好，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        ll mi = ll(<span class="number">1</span> + <span class="number">2</span> * (k - <span class="number">1</span>) + <span class="number">1</span>) * k / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n - mi &gt;= <span class="number">0</span> &amp;&amp; (n - mi) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237B-Princesses-and-Princes"><a href="#1237B-Princesses-and-Princes" class="headerlink" title="1237B Princesses and Princes"></a>1237B Princesses and Princes</h2><p>有$n$个公主和$n$个王子，每个公主有一列喜欢的王子，如果一个公主喜欢的王子没被分配的时候，她会和最小编号的王子结合。现在可以给一个公主加一个喜欢的人，问是否需要，如果需要，方案是什么。</p><p>如果一个公主剩下了，那么一定有一个王子剩下，那么选择一对结合就好，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, la = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> k, t, f = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">                <span class="keyword">if</span> (!f &amp;&amp; !b[t]) b[t] = f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!f) la = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (la == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"OPTIMAL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPROVE"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">                     &lt;&lt; la &lt;&lt; <span class="string">' '</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237C-Game-with-Chips"><a href="#1237C-Game-with-Chips" class="headerlink" title="1237C Game with Chips"></a>1237C Game with Chips</h2><p>在一个$n\times m$的格子上有$n$个可移动点以及对应$n$个目标点，每次操作可以让所有可移动的点全部上下左右移动一格，要求在$2nm$次操作内让所有点经过目标点至少一次，输出方案。</p><p>先用$n+m-2$次操作将所有点移动到一角，再用$n\times m-1$次操作遍历所有格子，$O(nm)$。</p><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, k, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k * <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n + m - <span class="number">2</span> + n * (m - <span class="number">1</span>) + n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'L'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'U'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'L'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'R'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'D'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237D-Infinite-Path"><a href="#1237D-Infinite-Path" class="headerlink" title="1237D Infinite Path"></a>1237D Infinite Path</h2><p>有一个长为$n$的排列，每个位置有一个颜色，问最少做几次置换后某些位置可以产生一个同色的环。</p><p>对于一个长$m$的小环来说，有一个性质是：$p^k[x_i] = x_{(i+k)\;mod\;m}$，那么第$k$次置换可以将原来的环分为$GCD(k, m)$个小环，只需要对$p^0$的每个小环枚举因子取同色成立的最小值就好，$O(n^{\frac {4}{3}})$。</p><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = INF32;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i]) &#123;</span><br><span class="line">                tmp.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">while</span> (c[j]) &#123;</span><br><span class="line">                    tmp.emplace_back(c[j]);</span><br><span class="line">                    c[j] = <span class="number">0</span>; j = p[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> m = tmp.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k * k &lt;= m; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m % k) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> strt = <span class="number">0</span>; strt &lt; k; ++strt) &#123;</span><br><span class="line">                        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                        j = strt;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; m) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmp[j] != tmp[(j + k) % m]) &#123;</span><br><span class="line">                                ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            j += k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (ok) ans = <span class="built_in">min</span>(ans, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> strt = <span class="number">0</span>; strt &lt; m / k; ++strt) &#123;</span><br><span class="line">                        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                        j = strt;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; m) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmp[j] != tmp[(j + m / k) % m]) &#123;</span><br><span class="line">                                ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            j += m / k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (ok) ans = <span class="built_in">min</span>(ans, m / k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237E-Count-The-Blocks"><a href="#1237E-Count-The-Blocks" class="headerlink" title="1237E Count The Blocks"></a>1237E Count The Blocks</h2><p>一个长为$n$的字符串，每个位置由$0\sim 9$组成，一个串中连续相同的数字分成一个长$x$的段，问所有字符串中长为$1\sim n$的段的数目分别是多少。</p><p>分三种情况DP：</p><ul><li>长为$n$的段只有10种；</li><li>从左/右开始的，自己有$1$种选法，相邻的位置有$9$种选法，剩下位置任选，$10*9*10^{n-len-1}$；</li><li>从中间放的，与上边类似，$10*9*9*10^{n-len-2}$。</li></ul><p>也可以找规律，公式是：</p><script type="math/tex; mode=display">\begin{cases}ans_n = 10, &\text{} \\ans_{n-1} = 180, &\text{} \\ans_{i} = 20*ans_{i+1}-100*ans_{i+2}, &\text{(i≤n-2)}\end{cases}</script><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"../0out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a[n] = <span class="number">10</span>;</span><br><span class="line">    a[n - <span class="number">1</span>] = <span class="number">180</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        a[n - <span class="number">2</span>] = <span class="number">2610</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">3</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        a[i] = (<span class="number">20</span> * a[i + <span class="number">1</span>] - <span class="number">100</span> * a[i + <span class="number">2</span>] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237F-AND-Segments"><a href="#1237F-AND-Segments" class="headerlink" title="1237F AND Segments"></a>1237F AND Segments</h2><p>有一个长为$n$的数列，$m$个形如$\{l,r,x\}$的限制，要$a[l] \&amp; a[l+1] \&amp; \dots \&amp; a[r] = x$，问有多少种不同的数列满足条件。</p><p>每一位分开考虑，对于某个$x_i$式这一位为$1$的限制，那么$a[l],a[l+1],…,a[r]$的这一位必须都为$1$。反之，$a[l],a[l+1],…,a[r]$的这一为至少有1个为$0$，可以预处理出某些位置必须放$1$或$1,0$都可以。<br>设$dp[i][j]$表示处理到第$i$位时上一次放$0$的是第$j$个数：</p><ul><li>如果放$1$，那么$dp[i][j] = dp[i-1][j]$；</li><li>如果放$0$，那么$dp[i][i] = \sum_{j=1}^{i-1} {dp[i-1][j]}$。<br>对于某段必须为0，也就是将$dp[r][0]$到$dp[r][l+1]$置$0$。很明显可以滚动数组，放$0$操作可以用前缀和转移，而清$0$后前面就不用考虑了，也就是每个$j$只会被删$1$次，维护一个指针就好，$O(n)$。</li></ul><figure class="highlight excel"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">5</span>e5 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">n</span>, m;</span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; l, r, x;</span><br><span class="line"></span><br><span class="line">ll calc(<span class="built_in">int</span> p) &#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; has(<span class="built_in">n</span> + <span class="number">2</span>), las(<span class="built_in">n</span> + <span class="number">2</span>);</span><br><span class="line">    vector&lt;ll&gt; dp(<span class="built_in">n</span> + <span class="number">2</span>);</span><br><span class="line">    p = <span class="number">1</span> &lt;&lt; p;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">if</span> (x[i] &amp; p) &#123;</span><br><span class="line">            ++has[l[i]];</span><br><span class="line">            --has[r[i] + <span class="number">1</span>];</span><br><span class="line">        &#125; else</span><br><span class="line">            las[r[i]] = <span class="built_in">max</span>(las[r[i]], l[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        has[i] += has[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> last = <span class="number">0</span>;</span><br><span class="line">    ll <span class="built_in">sum</span> = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">if</span> (!has[i]) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">sum</span>;</span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> * <span class="number">2</span> % <span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        while (last &lt; las[i]) &#123;</span><br><span class="line">            tmp = (tmp + dp[last++]) % <span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sum</span> = (<span class="built_in">sum</span> - tmp + <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    ios_ba<span class="symbol">se:</span><span class="symbol">:sy</span>nc_with_stdio(<span class="built_in">false</span>);</span><br><span class="line">    cin.tie(nullptr);</span><br><span class="line">#ifdef MYDEBUG</span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, stdin);</span><br><span class="line">//    freopen(<span class="string">"../0out.txt"</span>, <span class="string">"w"</span>, stdout);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> k;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span> &gt;&gt; k &gt;&gt; m;</span><br><span class="line">    l.resize(m);</span><br><span class="line">    r = x = l;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cin &gt;&gt; l[i] &gt;&gt; r[i] &gt;&gt; x[i];</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        ans = ans * calc(i) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237G-Letters-and-Question-Marks"><a href="#1237G-Letters-and-Question-Marks" class="headerlink" title="1237G Letters and Question Marks"></a>1237G Letters and Question Marks</h2><p>有$k$个模式串$t_1,t_2,…,t_k$，每个串带有一个权值，和一个文本串$S$，均有$a\sim n$组成，定义$S$的值是$t_i$在$S$出现的次数$\times$自己的权值。$S$中至多出现$14$个问号，用$a\sim n$内不同的字母填入后，$S$最大的权值是多少。</p><p>AC自动机+DP，设$dp[i][j][k]$表示处理到第$i$个字符，在自动机节点$j$，已用字符集的状态是$k$，在枚举到问号的时候枚举转移字符，一路加上权值就可以得到答案，但这样复杂度是$O(\lvert S \rvert*2^{14}*\sum {t})$。<br>很明显，对于被$?$分割出来的字串，只要知道开头在自动机的节点，就可以确定末尾转移到的节点，那么预处理自动机每个节点开始，$S$中第$i$个字串转移的结果，就可以$O(1)$转移。重设$dp[i][j][k]$，其中$i$表示处理到第$i$个问号，可以发现$i=k$中使用过的字符数量，只需要设二维，$O(|S|*\sum {t} + 14*2^{14}*\sum {t})$</p><figure class="highlight arduino"><figcaption><span>G.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = (<span class="number">1</span> &lt;&lt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="keyword">String</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> csize = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ahcm</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nd node[u]</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> ch[csize];</span><br><span class="line">            <span class="keyword">int</span> fail, val;</span><br><span class="line">        &#125; node[N];</span><br><span class="line">        <span class="keyword">int</span> numv;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q, q;</span><br><span class="line"></span><br><span class="line">        ahcm() &#123;</span><br><span class="line">            numv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!nd.ch[c - <span class="string">'a'</span>])</span><br><span class="line">                    nd.ch[c - <span class="string">'a'</span>] = ++numv;</span><br><span class="line">                u = nd.ch[c - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            nd.val += v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : node[<span class="number">0</span>].ch) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i)</span><br><span class="line">                    Q.emplace(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                Q.pop();</span><br><span class="line"></span><br><span class="line">                q.emplace(u);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; csize; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nd.ch[i]) &#123;</span><br><span class="line">                        node[nd.ch[i]].fail = node[nd.fail].ch[i];</span><br><span class="line">                        node[nd.ch[i]].val += node[node[nd.ch[i]].fail].val;</span><br><span class="line">                        Q.emplace(nd.ch[i]);</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        nd.ch[i] = node[nd.fail].ch[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pil <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">            ll v = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) &#123;</span><br><span class="line">                u = nd.ch[c - <span class="string">'a'</span>];</span><br><span class="line">                v += nd.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;u, v&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">ahcm am;</span><br><span class="line">pil go[<span class="number">1005</span>][<span class="number">18</span>];</span><br><span class="line">ll dp[<span class="number">1005</span>][sz];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, v;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; v;</span><br><span class="line">        am.insert(s, v);</span><br><span class="line">    &#125;</span><br><span class="line">    am.build();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> la = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; seg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">            seg.push_back(s.substr(la, i - la));</span><br><span class="line">            la = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seg.push_back(s.substr(la));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seg.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            go[j][i] = am.calc(j, seg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= am.numv; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j) &#123;</span><br><span class="line">            dp[i][j] = -INF64;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[go[<span class="number">0</span>][<span class="number">0</span>].first][<span class="number">0</span>] = go[<span class="number">0</span>][<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j][i] == -INF64) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">14</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i &gt;&gt; k) &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> to = am.node[j].ch[k];</span><br><span class="line">                <span class="keyword">int</span> ns = i | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">                <span class="keyword">int</span> count = __builtin_popcount(ns);</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= seg.<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> <span class="built_in">end</span> = go[to][count].first;</span><br><span class="line">                ll val = go[to][count].second + am.node[to].val;</span><br><span class="line">                dp[<span class="built_in">end</span>][ns] = <span class="built_in">max</span>(dp[<span class="built_in">end</span>][ns], dp[j][i] + val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = -INF64;</span><br><span class="line">    <span class="keyword">int</span> cnt = seg.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcount(i) == cnt)</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> edu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> edu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 629 Div.3 题解</title>
      <link href="/3109273033/"/>
      <url>/3109273033/</url>
      
        <content type="html"><![CDATA[<p>没什么意思的一场div3<br><a id="more"></a></p><h2 id="1238A-Divisibility-Problem"><a href="#1238A-Divisibility-Problem" class="headerlink" title="1238A Divisibility Problem"></a>1238A Divisibility Problem</h2><p>求给$a$加$1$几次可以成为$b$的倍数，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (b - a % b) % b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1238B-K-th-Beautiful-String"><a href="#1238B-K-th-Beautiful-String" class="headerlink" title="1238B K-th Beautiful String"></a>1238B K-th Beautiful String</h2><p>一个长度为$n$的字符串，只有$2$个$b$,剩下都是$a$，问字典序第$k$大的是哪个串。</p><p>因为只有$2$个$b$，所以通过两个$b$的位置知道是第几词典序，$O(k)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k, i1 = <span class="number">2</span>, i2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">while</span> (k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt;= (i1 - <span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">            k -= i1 - <span class="number">1</span>;</span><br><span class="line">            ++i1;</span><br><span class="line">        &#125;</span><br><span class="line">        i2 = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == i1 || i == i2)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'b'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1238C-Ternary-XOR"><a href="#1238C-Ternary-XOR" class="headerlink" title="1238C Ternary XOR"></a>1238C Ternary XOR</h2><p>有两个长为$n$仅由$0,1,2$组成的数，定义它们的异或是模不进位$3$加法，给出结果，求一组原始的数$a,b$，要求$max(a,b)$最小。</p><ul><li>如果$x_i = 0$，那么$a_i = b_i = 0$；</li><li>第一次$x_i = 1$，给$a,b$之一赋$1$，之后出现的话给另一个数赋$1$；</li><li>如果$x_i = 2$，且$a,b$一直相等，那么$a_i = b_i = 0$，如果已经不相等，给小的数赋$2$。<br>$O(n)$</li></ul><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s, a, b;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">        a.resize(n);</span><br><span class="line">        b.resize(n);</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'2'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!f)</span><br><span class="line">                    a[i] = b[i] = <span class="string">'1'</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    a[i] = <span class="string">'2'</span>, b[i] = <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'0'</span>)</span><br><span class="line">                a[i] = b[i] = <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">                b[i] = <span class="string">'1'</span>, a[i] = <span class="string">'0'</span>;</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                a[i] = <span class="string">'1'</span>, b[i] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1238D-Carousel"><a href="#1238D-Carousel" class="headerlink" title="1238D Carousel"></a>1238D Carousel</h2><p>一个长$n$的环，环上每个数都有种类，要求相邻且不同种类的数被涂的颜色不同，问最少颜色数的方案。</p><ul><li>如果只有一种，全部涂一种颜色；</li><li>如果每种颜色一个，环长为偶数，只需要两种颜色间隔涂；环长为奇数，必须有一个涂颜色$3$；</li><li>如果某种颜色有多个，环长为偶数，只需要间隔涂色；环长为奇数，从某个相邻为同种的数断开间隔涂色。<br>$O(n)$</li></ul><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[n] = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] != a[i]) &#123;</span><br><span class="line">                f = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">while</span> (n--) <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == a[i]) &#123;</span><br><span class="line">                f = i; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f &amp;&amp; (n &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) <span class="built_in">cout</span> &lt;&lt; i % <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cout</span> &lt;&lt; i % <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f; ++i) <span class="built_in">cout</span> &lt;&lt; i % <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = f; i &lt; n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> - i % <span class="number">2</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1238E-Tree-Queries"><a href="#1238E-Tree-Queries" class="headerlink" title="1238E Tree Queries"></a>1238E Tree Queries</h2><p>一个有$n$个点以$1$为根的树，每次询问问$k$个点，是否有一条从根到某个节点$u$的路径，使得每个点距离这条路$≤1$。</p><p>做法很多，我这里是找出深度最深的点，和其他询问点求出$LCA$，其他点和对应的$LCA$深度差$≤1$。<br>$O(q\log n)$</p><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> fa[N][<span class="number">22</span>], dpt[N], n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            fa[j][i] = fa[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dpt[a] &lt; dpt[b]) &#123;</span><br><span class="line">        swap(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (dpt[a] - (<span class="number">1</span> &lt;&lt; i) &gt;= dpt[b])</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (fa[a][i] != fa[b][i]) &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> pre = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>] = pre;</span><br><span class="line">    dpt[u] = dpt[pre] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pre) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs();</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        v.resize(k);</span><br><span class="line">        <span class="keyword">int</span> mi = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">            <span class="keyword">if</span> (dpt[v[i]] &gt; dpt[mi]) mi = v[i];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dpt[v[i]] - dpt[lca(mi, v[i])] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                f = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1238F-Make-k-Equal"><a href="#1238F-Make-k-Equal" class="headerlink" title="1238F Make k Equal"></a>1238F Make k Equal</h2><p>一个长为$n$的数列，每次可以选择一个最大值$-1$，或选一个最小值$+1$，问最少操作几次可以让$k$个数相等。</p><p>首先最后相等的值是数列里的值，那么枚举这些值，比较从小操作，从大操作，两边操作的答案取最小就好了$($竟然$2400$这分也飘的太远了$)$。$O(n\log n)$</p><figure class="highlight arduino"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">ll a[N];</span><br><span class="line">ll pre[N], suf[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        ++mp[a[i]];</span><br><span class="line">        <span class="keyword">if</span> (mp[a[i]] == k) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = INF64, lcnt = <span class="number">0</span>, rcnt = n;</span><br><span class="line">    sort(a, a + n + <span class="number">1</span>);</span><br><span class="line">    n = unique(a, a + n + <span class="number">1</span>) - a;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + mp[a[i - <span class="number">1</span>]] * a[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] + mp[a[i + <span class="number">1</span>]] * a[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ll t = k - mp[a[i]];</span><br><span class="line">        rcnt -= mp[a[i]];</span><br><span class="line">        ll t1 = lcnt * a[i] - pre[i];</span><br><span class="line">        ll t2 = suf[i] - rcnt * a[i];</span><br><span class="line">        <span class="keyword">if</span> (lcnt &gt;= t) ans = <span class="built_in">min</span>(ans, t1 - (lcnt - t));</span><br><span class="line">        <span class="keyword">if</span> (rcnt &gt;= t) ans = <span class="built_in">min</span>(ans, t2 - (rcnt - t));</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, t1 + t2 - (lcnt + rcnt - t));</span><br><span class="line">        lcnt += mp[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Codeforces </category>
          
          <category> div3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> div3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 Google Kickstart Round A 题解</title>
      <link href="/3017366074/"/>
      <url>/3017366074/</url>
      
        <content type="html"><![CDATA[<p>感觉这场比较简单？不过自己还是挺sd的，巨慢，rk1直接16分钟就ak了，而我整了2小时活。。。<br><a id="more"></a></p><h2 id="Allocation"><a href="#Allocation" class="headerlink" title="Allocation"></a>Allocation</h2><p>有$N$个房子，每个房子都有自己的价格$A_i$，现在手上有$B$，问最多能买房子的数量。</p><p>只要排序后贪心从小买到大就可以了，$O(n\log n)$，C++语法题。</p><figure class="highlight cpp"><figcaption><span>Allocation.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= t; ++T) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a + n, less&lt;&gt;());</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; b &gt;= a[i]; ++i) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            b -= a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, T, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plates"><a href="#Plates" class="headerlink" title="Plates"></a>Plates</h2><p>有$N$堆盘子，每堆有&amp;K&amp;个，每个盘子有权值。现在需要从中选择$P$个盘子，每堆盘子都必须像栈一样从顶开始取，问取$P$个可以获得的最大权值和是多少。</p><p>我写了个暴力DP，预处理$sum[i][j]$表示第$i$堆取前$j$个盘子的前缀和。枚举每一堆中取$j$个，那么位于第$i$堆，已经拿到了$l$个盘子的最优答案：$$dp[i][l] = \max_{j=0}^{max(l,k)}(dp[i-1][l-j] + sum[i][j])$$$O(Tnkp)$</p><figure class="highlight arduino"><figcaption><span>Plates.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>][<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= t; ++T) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k, p;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n * k + <span class="number">1</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">                a[i][j] += a[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = j; l &lt;= p; ++l) &#123;</span><br><span class="line">                    dp[i][l] = <span class="built_in">max</span>(dp[i][l], dp[i - <span class="number">1</span>][l - j] + a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, T, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Workout"><a href="#Workout" class="headerlink" title="Workout"></a>Workout</h2><p>一个$N$个数的严格递增数列，分成了$N-1$段，现在可以至多添加$K$个数，问最后形成的严格递增序列的差值中的最大值可以被最小化到多少。</p><p>正解二分，$O(Tn\log n)$。被自己一开始的假思路骗到了，罚时++。</p><figure class="highlight arduino"><figcaption><span>Workout.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = seg.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; seg[i] &gt; x; --i) &#123;</span><br><span class="line">        ret += (seg[i] - <span class="number">1</span>) / x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= t; ++T) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        seg.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> la;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; la;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, p; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">            seg.emplace_back(p - la);</span><br><span class="line">            la = p;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(seg.<span class="built_in">begin</span>(), seg.<span class="built_in">end</span>(), [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> x &lt; y;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>, ans, mid;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(mid) &lt;= k) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, T, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bundling"><a href="#Bundling" class="headerlink" title="Bundling"></a>Bundling</h2><p>有$N$个仅含大写字母的字符串，现在要分成$N/K$组，每组的权值是组内最长公共前缀$LCP$的长度，问可以达到最大的权值和是多少。</p><p>字典树，$cnt[x]$是$x$被经过的次数，也代表了从根到$x$的前缀出现的次数，每当前缀出现次数$≥k$，就可以分成$cnt[x]/k$组，那么这个前缀对答案贡献$cnt[x]/k$，$O(\sum_T \sum_i len(s_i))$。</p><figure class="highlight arduino"><figcaption><span>Bundling.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="keyword">String</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> csize = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">int</span> ans, k;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">trie</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> ch[N][csize];</span><br><span class="line">        <span class="keyword">int</span> cnt[N];</span><br><span class="line">        <span class="keyword">int</span> numv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (numv) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(ch[numv], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[numv]));</span><br><span class="line">                cnt[numv] = <span class="number">0</span>;</span><br><span class="line">                --numv;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">memset</span>(ch[numv], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[numv]));</span><br><span class="line">            cnt[numv] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ch[u][c - <span class="string">'A'</span>])</span><br><span class="line">                    ch[u][c - <span class="string">'A'</span>] = ++numv;</span><br><span class="line">                u = ch[u][c - <span class="string">'A'</span>];</span><br><span class="line">                ++cnt[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numv; ++i) &#123;</span><br><span class="line">                ret += cnt[i] / k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">trie tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//    freopen("../0out.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= t; ++T) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        tree.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            tree.insert(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, T, tree.count());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> Kickstart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kickstart </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
