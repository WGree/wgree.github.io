<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WGree的博客</title>
  
  <subtitle>ICPCer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.wgree.site/"/>
  <updated>2020-05-13T02:07:05.488Z</updated>
  <id>https://blog.wgree.site/</id>
  
  <author>
    <name>Wang.gree</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces Round 641 Div.1 题解</title>
    <link href="https://blog.wgree.site/3014571707/"/>
    <id>https://blog.wgree.site/3014571707/</id>
    <published>2020-05-13T01:20:55.000Z</published>
    <updated>2020-05-13T02:07:05.488Z</updated>
    
    <content type="html"><![CDATA[<p>div4太没劲了，感觉只要会编程都能做，不更它了</p><p>不过div1入场失败次数++<br><a id="more"></a><br><a href="https://www.luogu.com.cn/blog/Caro23333/codeforces-round-641-zhong-wen-ti-xie" target="_blank" rel="noopener">官方中文题解</a></p><h2 id="1349A-Orac-and-LCM"><a href="#1349A-Orac-and-LCM" class="headerlink" title="1349A Orac and LCM"></a>1349A Orac and LCM</h2><p>求$n$个数的两两的$lcm$的集合$gcd$。</p><p>$lcm$是两个数唯一分解后每个质因子较大次数 的乘积，$gcd$则是较小的次数 的乘积，因此就是对每个数质因子分解，每个质数取第二小的次数 的乘积就是答案。</p><figure class="highlight arduino"><figcaption><span>a.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t, tp; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        tp = t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= t; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tp % j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (tp % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    tp /= j;</span><br><span class="line">                    k *= j;</span><br><span class="line">                &#125;</span><br><span class="line">                p[j].emplace(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tp != <span class="number">1</span>)</span><br><span class="line">            p[tp].emplace(tp);</span><br><span class="line">    &#125;</span><br><span class="line">    ull ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">size</span>() == n - <span class="number">1</span>)</span><br><span class="line">            ans *= *p[i].<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span> (p[i].<span class="built_in">size</span>() == n)</span><br><span class="line">            ans *= *(++p[i].<span class="built_in">begin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1349B-Orac-and-Medians"><a href="#1349B-Orac-and-Medians" class="headerlink" title="1349B Orac and Medians"></a>1349B Orac and Medians</h2><p>题意很简单，不赘述了。<br>想了半天，结束后看了才发现就是个脑筋急转弯。<br>首先如果没有$k$，那么必定无解；其次可以发现和邻近的数是否 $\ge k$ 有关。<br>实际上，如果有解必定只要两种情况：</p><ul><li>相邻两个 $\ge k$，那么可以把所有数（除了$k$）先变成 $\ge k$，再通通变成$k$；</li><li>相邻三个数中有两个 $\ge k$， 那么可以按上述操作。</li></ul><p>其他情况都可以归入这两种，于是直接挨个判断。</p><figure class="highlight cpp"><figcaption><span>b.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">bool</span> fl = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k) i = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; k) i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">                fl = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fl) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fl = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> &amp;&amp; !fl; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] + a[i + <span class="number">1</span>] &gt; <span class="number">0</span>)</span><br><span class="line">                fl = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">2</span> &amp;&amp; a[i] + a[i + <span class="number">1</span>] + a[i + <span class="number">2</span>] &gt; <span class="number">0</span>)</span><br><span class="line">                fl = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fl) <span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1349C-Orac-and-Game-of-Life"><a href="#1349C-Orac-and-Game-of-Life" class="headerlink" title="1349C Orac and Game of Life"></a>1349C Orac and Game of Life</h2><p>这道题的话要抽象出一个状态，设对于方块$(i,j)$，它的周围有同色方块，那么它以后一直会是有同色相邻方块的，称它为“好方块”；否则为“坏方块”。<br>可以通过题意和上述的定义发现只能从坏$\to$好，并且一个方块变好后会$0\leftrightarrow 1$来回变换，它第一次变成好的回合就是距最近好块的曼哈顿距离，$bfs$解决。</p><figure class="highlight cpp"><figcaption><span>c.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> ll INF64 = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> to[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;ll&gt;&gt; <span class="title">d</span><span class="params">(n, <span class="built_in">vector</span>&lt;ll&gt;(m, INF64))</span></span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pii&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">bool</span> good = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t2 : to) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = i + t2[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = j + t2[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; m &amp;&amp; s[i][j] == s[x][y])</span><br><span class="line">                    good = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (good) &#123;</span><br><span class="line">                d[i][j] = <span class="number">0</span>;</span><br><span class="line">                que.emplace(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">        <span class="keyword">auto</span>[ux, uy] = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t2 : to) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = ux + t2[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = uy + t2[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; m &amp;&amp; d[x][y] == INF64) &#123;</span><br><span class="line">                d[x][y] = d[ux][uy] + <span class="number">1</span>;</span><br><span class="line">                que.emplace(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    ll p;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; p;</span><br><span class="line">        --x, --y;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= d[x][y]) t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> t = (p - d[x][y]) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ((s[x][y] - <span class="string">'0'</span>) ^ t) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一题分数也太顶了，有缘相见叭</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;div4太没劲了，感觉只要会编程都能做，不更它了&lt;/p&gt;
&lt;p&gt;不过div1入场失败次数++&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codefores" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codefores/"/>
    
      <category term="div1" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codefores/div1/"/>
    
    
      <category term="div1" scheme="https://blog.wgree.site/tags/div1/"/>
    
      <category term="Codefores" scheme="https://blog.wgree.site/tags/Codefores/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 610 Div.2 题解</title>
    <link href="https://blog.wgree.site/2477387429/"/>
    <id>https://blog.wgree.site/2477387429/</id>
    <published>2020-05-10T03:11:07.000Z</published>
    <updated>2020-05-13T02:01:10.132Z</updated>
    
    <content type="html"><![CDATA[<p>vp了一下，感觉还是很难在两小时内全部想到再写出来<br><a id="more"></a></p><h2 id="1282A-Temporarily-unavailable"><a href="#1282A-Temporarily-unavailable" class="headerlink" title="1282A Temporarily unavailable"></a>1282A Temporarily unavailable</h2><figure class="highlight arduino"><figcaption><span>a.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) swap(a, b);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (c - r &gt; a)</span><br><span class="line">            ans += <span class="built_in">min</span>(b, c - r) - a;</span><br><span class="line">        <span class="keyword">if</span> (c + r &lt; b)</span><br><span class="line">            ans += b - <span class="built_in">max</span>(a, c + r);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1282B-K-for-the-Price-of-One"><a href="#1282B-K-for-the-Price-of-One" class="headerlink" title="1282B K for the Price of One"></a>1282B K for the Price of One</h2><p>可以算简单$dp$吧</p><figure class="highlight properties"><figcaption><span>b.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">int</span> <span class="string">main() &#123;</span></span><br><span class="line">    <span class="attr">int</span> <span class="string">q;</span></span><br><span class="line">    <span class="attr">cin</span> <span class="string">&gt;&gt; q;</span></span><br><span class="line">    <span class="attr">while</span> <span class="string">(q--) &#123;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">n, p, k;</span></span><br><span class="line">        <span class="attr">cin</span> <span class="string">&gt;&gt; n &gt;&gt; p &gt;&gt; k;</span></span><br><span class="line">        <span class="meta">vector&lt;int&gt;</span> <span class="string">a(n + 1), dp(n + 1);</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line">            <span class="attr">cin</span> <span class="string">&gt;&gt; a[i];</span></span><br><span class="line">        <span class="meta">sort(a.begin()</span> <span class="string">+ 1, a.end());</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">ans = 0;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 1; i &lt;= n; ++i) &#123;</span></span><br><span class="line">            <span class="meta">dp[i]</span> = <span class="string">dp[i - 1] + a[i];</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(i &gt;= k) dp[i] = min(dp[i], dp[i - k] + a[i]);</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(dp[i] &lt;= p) ans = i;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">0;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1282C-Petya-and-Exam"><a href="#1282C-Petya-and-Exam" class="headerlink" title="1282C Petya and Exam"></a>1282C Petya and Exam</h2><p>按时间要求从小到大枚举可行，再计算剩余时间能多做几道题。</p><figure class="highlight arduino"><figcaption><span>c.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, ti, p[<span class="number">2</span>], cnt[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; ti &gt;&gt; p[<span class="number">0</span>] &gt;&gt; p[<span class="number">1</span>];</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;pii&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;[t, v] = a[i];</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">            ++cnt[v];</span><br><span class="line">            v = p[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;[t, v] = a[i];</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        &#125;</span><br><span class="line">        a.emplace_back(ti + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        a.emplace_back(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [](<span class="keyword">auto</span> a, <span class="keyword">auto</span> b) &#123; <span class="keyword">return</span> a.first &lt; b.first; &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        ll cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span>[t, v] = a[i];</span><br><span class="line">            cost += v;</span><br><span class="line">            t = a[i + <span class="number">1</span>].first - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (v == p[<span class="number">0</span>]) --cnt[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (v == p[<span class="number">1</span>]) --cnt[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (cost &gt; t) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> tt = t - cost;</span><br><span class="line">            <span class="keyword">int</span> easy = <span class="built_in">min</span>(tt / p[<span class="number">0</span>], cnt[<span class="number">0</span>]);</span><br><span class="line">            tt -= easy * p[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> hard = <span class="built_in">min</span>(tt / p[<span class="number">1</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, easy + hard + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1282D-Enchanted-Artifact"><a href="#1282D-Enchanted-Artifact" class="headerlink" title="1282D Enchanted Artifact"></a>1282D Enchanted Artifact</h2><p>比较脑筋急转弯吧<br>先问一个$a$，设回答是$ans_1$，如果 $ans_1$ 是 $300$ 那一定全是$b$；<br>如果不是的话，询问 $ans_1+1$ 个$a$，设回答是$ans_2$，如果 $ans_2 &gt; ans_1$ 的话，那么一定是 $ans_1$ 个$b$；否则是$ab$混合的，长度为$n=ans_1$。<br>对于每一位，由于我们询问了全$a$的串，我们将当前位字母取 $b$ 询问，如果不匹配的数目增加了，那么这个更改就反了；反之则正确，依次询问 $n$ 位，一定能得到答案。</p><figure class="highlight cpp"><figcaption><span>d.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1, t2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t1;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t1 == <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(<span class="number">300</span>, <span class="string">'b'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(t1 + <span class="number">1</span>, <span class="string">'a'</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t2;</span><br><span class="line">    <span class="keyword">if</span> (t2 == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t2 &gt; t1) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(t1, <span class="string">'b'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = t1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s[i] = <span class="string">'b'</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t1;</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1 &lt; t2) t2 = t1;</span><br><span class="line">        <span class="keyword">else</span> s[i] = <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1282E-The-Cake-Is-a-Lie"><a href="#1282E-The-Cake-Is-a-Lie" class="headerlink" title="1282E The Cake Is a Lie"></a>1282E The Cake Is a Lie</h2><p>将所以三角形纳入一个图中（也就是蛋糕被拼起来一样），那么被切产生的边一定是出现了偶数次，原来边界的边一定只出现了 $1$ 次，那么将所有出现一次的边连起来，就可以得到原来的多边形的环。<br>现在将所有的三角形和其中点关联起来，将一个点出现在几个三角形的个数作为度数，可以想到每次被切掉的点一定是某个度数为 $1$ 的点，那么做一次拓扑排序即可。</p><figure class="highlight arduino"><figcaption><span>e.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tri</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">&#125; cc[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;pii, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            st[i].<span class="built_in">clear</span>();</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;[a] = cc[i];</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">            sort(a, a + <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">                st[a[j]].emplace(i);</span><br><span class="line">            ++mp[&#123;a[<span class="number">0</span>], a[<span class="number">1</span>]&#125;];</span><br><span class="line">            ++mp[&#123;a[<span class="number">0</span>], a[<span class="number">2</span>]&#125;];</span><br><span class="line">            ++mp[&#123;a[<span class="number">1</span>], a[<span class="number">2</span>]&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;vi&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : mp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.second &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> pii &amp;t = i.first;</span><br><span class="line">                g[t.first].emplace_back(t.second);</span><br><span class="line">                g[t.second].emplace_back(t.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> s, <span class="keyword">int</span> fa) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            vis[s] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u : g[s]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[u]) &#123;</span><br><span class="line">                    dfs(u, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[i].<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                Q.emplace(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">if</span> (st[u].empty())<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> tt = *st[u].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; tt &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">auto</span>&amp;[a]= cc[tt];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">                st[i].erase(tt);</span><br><span class="line">                <span class="keyword">if</span> (st[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                    Q.emplace(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vp了一下，感觉还是很难在两小时内全部想到再写出来&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 639 Div.1&amp;2 题解</title>
    <link href="https://blog.wgree.site/2829846434/"/>
    <id>https://blog.wgree.site/2829846434/</id>
    <published>2020-05-09T03:24:11.000Z</published>
    <updated>2020-05-13T02:03:53.353Z</updated>
    
    <content type="html"><![CDATA[<p>做着做着cf就坐下了<br><a id="more"></a></p><h2 id="1344A-Hilbert’s-Hotel"><a href="#1344A-Hilbert’s-Hotel" class="headerlink" title="1344A Hilbert’s Hotel"></a>1344A Hilbert’s Hotel</h2><p>题目里 $i+a_{i\bmod n}$ 给我整懵了，难道不应该是 $(i+a_i)\bmod n$🐎<br>所以按上述第二式处理结果，并转至$[0,n)$的范围内，查重即可，$O(n\log n)，也可O(n)$。</p><figure class="highlight arduino"><figcaption><span>a.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            a[i] += i;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) a[i] = (a[i] % n) + n;</span><br><span class="line">            a[i] %= n;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        a.resize(unique(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() != n) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1344B-Monopole-Magnets"><a href="#1344B-Monopole-Magnets" class="headerlink" title="1344B Monopole Magnets"></a>1344B Monopole Magnets</h2><p>有一个网格，可以放任意数目的$N,S$，每次可以选择一对同一行/列的$N,S$，使$N$向$S$移动$1$。<br>要求使用最少的$N$，满足：</p><ul><li>每一行/列至少有一个$S$；</li><li>每一个黑色格子都可以被访问到；</li><li>每一个白色格子都不能被访问到。</li></ul><p>首先可以想到如果合法的情况下，给每个黑格子都放入$S$，不会影响答案；那么就可以想到如果合法，最小的答案就是连通块的个数，$bfs$处理。<br>现在思考哪些情况不合法：</p><ul><li>如果对于某一列/行，在一个白块的两侧有黑色格子，那么这一列/行都不能含有$S$，违背条件$1$；</li><li>如果某一行/列只有白色，那么至少有一列/行也是全白的，这样$S$可以放在交点处，才能满足条件$1$。</li></ul><p>$O(nm)$</p><figure class="highlight prolog"><figcaption><span>b.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef pair&lt;int, int&gt; pii;</span><br><span class="line">const int <span class="symbol">N</span> = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">int n, m, cnt;</span><br><span class="line">int to[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">char g[<span class="symbol">N</span>][<span class="symbol">N</span>];</span><br><span class="line">bool l[<span class="symbol">N</span>][<span class="symbol">N</span>], r[<span class="symbol">N</span>][<span class="symbol">N</span>], u[<span class="symbol">N</span>][<span class="symbol">N</span>], d[<span class="symbol">N</span>][<span class="symbol">N</span>];</span><br><span class="line"></span><br><span class="line">void bfs(int x, int y) &#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    queue&lt;pii&gt; q;</span><br><span class="line">    q.emplace(x, y);</span><br><span class="line">    g[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        pii t = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (auto i : to) &#123;</span><br><span class="line">            pii tt = t;</span><br><span class="line">            tt.first += i[<span class="number">0</span>];</span><br><span class="line">            tt.second += i[<span class="number">1</span>];</span><br><span class="line">            if (tt.first &lt; <span class="number">1</span> || tt.first &gt; n || tt.second &lt; <span class="number">1</span> || tt.second &gt; m)</span><br><span class="line">                continue;</span><br><span class="line">            if (g[tt.first][tt.second] != <span class="string">'#'</span>)</span><br><span class="line">                continue;</span><br><span class="line">            g[tt.first][tt.second] = <span class="string">'.'</span>;</span><br><span class="line">            q.emplace(tt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool check() &#123;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            l[i][j] = l[i][j - <span class="number">1</span>];</span><br><span class="line">            if (g[i][j - <span class="number">1</span>] == <span class="string">'#'</span>)</span><br><span class="line">                l[i][j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = m; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            r[i][j] = r[i][j + <span class="number">1</span>];</span><br><span class="line">            if (g[i][j + <span class="number">1</span>] == <span class="string">'#'</span>)</span><br><span class="line">                r[i][j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            u[i][j] = u[i - <span class="number">1</span>][j];</span><br><span class="line">            if (g[i - <span class="number">1</span>][j] == <span class="string">'#'</span>)</span><br><span class="line">                u[i][j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            d[i][j] = d[i + <span class="number">1</span>][j];</span><br><span class="line">            if (g[i + <span class="number">1</span>][j] == <span class="string">'#'</span>)</span><br><span class="line">                d[i][j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool row = false, col = false;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        if (!r[i][<span class="number">0</span>])</span><br><span class="line">            row = true;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        if (!d[<span class="number">0</span>][i])</span><br><span class="line">            col = true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (row ^ col) &#123;</span><br><span class="line">//        cout &lt;&lt; <span class="string">"empty difference WRONG"</span> &lt;&lt; endl;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            if (g[i][j] == <span class="string">'.'</span> &amp;&amp; ((u[i][j] &amp;&amp; d[i][j]) || (l[i][j] &amp;&amp; r[i][j]))) &#123;</span><br><span class="line">//                cout &lt;&lt; <span class="string">"black wight blacck WRONG"</span> &lt;&lt; endl;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; (g[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    if (check()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            if (g[i][j] == <span class="string">'#'</span>)</span><br><span class="line">                bfs(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1344C-Quantifier-Question"><a href="#1344C-Quantifier-Question" class="headerlink" title="1344C Quantifier Question"></a>1344C Quantifier Question</h2><p>$a[l] \&amp; a[l+1] \&amp; \dots \&amp; a[r] = x$<br>对于 $f(x_1,x_2…x_n)=(x_{i_1} &lt; x_{j_1}) \&amp; (x_{i_2} &lt; x_{j_2}) \&amp; \dots \&amp; (x_{i_m} &lt; x_{j_m})$，每个$x$变量的量词出现顺序是 $Q_1Q_2…Q_n$，要求全称量词 $\forall$ 最多，使得 $Q_1x_1Q_2x_2\dots Q_nx_nf(x_1,x_2\dots x_n)$ 为真。</p><p>首先可以想到与有向图有关，如果图中有环，那么必然不成立，大小关系无法成环，通过拓扑排序判定。<br>然后在纸上画画又可以发现，只有从小向大放的时候，才有可能出现 $\forall$，因此选择贪心，而且对于图中的一条路，最多只能有一个点是 $\forall$ 的；<br>如果一个点已经被前面的点已经限制为 $\exists$，那么枚举到它时，会将通过自己的路上的其他点全限制为 $\exists$。<br>$O(n)$</p><figure class="highlight cs"><figcaption><span>c.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line">typedef vector&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">typo</span>(<span class="params"><span class="keyword">const</span> vector&lt;vi&gt; &amp;g, vi &amp;ind</span>)</span> &#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ind[i])</span><br><span class="line">            q.emplace(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">            --ind[v];</span><br><span class="line">            <span class="keyword">if</span> (!ind[v])</span><br><span class="line">                q.emplace(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt == n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span>(<span class="params"><span class="keyword">const</span> vector&lt;vi&gt; &amp;g, vi &amp;vis, <span class="keyword">int</span> s</span>)</span> &#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.emplace(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u])</span><br><span class="line">            q.emplace(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;vi&gt; <span class="title">g</span>(<span class="params">n + <span class="number">1</span></span>), <span class="title">rg</span>(<span class="params">n + <span class="number">1</span></span>)</span>;</span><br><span class="line">    <span class="function">vi <span class="title">ind</span>(<span class="params">n + <span class="number">1</span></span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, u, v; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        rg[v].emplace_back(u);</span><br><span class="line">        ++ind[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!typo(g, ind)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">string</span> ans;</span><br><span class="line">    <span class="function">vi <span class="title">vis</span>(<span class="params">n + <span class="number">1</span></span>), <span class="title">rvis</span>(<span class="params">n + <span class="number">1</span></span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] || rvis[i])</span><br><span class="line">            ans += <span class="string">"E"</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            ans += <span class="string">"A"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(g, vis, i);</span><br><span class="line">        bfs(rg, rvis, i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做着做着cf就坐下了&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
      <category term="div1" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/div1/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
      <category term="div1" scheme="https://blog.wgree.site/tags/div1/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 638 Div.2 题解</title>
    <link href="https://blog.wgree.site/1835808553/"/>
    <id>https://blog.wgree.site/1835808553/</id>
    <published>2020-05-02T06:38:25.000Z</published>
    <updated>2020-05-13T02:04:44.173Z</updated>
    
    <content type="html"><![CDATA[<p>迟到30min没打，不过好像问题不是特别大<br><a id="more"></a></p><h2 id="1348A-Phoenix-and-Balance"><a href="#1348A-Phoenix-and-Balance" class="headerlink" title="1348A Phoenix and Balance"></a>1348A Phoenix and Balance</h2><p>二进制下非常明显</p><figure class="highlight cpp"><figcaption><span>a.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="number">1</span> &lt;&lt; n / <span class="number">2</span> + <span class="number">1</span>) - <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1348B-Phoenix-and-Beauty"><a href="#1348B-Phoenix-and-Beauty" class="headerlink" title="1348B Phoenix and Beauty"></a>1348B Phoenix and Beauty</h2><figure class="highlight arduino"><figcaption><span>b.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        a.resize(unique(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) - a.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (a.<span class="built_in">size</span>() &lt; k)</span><br><span class="line">            a.emplace_back(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k * n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;j : a)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1348C-Phoenix-and-Distribution"><a href="#1348C-Phoenix-and-Distribution" class="headerlink" title="1348C Phoenix and Distribution"></a>1348C Phoenix and Distribution</h2><p>就是个分类讨论，先排序，然后</p><ul><li>对于前$k$个字符，如果$s_k != s_0$，那么答案就是$s_k$；</li><li>如果$s_k==s_0$<ul><li>对于后$n-k$个字符，如果$s_{k+1}==s_n$，也就是全部相同，均分是最优的；</li><li>如果不全相同，那么应该全分给$a_k$，即$a_k=s_{k+1:n}$。</li></ul></li></ul><figure class="highlight arduino"><figcaption><span>c.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">        sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">if</span> (s[k - <span class="number">1</span>] != s[<span class="number">0</span>]) &#123;</span><br><span class="line">            ans = s[k - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[k] == s[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                n = <span class="built_in">ceil</span>(<span class="keyword">double</span>(n) / k);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; s[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">while</span> (--n) ans.push_back(s[k]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = s.substr(k - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1348D-Phoenix-and-Science"><a href="#1348D-Phoenix-and-Science" class="headerlink" title="1348D Phoenix and Science"></a>1348D Phoenix and Science</h2><p>题意转化一下，就是找到一个最短非递减序列，其中$a_{i+1}&lt;=2a_i$，使$\sum a=k$。<br>转化好了就随便做了，我这里代码可能和上面说的实现的有点不一样，不过关键是这个思路吧。</p><figure class="highlight arduino"><figcaption><span>d.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> aans = <span class="number">31</span> - __builtin_clz(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        --n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, la = <span class="number">1</span>; i &lt; aans; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> tp = <span class="built_in">min</span>(<span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>), n / (aans - i));</span><br><span class="line">            ans.emplace_back(tp - la);</span><br><span class="line">            n -= tp;</span><br><span class="line">            la = tp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; aans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : ans)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1348E-Phoenix-and-Berries"><a href="#1348E-Phoenix-and-Berries" class="headerlink" title="1348E Phoenix and Berries"></a>1348E Phoenix and Berries</h2><p>首先如果只能放同色的话，答案是$\frac {\sum a}k + \frac {\sum b}k$，剩下的数目一定在 $[0,2k-2]$ 内，那么如果答案再增加，一定是凑出某个树内的一个装两色的框。<br>现在设$dp[i][j]$表示前$i$个树，剩余$j$个红色没用，其他的全部用了的状态。如果 $j \ge k$ 的话，那么可以多加一个只装红色的筐，因此只考虑模$k$内的状态。<br>那么对于一棵树来说，他能剩的红色数量必定在 $min(k-1,a_i)$ 内，不过由于我们需要把其余红色全用掉，因此必须满足 $(a_i-l)\mod k+b_i \ge k$，$l$表示剩下没用红色的数量，然后就是像背包的$dp$，最终的答案由于剩余的红色全入框，等同蓝色，答案即<script type="math/tex">max(\frac {sum-j}k)</script>。<br>这里由于状态直邮可不可行，可以用$bitset$让复杂度$/32$，$cf$上直接从$O(nk^2)$降到$O(nk)$了？？然后由于每次只从上一棵树的状态转移，还可以使用滚动数组优化空间。</p><figure class="highlight properties"><figcaption><span>e.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">namespace std;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">ll = long long;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">int</span> <span class="string">main() &#123;</span></span><br><span class="line">    <span class="attr">int</span> <span class="string">n, k;</span></span><br><span class="line">    <span class="attr">cin</span> <span class="string">&gt;&gt; n &gt;&gt; k;</span></span><br><span class="line">    <span class="attr">ll</span> <span class="string">suma = 0, sumb = 0;</span></span><br><span class="line">    <span class="meta">vector&lt;int&gt;</span> <span class="string">a(n), b(n);</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">        <span class="attr">cin</span> <span class="string">&gt;&gt; a[i] &gt;&gt; b[i];</span></span><br><span class="line">        <span class="attr">suma</span> <span class="string">+= a[i];</span></span><br><span class="line">        <span class="attr">sumb</span> <span class="string">+= b[i];</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">ll</span> <span class="string">sum = suma + sumb;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">bitset&lt;1024&gt;</span> <span class="string">dp(1), dp2;</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">        <span class="attr">dp2</span> = <span class="string">(dp &lt;&lt; a[i] % k) | (dp &gt;&gt; (k - a[i] % k));</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int j = 0, ed = min(k - 1, a[i]); j &lt;= ed; ++j)</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">((a[i] - j) % k + b[i] &gt;= k)</span></span><br><span class="line">                <span class="attr">dp2</span> <span class="string">|= (dp &lt;&lt; j) | (dp &gt;&gt; (k - j));</span></span><br><span class="line">        <span class="attr">dp</span> = <span class="string">dp2;</span></span><br><span class="line">        <span class="attr">dp2.reset();</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">ll</span> <span class="string">ans = 0;</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">(int i = 0; i &lt; k; ++i) &#123;</span></span><br><span class="line">        <span class="attr">if</span> <span class="string">(dp[i]) &#123;</span></span><br><span class="line">            <span class="attr">ans</span> = <span class="string">(sum - i) / k;</span></span><br><span class="line">            <span class="attr">break;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">cout</span> <span class="string">&lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1348F-Phoenix-and-Memory"><a href="#1348F-Phoenix-and-Memory" class="headerlink" title="1348F Phoenix and Memory"></a>1348F Phoenix and Memory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟到30min没打，不过好像问题不是特别大&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 86 题解</title>
    <link href="https://blog.wgree.site/3498232168/"/>
    <id>https://blog.wgree.site/3498232168/</id>
    <published>2020-04-27T06:44:59.000Z</published>
    <updated>2020-04-30T03:00:50.903Z</updated>
    
    <content type="html"><![CDATA[<p>可终于连胜了<br><a id="more"></a></p><h2 id="1342A-Road-To-Zero"><a href="#1342A-Road-To-Zero" class="headerlink" title="1342A Road To Zero"></a>1342A Road To Zero</h2><figure class="highlight arduino"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        ll a, b, x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (a * <span class="number">2</span> &gt;= b) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="built_in">min</span>(y, x);</span><br><span class="line">            x -= t, y -= t;</span><br><span class="line">            ans = t * b + (x + y) * a;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            ans = (x + y) * a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1342B-Binary-Period"><a href="#1342B-Binary-Period" class="headerlink" title="1342B Binary Period"></a>1342B Binary Period</h2><p>如果只有$0$或$1$出现，周期是$1$输出原串。<br>否则周期至少为$2$，按$01$或$10$循环输出即可。</p><figure class="highlight arduino"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">string</span> ans = s;</span><br><span class="line">        ans.resize(unique(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>())-s.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == s[<span class="number">1</span>]) &#123;</span><br><span class="line">            s[<span class="number">1</span>] = (s[<span class="number">0</span>] ^ <span class="string">'1'</span>) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s[<span class="number">0</span>] &lt;&lt; s[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1342C-Yet-Another-Counting-Problem"><a href="#1342C-Yet-Another-Counting-Problem" class="headerlink" title="1342C Yet Another Counting Problem"></a>1342C Yet Another Counting Problem</h2><p>记$g$为$gcd(a,b)$，$a&lt; b$。这里称$[1,g]$为一个循环，每个循环内不满足要求的是前$b-1$个和第$g$个，也就是说有$g-b$个满足要求，计算一下有几个循环以及剩余几个就行了。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll ret = x / g * (g - b);</span><br><span class="line">    ret += <span class="built_in">max</span>(<span class="number">0l</span>l, x % g - b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) swap(a, b);</span><br><span class="line">        g = a * b / __gcd(a, b);</span><br><span class="line">        <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">            ll l, r;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; calc(r) - calc(l - <span class="number">1</span>) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1342D-Multiple-Testcases"><a href="#1342D-Multiple-Testcases" class="headerlink" title="1342D Multiple Testcases"></a>1342D Multiple Testcases</h2><p>思考一下就可以想到这题可以贪心，从大的向小的处理，每个队伍的元素个数肯定是越多越好。<br>那么满足$c_{x+1}$也就满足$c_x$，因此每次选当前队中元素个数最少的队，检查能否把当前枚举到的数插入它。如果不行，意味着必须要新申请一个队。（就贪就完事了）</p><figure class="highlight reasonml"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span><br><span class="line">#define endl <span class="character">'\n'</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; m(n), c(k + <span class="number">1</span>);</span><br><span class="line">    for (<span class="built_in">int</span> &amp;i: m) cin &gt;&gt; i;</span><br><span class="line">    sort(m.<span class="keyword">begin</span><span class="literal">()</span>, m.<span class="keyword">end</span><span class="literal">()</span>);</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        cin &gt;&gt; c<span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="built_in">list</span>&lt;<span class="built_in">int</span>&gt;&gt; ans;</span><br><span class="line">    priority_queue&lt;pii, deque&lt;pii&gt;, greater&lt;&gt;&gt; Q;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Q</span>.</span></span>emplace(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ans.resize(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!m.empty<span class="literal">()</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> a = m.back<span class="literal">()</span>;</span><br><span class="line">        pii u = <span class="module-access"><span class="module"><span class="identifier">Q</span>.</span></span>top<span class="literal">()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Q</span>.</span></span>pop<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">if</span> (u.first<span class="operator"> == </span>c<span class="literal">[<span class="identifier">a</span>]</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Q</span>.</span></span>emplace(u);</span><br><span class="line">            u = &#123;<span class="number">1</span>, ans.size<span class="literal">()</span>&#125;;</span><br><span class="line">            ans.emplace<span class="constructor">_back()</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            ++u.first;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Q</span>.</span></span>emplace(u);</span><br><span class="line">        ans<span class="literal">[<span class="identifier">u</span>.<span class="identifier">second</span>]</span>.emplace<span class="constructor">_back(<span class="params">a</span>)</span>;</span><br><span class="line">        m.pop<span class="constructor">_back()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans.size<span class="literal">()</span> &lt;&lt; endl;</span><br><span class="line">    for (auto &amp;i : ans) &#123;</span><br><span class="line">        cout &lt;&lt; i.size<span class="literal">()</span> &lt;&lt; <span class="character">' '</span>;</span><br><span class="line">        for (<span class="built_in">int</span> &amp;j : i)</span><br><span class="line">            cout &lt;&lt; j &lt;&lt; <span class="character">' '</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1342E-Placing-Rooks"><a href="#1342E-Placing-Rooks" class="headerlink" title="1342E Placing Rooks"></a>1342E Placing Rooks</h2><p>这个题学到了第二类斯特林数这个点。以$S(n,m)$表示$n$个球放入$m$个不同盒子，每个盒子不为空的方案数。</p><p>本题的一系列要求转化一下就是每行/每列都需要棋子，两种情况因此答案$\times 2$，但当$k=0$时是重复的。由于只有面对面的棋子冲突，因此$k&gt;=n$时，答案为$0$。<br>将冲突的棋子连边，那么会产生$n-k$个联通分量，也就是$S(n,n-k)$，假设当前要求每行都有一个棋子，那么只有$n-k$列有棋子，从$n$列里选$n-k$列来排列一下，也就是$A_n^{n-k}$。<br>因此最终答案为$S_n^{n-k}A_n^{n-k}$，再根据情况乘系数。$O(n\log n)$</p><figure class="highlight excel"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">mod</span> = <span class="number">998244353</span>;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">5</span>e5 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll qpow(ll a, ll b) &#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    while (b) &#123;</span><br><span class="line">        <span class="built_in">if</span> (b &amp; <span class="number">1</span>) ret = ret * a % <span class="built_in">mod</span>;</span><br><span class="line">        a = a * a % <span class="built_in">mod</span>;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fac[<span class="built_in">N</span>], inv[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">N</span>; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % <span class="built_in">mod</span>;</span><br><span class="line">    inv[<span class="built_in">N</span> - <span class="number">1</span>] = qpow(fac[<span class="built_in">N</span> - <span class="number">1</span>], <span class="built_in">mod</span> - <span class="number">2</span>);</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="built_in">N</span> - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    auto C = [&amp;](<span class="built_in">int</span> <span class="built_in">n</span>, <span class="built_in">int</span> m) &#123;</span><br><span class="line">        <span class="built_in">if</span> (m &lt; <span class="number">0</span> | m &gt; <span class="built_in">n</span>) return <span class="number">0</span>ll;</span><br><span class="line">        return fac[<span class="built_in">n</span>] * inv[m] % <span class="built_in">mod</span> * inv[<span class="built_in">n</span> - m] % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    ll k;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">if</span> (k &gt;= <span class="built_in">n</span>)</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    else <span class="built_in">if</span> (k == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; fac[<span class="built_in">n</span>] &lt;&lt; endl;</span><br><span class="line">    else &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">n</span> - k; ++i) &#123;</span><br><span class="line">            ll <span class="built_in">t</span> = C(<span class="built_in">n</span> - k, i) * qpow(<span class="built_in">n</span> - k - i, <span class="built_in">n</span>);</span><br><span class="line">            <span class="built_in">if</span> (i &amp; <span class="number">1</span>) ans = (ans - <span class="built_in">t</span>) % <span class="built_in">mod</span>;</span><br><span class="line">            else ans = (ans + <span class="built_in">t</span>) % <span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">if</span> (ans &lt; <span class="built_in">mod</span>) ans += <span class="built_in">mod</span>;</span><br><span class="line">        ans = ans * inv[<span class="built_in">n</span> - k] % <span class="built_in">mod</span>;</span><br><span class="line">        ans = <span class="number">2</span> * ans * C(<span class="built_in">n</span>, <span class="built_in">n</span> - k) % <span class="built_in">mod</span> * fac[<span class="built_in">n</span> - k] % <span class="built_in">mod</span>;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可终于连胜了&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/edu/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 637 Div.2 题解</title>
    <link href="https://blog.wgree.site/1591932404/"/>
    <id>https://blog.wgree.site/1591932404/</id>
    <published>2020-04-24T15:20:46.000Z</published>
    <updated>2020-05-13T02:06:22.143Z</updated>
    
    <content type="html"><![CDATA[<p>照例x2<br><a id="more"></a></p><p>前两题没什么需要分析的</p><h2 id="1341A-Nastya-and-Rice"><a href="#1341A-Nastya-and-Rice" class="headerlink" title="1341A Nastya and Rice"></a>1341A Nastya and Rice</h2><figure class="highlight arduino"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cc[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, a, b, c, d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        <span class="built_in">fill</span>(cc, cc + c + d + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        ++cc[<span class="built_in">max</span>(<span class="number">0</span>, (a - b) * n)];</span><br><span class="line">        --cc[n * (a + b) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c + d; ++i) &#123;</span><br><span class="line">            cc[i] += cc[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= c - d &amp;&amp; cc[i]) &#123;</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1341B-Nastya-and-Door"><a href="#1341B-Nastya-and-Door" class="headerlink" title="1341B Nastya and Door"></a>1341B Nastya and Door</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cc[N], a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; cc[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cc[n + <span class="number">1</span>] = cc[<span class="number">0</span>] = INF32;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cc[i] &gt; cc[i - <span class="number">1</span>] &amp;&amp; cc[i] &gt; cc[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                a[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, tp = <span class="number">0</span>, id;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; n + <span class="number">1</span> - k; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i]) ++tp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span> - k; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans &lt;= tp) &#123;</span><br><span class="line">                id = i;</span><br><span class="line">                ans = tp;</span><br><span class="line">            &#125;</span><br><span class="line">            tp += a[i] - a[i + k - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1341C-Nastya-and-Strange-Generator"><a href="#1341C-Nastya-and-Strange-Generator" class="headerlink" title="1341C Nastya and Strange Generator"></a>1341C Nastya and Strange Generator</h2><p>（其实这题也没啥分析的）<br>对于$[1,x]$的一段，如果选择了一个位置$y$，那么必须将$[y,x]$填完再继续，因此将原串拆分成小段再判断就行，$O(n)$</p><figure class="highlight cs"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span>(<span class="params">n</span>), <span class="title">b</span>(<span class="params">n</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) cin &gt;&gt; i;</span><br><span class="line">        <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>, j; i &gt;= <span class="number">0</span>; i = j) &#123;</span><br><span class="line">            j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j + <span class="number">1</span>] &gt; a[j])</span><br><span class="line">                --j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= i; ++k)</span><br><span class="line">                b[tt++] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_sorted(b.begin(), b.end())) puts(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> puts(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1341D-Nastya-and-Scoreboard"><a href="#1341D-Nastya-and-Scoreboard" class="headerlink" title="1341D Nastya and Scoreboard"></a>1341D Nastya and Scoreboard</h2><p>从左到右给出一些七段数码管，为$1$的位常亮，问如果恰好再添加$k$个亮的段，最大字典序的串是什么。</p><p>先通过位运算预处理每位数字，变成 $0\sim 9$ 是否可行以及需要多用的段数，然后进行背包。<br>$dp[i][j]$表示从后向前第$i$个数字用了$j$段是否可行，另外用一个数组保存路径，对于每位数字枚举的时候从 $0\sim 1$ 枚举，就可以保证大的数字靠左，$O(10nk)$。</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N][N + <span class="number">100</span>];</span><br><span class="line">pii to[N][N + <span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mp[<span class="number">10</span>] = &#123;<span class="number">0x77</span>, <span class="number">0x24</span>, <span class="number">0x5d</span>, <span class="number">0x6d</span>, <span class="number">0x2e</span>, <span class="number">0x6b</span>, <span class="number">0x7b</span>, <span class="number">0x25</span>, <span class="number">0x7f</span>, <span class="number">0x6f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pii&gt;&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j)</span><br><span class="line">            t |= (s[j] - <span class="string">'0'</span>) &lt;&lt; j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((t &amp; mp[j]) == t) &#123;</span><br><span class="line">                <span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">aa</span><span class="params">(t ^ mp[j])</span></span>;</span><br><span class="line">                a[i].emplace_back(j, aa.count());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; n; ++ii) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = n - ii - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> tp:a[t]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dp[ii][j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                dp[ii + <span class="number">1</span>][j + tp.second] = <span class="number">1</span>;</span><br><span class="line">                to[ii + <span class="number">1</span>][j + tp.second] = &#123;j, tp.first&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dp[n][k]) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; to[n][k].second;</span><br><span class="line">        k = to[n][k].first;</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1341E-Nastya-and-Unexpected-Guest"><a href="#1341E-Nastya-and-Unexpected-Guest" class="headerlink" title="1341E Nastya and Unexpected Guest"></a>1341E Nastya and Unexpected Guest</h2><p><del>跟jls每天一个C++小技巧（见注释）</del><br>有$n$个路口，起始在$0$终点在$n$，有$m$个安全岛（就是马路中间等红灯的地方），每个红绿灯都是以$g,r,g,r…$时长进行红绿变化的，如果有绿灯，那么就必须移动，只有经过安全岛才能转向，问能否到达$n$，能到达的最短时间。</p><p>将状态抽象，一个灯的状态有$[0,g]$种，如果在不同轮到达同一状态只有最开始是最优的。那么将状态分成$m\times (g+1)$种，进行$bfs$，由于同一轮内要先遍历完，那么用双端队处理非常方便，$O(mg)$。</p><figure class="highlight arduino"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF64 = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> rec = tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, r, g;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : d) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    sort(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; g &gt;&gt; r;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dis</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (g + <span class="number">1</span>, <span class="number">-1</span>))</span></span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;rec&gt; q;</span><br><span class="line">    q.emplace_back(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">auto</span>[u, t, _dis] = q.front();  <span class="comment">//Structured Binding Declaration</span></span><br><span class="line">        q.pop_front();</span><br><span class="line">        <span class="keyword">if</span> (dis[u][t] != <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dis[u][t] = _dis;</span><br><span class="line">        <span class="keyword">if</span> (t == g)</span><br><span class="line">            q.emplace_back(u, <span class="number">0</span>, _dis + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="number">0</span> &amp;&amp; t + d[u] - d[u - <span class="number">1</span>] &lt;= g)</span><br><span class="line">            q.emplace_front(u - <span class="number">1</span>, t + d[u] - d[u - <span class="number">1</span>], _dis);</span><br><span class="line">        <span class="keyword">if</span> (u != m - <span class="number">1</span> &amp;&amp; t + d[u + <span class="number">1</span>] - d[u] &lt;= g)</span><br><span class="line">            q.emplace_front(u + <span class="number">1</span>, t + d[u + <span class="number">1</span>] - d[u], _dis);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = INF64;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= g; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[m - <span class="number">1</span>][i] != <span class="number">-1</span>) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, ll(g + r) * dis[m - <span class="number">1</span>][i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == INF64)</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1341F-Nastya-and-Time-Machine"><a href="#1341F-Nastya-and-Time-Machine" class="headerlink" title="1341F Nastya and Time Machine"></a>1341F Nastya and Time Machine</h2><p>有一棵以$1$为根的树，记位于节点$u$，当前时刻为$t$为$(u,t)$，现在每步可以向相连的结点移动，或不移动并回到$[0,t)$的任意时间点，要求不能出现两个相同的$(u,t)$，问遍历所有节点后再回到根的路径中最小的 $max (t_1,t_2…t_k)$ 是多少。</p><p>思考一下可以想到，对于一个节点$x$，他的度数为$deg_x$，由于一定会从 $x\to$邻居一次，加上从根到$x$，那么对于$x$，$t$至少需要$deg_x$，所以答案最小为 $max (deg_1,deg_2…deg_n)$。<br>接下来考虑如何构造，对于节点$x$，从第一次访问它到最后一次访问它的路径要满足： $(x,t_x),(son_1,t_x+1)…(son_1,t_x),(x,t_x+1),(son_2,t_x+2)…(x,t_x+deg_x)$，此时已经得到的大致的构造方案，但可能出现访问到叶子时 $t&gt;max (deg_1,deg_2….)$，因此进入儿子后需要检查一下当前的 $t$，确保不超过答案。<br>$O(n)$。</p><figure class="highlight arduino"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mx;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    ans.emplace_back(u, t);</span><br><span class="line">    <span class="keyword">int</span> cur = t, res = g[u].<span class="built_in">size</span>() - (u != <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur == mx) &#123;</span><br><span class="line">            cur = t - <span class="number">1</span> - res;</span><br><span class="line">            ans.emplace_back(u, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(v, u, cur + <span class="number">1</span>);</span><br><span class="line">        ++cur; --res;</span><br><span class="line">        ans.emplace_back(u, cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u != <span class="number">1</span> &amp;&amp; cur != t - <span class="number">1</span>)</span><br><span class="line">        ans.emplace_back(u, t - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, <span class="keyword">int</span>(g[i].<span class="built_in">size</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i.first &lt;&lt; <span class="string">' '</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照例x2&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Google Codejam 2020 qualification 题解</title>
    <link href="https://blog.wgree.site/441053698/"/>
    <id>https://blog.wgree.site/441053698/</id>
    <published>2020-04-23T02:29:45.000Z</published>
    <updated>2020-04-30T03:00:48.850Z</updated>
    
    <content type="html"><![CDATA[<p>补一下题解（有机会写完的 🐦）<br><a id="more"></a></p><h2 id="Vestigium"><a href="#Vestigium" class="headerlink" title="Vestigium"></a>Vestigium</h2><p>没啥可分析的</p><figure class="highlight cpp"><figcaption><span>Vestigium.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum, cnt1, cnt2;</span><br><span class="line">        sum = cnt1 = cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    sum += mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">has</span><span class="params">(<span class="number">105</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (has[mat[i][j]]) &#123;</span><br><span class="line">                    ++cnt1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                has[mat[i][j]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">has</span><span class="params">(<span class="number">105</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (has[mat[j][i]]) &#123;</span><br><span class="line">                    ++cnt2;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                has[mat[j][i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d %d %d\n"</span>, cas, sum, cnt1, cnt2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nesting-Depth"><a href="#Nesting-Depth" class="headerlink" title="Nesting Depth"></a>Nesting Depth</h2><p>类似$dfs$序列，有种判断树同构的算法$(AHU)$也是利用这个思路的。</p><figure class="highlight cpp"><figcaption><span>Nesting Depth.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">char</span> la = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">while</span> (la &lt; c) &#123;</span><br><span class="line">                ans.push_back(<span class="string">'('</span>);</span><br><span class="line">                ++la;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (la &gt; c) &#123;</span><br><span class="line">                ans.push_back(<span class="string">')'</span>);</span><br><span class="line">                --la;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (la &gt; <span class="string">'0'</span>) &#123;</span><br><span class="line">            ans.push_back(<span class="string">')'</span>);</span><br><span class="line">            --la;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s\n"</span>, cas, ans.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parenting-Partnering-Returns"><a href="#Parenting-Partnering-Returns" class="headerlink" title="Parenting Partnering Returns"></a>Parenting Partnering Returns</h2><p>贪心，排序直接做就行了。</p><figure class="highlight cpp"><figcaption><span>Parenting Partnering Returns.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">&#125; act[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(rec &amp;x, rec &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.l != y.l)</span><br><span class="line">        <span class="keyword">return</span> x.l &lt; y.l;</span><br><span class="line">    <span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; act[i].l &gt;&gt; act[i].r;</span><br><span class="line">            act[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(act, act + n, cmp);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (act[i].l &gt;= c) &#123;</span><br><span class="line">                ans[act[i].id] = <span class="string">'C'</span>;</span><br><span class="line">                c = act[i].r;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (act[i].l &gt;= j) &#123;</span><br><span class="line">                ans[act[i].id] = <span class="string">'J'</span>;</span><br><span class="line">                j = act[i].r;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="string">"IMPOSSIBLE"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s\n"</span>, cas, ans.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ESAb-ATAd"><a href="#ESAb-ATAd" class="headerlink" title="ESAb ATAd"></a>ESAb ATAd</h2><p>有一个$01$串，每次可以询问一个位置是$1$还是$0$，每$10$次询问可能发生$01$反转、前后翻转、都发生、都未发生，要求在$150$次询问内得到当前的串。</p><p>可以把前后对应的位置分为$4$种情况：</p><ul><li>$00$、$11$，前后相同组，只会被 $01$反转、都发生 影响；</li><li>$01$、$10$，前后不同组，只会被 前后翻转、$01$反转 影响。<br>那么每$10$次询问当作一组，从第二组开始后，每组开始都先从相同组和不同组分别取一个，询问一下，判断发生了什么事件，再继续询问未操作的对，直到全部询问完。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">交互还没调好..</span><br></pre></td></tr></table></figure><h2 id="Indicium"><a href="#Indicium" class="headerlink" title="Indicium"></a>Indicium</h2><p>看起来有点复杂，还没研究</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补一下题解（有机会写完的 🐦）&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codejam" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codejam/"/>
    
    
      <category term="Codejam" scheme="https://blog.wgree.site/tags/Codejam/"/>
    
  </entry>
  
  <entry>
    <title>Google Codejam 2020 Round 1A 题解</title>
    <link href="https://blog.wgree.site/992807764/"/>
    <id>https://blog.wgree.site/992807764/</id>
    <published>2020-04-23T02:11:07.000Z</published>
    <updated>2020-04-23T02:28:28.393Z</updated>
    
    <content type="html"><![CDATA[<p>补一下题解<br><a id="more"></a></p><h2 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h2><p>有一些串，$*$是通配符，求一个大串满足可以和所有小串匹配。</p><p>把小串按$*$分割成小段，那么有些段是前缀，有些是后缀，先把后缀前缀求出来，再把小段按先后顺序拼起来，就能保证满足要求了。<br>如果有合法的前缀后缀，必定是其最长的那个。<br>$O(n)$</p><figure class="highlight arduino"><figcaption><span>Pattern Matching.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> ts[<span class="number">55</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pre, suf, mid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pre.<span class="built_in">clear</span>(); suf.<span class="built_in">clear</span>(); mid.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">string</span> &amp;s = ts[k];</span><br><span class="line">        <span class="keyword">int</span> la = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (la == <span class="number">0</span>) pre.emplace_back(s.substr(la, i - la));</span><br><span class="line">                <span class="keyword">else</span> mid.emplace_back(s.substr(la, i - la));</span><br><span class="line">                la = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        suf.emplace_back(s.substr(la));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> cmp = [&amp;](<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b) &#123; <span class="keyword">return</span> a.length() &gt; b.length(); &#125;;</span><br><span class="line">    sort(pre.<span class="built_in">begin</span>(), pre.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    sort(suf.<span class="built_in">begin</span>(), suf.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pre.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre[<span class="number">0</span>].<span class="built_in">find</span>(pre[i]) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; suf.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (suf[i].empty()) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (suf[<span class="number">0</span>].rfind(suf[i]) != suf[<span class="number">0</span>].length() - suf[i].length()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s = pre[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> &amp;t : mid) &#123;</span><br><span class="line">        s += t;</span><br><span class="line">    &#125;</span><br><span class="line">    s += suf[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TT;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; TT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= TT; ++cas) &#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ts[i];</span><br><span class="line">        prase();</span><br><span class="line">        <span class="keyword">if</span> (check(ans))</span><br><span class="line">            ans = <span class="string">'\*'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s\n"</span>, cas, ans.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pascal-Walk"><a href="#Pascal-Walk" class="headerlink" title="Pascal Walk"></a>Pascal Walk</h2><p>要求在杨辉三角上走至多 $500$步，要求经过的点的和为$x$，且不走重复点。</p><p>杨辉三角第$i$行的和为$2^{i-1}$，那么假设前$30$行都走，那么和已经有$2^{31}-1 (&gt;10^9)$了。<br>因此只需要在前$30$行内走$x$二进制下位$1$的行就可以得到，但因为不能跳跃，所一一定会多从两边的$1$的格子多走，那么转而对$x-30$求上述操作，其中多走的$1$的格子就计入额外要走的$30$内，最后把额外要走的走完。<br>$O(n)$</p><figure class="highlight perl"><figcaption><span>Pascal Walk.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> TT;</span><br><span class="line">    cin &gt;&gt; TT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= TT; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">"Case #%d:\n"</span>, cas);</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">printf</span>(<span class="string">"%d 1\n"</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n - <span class="number">30</span>, cc = <span class="number">30</span>, j = <span class="number">1</span>, i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; i)</span><br><span class="line">                            <span class="keyword">printf</span>(<span class="string">"%d %d\n"</span>, i, j++);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">while</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">                            <span class="keyword">printf</span>(<span class="string">"%d %d\n"</span>, i, j--);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> --cc;</span><br><span class="line">                <span class="keyword">printf</span>(<span class="string">"%d %d\n"</span>, i, j);</span><br><span class="line">                <span class="keyword">if</span> (j == i) ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cc--) &#123;</span><br><span class="line">                <span class="keyword">printf</span>(<span class="string">"%d %d\n"</span>, i++,j);</span><br><span class="line">                <span class="keyword">if</span> (j == i - <span class="number">1</span>) ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Square-Dance"><a href="#Square-Dance" class="headerlink" title="Square Dance"></a>Square Dance</h2><p>这道题的话就是暴力模拟了，不过每次考虑下一轮删谁的时候，由于每轮删只影响相邻的$4$个人，因此只考虑上轮删除的相邻位置的人，注意写时的细节就好。<br>$O(RC)$</p><figure class="highlight excel"><figcaption><span>Square Dance.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">1</span>e5 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> x, y;</span><br><span class="line"><span class="built_in">int</span> u[<span class="built_in">N</span>], d[<span class="built_in">N</span>], l[<span class="built_in">N</span>], r[<span class="built_in">N</span>], v[<span class="built_in">N</span>], vis[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line">inline <span class="built_in">int</span> po(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</span><br><span class="line">    return a * y + b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double calc(<span class="built_in">int</span> <span class="built_in">t</span>) &#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; tp;</span><br><span class="line">    <span class="built_in">if</span> (u[<span class="built_in">t</span>]) tp.emplace_back(v[u[<span class="built_in">t</span>]]);</span><br><span class="line">    <span class="built_in">if</span> (d[<span class="built_in">t</span>]) tp.emplace_back(v[d[<span class="built_in">t</span>]]);</span><br><span class="line">    <span class="built_in">if</span> (l[<span class="built_in">t</span>]) tp.emplace_back(v[l[<span class="built_in">t</span>]]);</span><br><span class="line">    <span class="built_in">if</span> (r[<span class="built_in">t</span>]) tp.emplace_back(v[r[<span class="built_in">t</span>]]);</span><br><span class="line">    double ss = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> k <span class="symbol">:</span> tp) ss += k;</span><br><span class="line">    <span class="built_in">if</span> (tp.empty()) return <span class="number">0.0</span>;</span><br><span class="line">    return ss / tp.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void init(<span class="built_in">int</span> <span class="built_in">t</span>) &#123;</span><br><span class="line">    <span class="built_in">if</span> (i) u[<span class="built_in">t</span>] = <span class="built_in">t</span> - y;</span><br><span class="line">    else u[<span class="built_in">t</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">if</span> (i + <span class="number">1</span> &lt; x) d[<span class="built_in">t</span>] = <span class="built_in">t</span>+ y;</span><br><span class="line">    else d[<span class="built_in">t</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">if</span> (j) l[<span class="built_in">t</span>] = <span class="built_in">t</span>-<span class="number">1</span>;</span><br><span class="line">    else l[<span class="built_in">t</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">if</span> (j + <span class="number">1</span> &lt; y) r[<span class="built_in">t</span>] = <span class="built_in">t</span> + <span class="number">1</span>;</span><br><span class="line">    else r[<span class="built_in">t</span>] = <span class="number">0</span>;</span><br><span class="line">    vis[<span class="built_in">t</span>] = INF32;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> TT;</span><br><span class="line">    cin &gt;&gt; TT;</span><br><span class="line">    for (<span class="built_in">int</span> cas = <span class="number">1</span>; cas &lt;= TT; ++cas) &#123;</span><br><span class="line">        <span class="built_in">int</span> cc = <span class="number">2</span>;</span><br><span class="line">        ll <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; x; ++i) &#123;</span><br><span class="line">            for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; y; ++j) &#123;</span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span> = po(i, j);</span><br><span class="line">                init(<span class="built_in">t</span>);</span><br><span class="line">                cin &gt;&gt; v[po(i, j)];</span><br><span class="line">                <span class="built_in">sum</span> += v[po(i, j)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="built_in">sum</span>;</span><br><span class="line">        queue&lt;<span class="built_in">int</span>&gt; Q;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; x; ++i) &#123;</span><br><span class="line">            for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; y; ++j) &#123;</span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span> = po(i, j);</span><br><span class="line">                <span class="built_in">if</span> (calc(<span class="built_in">t</span>) &gt; v[<span class="built_in">t</span>]) &#123;</span><br><span class="line">                    vis[<span class="built_in">t</span>] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">sum</span> -= v[<span class="built_in">t</span>];</span><br><span class="line">                    Q.emplace(<span class="built_in">t</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while (++cc) &#123;</span><br><span class="line">            <span class="built_in">if</span> (Q.empty()) break;</span><br><span class="line">            ans += <span class="built_in">sum</span>;</span><br><span class="line">            queue&lt;<span class="built_in">int</span>&gt; q;</span><br><span class="line">            while (!Q.empty()) &#123;</span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span> = Q.front();</span><br><span class="line">                Q.pop();</span><br><span class="line">                <span class="built_in">if</span> (u[<span class="built_in">t</span>]) d[u[<span class="built_in">t</span>]] = d[<span class="built_in">t</span>], q.emplace(u[<span class="built_in">t</span>]);</span><br><span class="line">                <span class="built_in">if</span> (d[<span class="built_in">t</span>]) u[d[<span class="built_in">t</span>]] = u[<span class="built_in">t</span>], q.emplace(d[<span class="built_in">t</span>]);</span><br><span class="line">                <span class="built_in">if</span> (l[<span class="built_in">t</span>]) r[l[<span class="built_in">t</span>]] = r[<span class="built_in">t</span>], q.emplace(l[<span class="built_in">t</span>]);</span><br><span class="line">                <span class="built_in">if</span> (r[<span class="built_in">t</span>]) l[r[<span class="built_in">t</span>]] = l[<span class="built_in">t</span>], q.emplace(r[<span class="built_in">t</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            while (!q.empty()) &#123;</span><br><span class="line">                <span class="built_in">int</span> <span class="built_in">t</span> = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="built_in">if</span> (vis[<span class="built_in">t</span>] &lt;= cc) continue;</span><br><span class="line">                <span class="built_in">if</span> (calc(<span class="built_in">t</span>) &gt; v[<span class="built_in">t</span>]) &#123;</span><br><span class="line">                    vis[<span class="built_in">t</span>] = cc;</span><br><span class="line">                    <span class="built_in">sum</span> -= v[<span class="built_in">t</span>];</span><br><span class="line">                    Q.emplace(<span class="built_in">t</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"Case #%d: %lld\n"</span>, cas, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补一下题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codejam" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codejam/"/>
    
    
      <category term="Codejam" scheme="https://blog.wgree.site/tags/Codejam/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 636 Div.3 题解</title>
    <link href="https://blog.wgree.site/256316444/"/>
    <id>https://blog.wgree.site/256316444/</id>
    <published>2020-04-22T01:48:18.000Z</published>
    <updated>2020-04-22T02:03:45.359Z</updated>
    
    <content type="html"><![CDATA[<p>整点活<br><a id="more"></a><br>没啥需要分析的，具体的话官方题解吧。</p><h2 id="1343A-Candies"><a href="#1343A-Candies" class="headerlink" title="1343A Candies"></a>1343A Candies</h2><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, c = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">31</span>; ++i) &#123;</span><br><span class="line">            c |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">if</span> (n % c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; n / c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1343B-Balanced-Array"><a href="#1343B-Balanced-Array" class="headerlink" title="1343B Balanced Array"></a>1343B Balanced Array</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i * <span class="number">2</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">1</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            t += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> == n / <span class="number">4</span>)</span><br><span class="line">                t += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1343C-Alternating-Subsequence"><a href="#1343C-Alternating-Subsequence" class="headerlink" title="1343C Alternating Subsequence"></a>1343C Alternating Subsequence</h2><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (ll &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        ll sum = <span class="number">0</span>, la = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] * la &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum += la;</span><br><span class="line">                la = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            la = <span class="built_in">max</span>(la, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sum += la;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1343D-Constant-Palindrome-Sum"><a href="#1343D-Constant-Palindrome-Sum" class="headerlink" title="1343D Constant Palindrome Sum"></a>1343D Constant Palindrome Sum</h2><p>这道题主要是想到对于一对数$a,b,(a\leq b)$，若 $x\leq a$，需要两次操作，若$a\le x\le b+k$，需要1次操作，其中 $x = a + b$ 时不需要操作，若 $b+k\le x\le 2k$，也需要两次操作，因此差分后扫描线取最小值。</p><figure class="highlight excel"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">T</span>;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">T</span>;</span><br><span class="line">    while (<span class="built_in">T</span>--) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">n</span>, k;</span><br><span class="line">        cin &gt;&gt; <span class="built_in">n</span> &gt;&gt; k;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; a(<span class="built_in">n</span>), b(<span class="number">2</span> * k);</span><br><span class="line">        for (<span class="built_in">int</span> &amp;i <span class="symbol">:</span> a) cin &gt;&gt; i, --i;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span> / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">int</span> s = a[i] + a[<span class="built_in">n</span> - i - <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">int</span> l = <span class="built_in">min</span>(a[i], a[<span class="built_in">n</span> - i - <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">int</span> r = <span class="built_in">max</span>(a[i], a[<span class="built_in">n</span> - i - <span class="number">1</span>]) + k;</span><br><span class="line">            b[<span class="number">0</span>] += <span class="number">2</span>;</span><br><span class="line">            --b[l], --b[s];</span><br><span class="line">            ++b[s + <span class="number">1</span>], ++b[r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> ans = b[<span class="number">0</span>];</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * k; ++i) &#123;</span><br><span class="line">            b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1343E-Weights-Distributing"><a href="#1343E-Weights-Distributing" class="headerlink" title="1343E Weights Distributing"></a>1343E Weights Distributing</h2><p>这道题是枚举一个点$t$，我们的路径为$a\to t,t\to b,b\to t,t\to b$，那么走两遍的边和走一遍的边就确定了数目，取最小值即为答案。</p><figure class="highlight arduino"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> ll INF64 = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;vi&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;vi&gt; <span class="title">d</span><span class="params">(<span class="number">3</span>, vi(n + <span class="number">1</span>, <span class="number">-1</span>))</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">p</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">begin</span>() + m + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            p[i] += p[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, u, v; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            g[u].emplace_back(v);</span><br><span class="line">            g[v].emplace_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> bfs = [&amp;](<span class="keyword">int</span> s, <span class="keyword">int</span> i) &#123;</span><br><span class="line">            <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">            Q.emplace(s);</span><br><span class="line">            d[i][s] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                Q.pop();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[i][v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        d[i][v] = d[i][u] + <span class="number">1</span>;</span><br><span class="line">                        Q.emplace(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        bfs(a, <span class="number">0</span>);</span><br><span class="line">        bfs(b, <span class="number">1</span>);</span><br><span class="line">        bfs(c, <span class="number">2</span>);</span><br><span class="line">        ll ans = INF64;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[<span class="number">2</span>][i] + d[<span class="number">1</span>][i] + d[<span class="number">0</span>][i] &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">            ll tt = p[d[<span class="number">1</span>][i]] + p[d[<span class="number">2</span>][i] + d[<span class="number">1</span>][i] + d[<span class="number">0</span>][i]];</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, tt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1343F-Restore-the-Permutation-by-Sorted-Segments"><a href="#1343F-Restore-the-Permutation-by-Sorted-Segments" class="headerlink" title="1343F Restore the Permutation by Sorted Segments"></a>1343F Restore the Permutation by Sorted Segments</h2><p>这个题主要是暴力$check$和模拟吧，<a href="https://codeforces.com/blog/entry/76352" target="_blank" rel="noopener">思路见</a>。</p><figure class="highlight pgsql"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    auto cmp = [](<span class="keyword">set</span>&lt;<span class="type">int</span>&gt; &amp;a, <span class="keyword">set</span>&lt;<span class="type">int</span>&gt; &amp;b) &#123; <span class="keyword">return</span> a.size() &lt; b.size(); &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T<span class="comment">--) &#123;</span></span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans(n), tp;</span><br><span class="line">        vector&lt;<span class="keyword">set</span>&lt;<span class="type">int</span>&gt;&gt; s, ss(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k, t; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; t;</span><br><span class="line">                ss[i].emplace(t);</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">2</span>) tp.emplace_back(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ss.<span class="keyword">begin</span>(), ss.<span class="keyword">begin</span>() + n, cmp);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            s = ss;</span><br><span class="line">            ans[<span class="number">0</span>] = tp.back();</span><br><span class="line">            tp.pop_back();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i].count(ans[<span class="number">0</span>]))</span><br><span class="line">                    s[i].erase(ans[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(s.<span class="keyword">begin</span>(), s.<span class="keyword">begin</span>() + n, cmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                ans[i] = *s[i].<span class="keyword">begin</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[j].count(ans[i]))</span><br><span class="line">                        s[j].erase(ans[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                sort(s.<span class="keyword">begin</span>(), s.<span class="keyword">begin</span>() + n, cmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> ff = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">set</span>&lt;<span class="type">int</span>&gt; tt;</span><br><span class="line">                <span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line">                tt.emplace(ans[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; <span class="comment">--j) &#123;</span></span><br><span class="line">                    tt.emplace(ans[j]);</span><br><span class="line">                    <span class="keyword">if</span> (find(ss.<span class="keyword">begin</span>(), ss.<span class="keyword">end</span>(), tt) != ss.<span class="keyword">end</span>()) &#123;</span><br><span class="line">                        f = <span class="number">1</span>;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">                    ff = <span class="number">0</span>;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ff) break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            cout &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整点活&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div3" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div3/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div3" scheme="https://blog.wgree.site/tags/div3/"/>
    
  </entry>
  
  <entry>
    <title>Google Codejam 2020 Round 1B 题解</title>
    <link href="https://blog.wgree.site/3047296183/"/>
    <id>https://blog.wgree.site/3047296183/</id>
    <published>2020-04-21T07:27:42.000Z</published>
    <updated>2020-04-21T08:11:33.724Z</updated>
    
    <content type="html"><![CDATA[<p>逐渐摸索套路中<br><a id="more"></a></p><h2 id="Expogo"><a href="#Expogo" class="headerlink" title="Expogo"></a>Expogo</h2><p>起始点为$(0,0)$，目标点为$(x,y)$，第$i$次移动可以向上下左右任意一个方向移动$2^(i-1)$格，问最少移动次数到达目标点的操作序列。</p><p>首先设 $x+y$ 二进制下最高位为$i$，那么在 $i$ 步内一定能移动到终点，如果更多次数的话，意味着需要反向移动抵消一些步。<br>对于 $x+y$ 的二进制表示，如果从低到高每位都为$1$，那么意味着 $x\&amp;y=0$，只需要分别把二进制位分别填入 $x,y$ 即可。<br>如果有若干位为$0$的话，首先想到对于 $2^{i+1}-1$，如果减去 $2^x, (x\in [1,i])$，那么 $x+y - x|y = 2\times 2^x$，因此计算 $x+y- x|y$，再除$2$，此时为$1$的位就是与$x,y$异号的位。<br>那么现在知道了哪些需要正向跳，哪些需要反向跳。从$0$到$i$枚举，如果某一位在$x$中为$1$，将其根据正负号赋$W or E$，并改变$x$的值；如果在$y$中为$1$，做同样的操作；如果$x,y$中都为$1$，此时无法满足要求，不可行。<br>$O(n)$</p><figure class="highlight cpp"><figcaption><span>Expogo.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, fx = <span class="number">0</span>, fy = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) fx = <span class="number">1</span>, x = -x;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) fy = <span class="number">1</span>, y = -y;</span><br><span class="line">        ll tot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> lim = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tot &lt;= x + y) tot &lt;&lt;= <span class="number">1</span>, ++lim;</span><br><span class="line">        tot -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sp = tot ^ (x + y);</span><br><span class="line">        sp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    ans = <span class="string">"IMPOSSIBLE"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sp &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    x += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                    <span class="keyword">if</span> (fx) ans.push_back(<span class="string">'E'</span>);</span><br><span class="line">                    <span class="keyword">else</span> ans.push_back(<span class="string">'W'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fx) ans.push_back(<span class="string">'W'</span>);</span><br><span class="line">                    <span class="keyword">else</span> ans.push_back(<span class="string">'E'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sp &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    y += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                    <span class="keyword">if</span> (fy) ans.push_back(<span class="string">'N'</span>);</span><br><span class="line">                    <span class="keyword">else</span> ans.push_back(<span class="string">'S'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fy) ans.push_back(<span class="string">'S'</span>);</span><br><span class="line">                    <span class="keyword">else</span> ans.push_back(<span class="string">'N'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="string">"IMPOSSIBLE"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s\n"</span>, cas, ans.c_str());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Blindfolded-Bullseye"><a href="#Blindfolded-Bullseye" class="headerlink" title="Blindfolded Bullseye"></a>Blindfolded Bullseye</h2><p>有一个左上角右下角为$(-1e9,1e9)$和$(1e9,-1e9)$的大正方形，有一个半径为$R$，圆心为$(x,y)$的圆形，每次询问一个点，告诉这个点在圆内（包括边界），在圆外或是在圆心，要求在 $300$ 次内询问到圆心坐标。</p><p>因为$\frac {10^9}{2} \leq R$，因此每隔$\frac {10^9}{2}$的距离就询问一下，一定能问到一个点在圆上。<br>当询问到一个点在圆上后，我们就可以通过$4$次二分询问到相互垂直的两条弦$(x1,y),(x2,y),(x,y1),(x,y2)$，那么圆心就应当位于$(\frac {x1+x2}{2},\frac {y1+y2}{2})$。但是由于上面问到的点只能是整数，圆心可能不太精确，因此以上面的答案为中心，询问一个小范围即可。<br>$O(\log n)$</p><figure class="highlight properties"><figcaption><span>Blindfolded Bullseye.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">int</span> <span class="string">main() &#123;</span></span><br><span class="line">    <span class="attr">auto</span> <span class="string">sd = [&amp;](int x, int y) &#123;</span></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="attr">os</span> <span class="string">&lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="attr">string</span> <span class="string">s;</span></span><br><span class="line">        <span class="attr">cin</span> <span class="string">&gt;&gt; s;</span></span><br><span class="line">        <span class="attr">if</span> <span class="string">(s == "CENTER")</span></span><br><span class="line">            <span class="attr">return</span> <span class="string">1;</span></span><br><span class="line">        <span class="attr">if</span> <span class="string">(s == "HIT")</span></span><br><span class="line">            <span class="attr">return</span> <span class="string">2;</span></span><br><span class="line">        <span class="attr">return</span> <span class="string">0;</span></span><br><span class="line">    <span class="attr">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">int</span> <span class="string">T, a, b;</span></span><br><span class="line">    <span class="attr">cin</span> <span class="string">&gt;&gt; T &gt;&gt; a &gt;&gt; b;</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">(int cas = 1; cas &lt;= T; ++cas) &#123;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">x, y, f = 0;</span></span><br><span class="line">        <span class="attr">string</span> <span class="string">s;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(x = -1e9 + 1e9 / 2; x &lt; 1e9; x += 1e9 / 2) &#123;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(y = -1e9 + 1e9 / 2; y &lt; 1e9; y += 1e9 / 2) &#123;</span></span><br><span class="line">                <span class="attr">cout</span> <span class="string">&lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">                <span class="attr">cin</span> <span class="string">&gt;&gt; s;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(s == "CENTER") goto nex;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(s == "HIT") &#123;</span></span><br><span class="line">                    <span class="attr">f</span> = <span class="string">2;</span></span><br><span class="line">                    <span class="attr">break;</span></span><br><span class="line">                <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(f) break;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">if</span> <span class="string">(f == 2) &#123;</span></span><br><span class="line">            <span class="attr">int</span> <span class="string">l = -1e9, r = x, x1, x2, y1, y2, mid, res;</span></span><br><span class="line">            <span class="attr">while</span> <span class="string">(l &lt;= r) &#123;</span></span><br><span class="line">                <span class="attr">mid</span> = <span class="string">(l + r) / 2;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(res = sd(mid, y)) &#123;</span></span><br><span class="line">                    <span class="attr">if</span> <span class="string">(res == 1) goto nex;</span></span><br><span class="line">                    <span class="attr">r</span> = <span class="string">mid - 1;</span></span><br><span class="line">                    <span class="attr">x1</span> = <span class="string">mid;</span></span><br><span class="line">                <span class="meta">&#125;</span> <span class="string">else</span></span><br><span class="line">                    <span class="attr">l</span> = <span class="string">mid + 1;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">l</span> = <span class="string">x, r = 1e9;</span></span><br><span class="line">            <span class="attr">while</span> <span class="string">(l &lt;= r) &#123;</span></span><br><span class="line">                <span class="attr">mid</span> = <span class="string">(l + r) / 2;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(res = sd(mid, y)) &#123;</span></span><br><span class="line">                    <span class="attr">if</span> <span class="string">(res == 1) goto nex;</span></span><br><span class="line">                    <span class="attr">l</span> = <span class="string">mid + 1;</span></span><br><span class="line">                    <span class="attr">x2</span> = <span class="string">mid;</span></span><br><span class="line">                <span class="meta">&#125;</span> <span class="string">else</span></span><br><span class="line">                    <span class="attr">r</span> = <span class="string">mid - 1;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">l</span> = <span class="string">-1e9, r = y;</span></span><br><span class="line">            <span class="attr">while</span> <span class="string">(l &lt;= r) &#123;</span></span><br><span class="line">                <span class="attr">mid</span> = <span class="string">(l + r) / 2;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(res = sd(x, mid)) &#123;</span></span><br><span class="line">                    <span class="attr">if</span> <span class="string">(res == 1) goto nex;</span></span><br><span class="line">                    <span class="attr">r</span> = <span class="string">mid - 1;</span></span><br><span class="line">                    <span class="attr">y1</span> = <span class="string">mid;</span></span><br><span class="line">                <span class="meta">&#125;</span> <span class="string">else</span></span><br><span class="line">                    <span class="attr">l</span> = <span class="string">mid + 1;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">l</span> = <span class="string">y, r = 1e9;</span></span><br><span class="line">            <span class="attr">while</span> <span class="string">(l &lt;= r) &#123;</span></span><br><span class="line">                <span class="attr">mid</span> = <span class="string">(l + r) / 2;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(res = sd(x, mid)) &#123;</span></span><br><span class="line">                    <span class="attr">if</span> <span class="string">(res == 1) goto nex;</span></span><br><span class="line">                    <span class="attr">l</span> = <span class="string">mid + 1;</span></span><br><span class="line">                    <span class="attr">y2</span> = <span class="string">mid;</span></span><br><span class="line">                <span class="meta">&#125;</span> <span class="string">else</span></span><br><span class="line">                    <span class="attr">r</span> = <span class="string">mid - 1;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">x</span> = <span class="string">(x1 + x2) / 2;</span></span><br><span class="line">            <span class="attr">y</span> = <span class="string">(y1 + y2) / 2;</span></span><br><span class="line">        <span class="meta">&#125;</span> <span class="string">else</span></span><br><span class="line">            <span class="attr">return</span> <span class="string">3;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = -2; i &lt;= 2; ++i) &#123;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(int j = -2; j &lt;= 2; ++j) &#123;</span></span><br><span class="line">                <span class="attr">cout</span> <span class="string">&lt;&lt; x + i &lt;&lt; ' ' &lt;&lt; y + j &lt;&lt; endl;</span></span><br><span class="line">                <span class="attr">cin</span> <span class="string">&gt;&gt; s;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(s == "CENTER") goto nex;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">nex</span>:<span class="string">;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">0;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Join-the-Rank"><a href="#Join-the-Rank" class="headerlink" title="Join the Rank"></a>Join the Rank</h2><p>有一个序列是 $1,2,3…R,1,2,3…R,…….1,2,3…R$，每次操作可以把序列分为$a,b,c$三段，然后组合成$bac$，问最少几次使序列被从小到大排好序，和操作的序列。</p><p>可以发现如果把相同的一段数字看成一个数字的话，每次最多合并两个数字，那么做法就是 $12 | 34561 | 23…..$这样切，每次都能合并两个数。特殊的是合并成 $512345$ 这种情况，只需要 $5 | 1234 | 5$这样再操作一次即可。<br>由于$r,c$都很小，直接暴力做就可以了，$O(\sum_{i = 1}^{RC} {i})$（不太确定）。</p><figure class="highlight arduino"><figcaption><span>Join the Rank.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> r, c, f = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r; ++j) &#123;</span><br><span class="line">                s.push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; p;</span><br><span class="line">            <span class="keyword">int</span> i, a, b = <span class="number">-1</span>;</span><br><span class="line">            p.emplace_back(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; r * c; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                        a = i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.emplace_back(s[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; r * c; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == p[<span class="number">0</span>] &amp;&amp; s[i] == p[<span class="number">1</span>]) &#123;</span><br><span class="line">                    b = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            ans.emplace_back(a, b);</span><br><span class="line">            s = s.substr(a, b - a) + s.substr(<span class="number">0</span>, a) + s.substr(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!is_sorted(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>())) &#123;</span><br><span class="line">            ans.emplace_back(c - <span class="number">1</span>, r * c - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, cas, ans.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i.first, i.second - i.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逐渐摸索套路中&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codejam" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codejam/"/>
    
    
      <category term="Codejam" scheme="https://blog.wgree.site/tags/Codejam/"/>
    
  </entry>
  
  <entry>
    <title>Google Kickstart 2020 Round B 题解</title>
    <link href="https://blog.wgree.site/2883389612/"/>
    <id>https://blog.wgree.site/2883389612/</id>
    <published>2020-04-19T09:46:55.000Z</published>
    <updated>2020-04-19T15:07:50.903Z</updated>
    
    <content type="html"><![CDATA[<p>没啥难度，和上次55开（除了我僵硬的一p）<br><a id="more"></a><br>前三题不分析了</p><h2 id="Bike-Tour"><a href="#Bike-Tour" class="headerlink" title="Bike Tour"></a>Bike Tour</h2><figure class="highlight cpp"><figcaption><span>Bike Tour.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>]) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bus-Rountes"><a href="#Bus-Rountes" class="headerlink" title="Bus Rountes"></a>Bus Rountes</h2><figure class="highlight cpp"><figcaption><span>Bus Rountes.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; ll d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (ll &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        ll las = d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            las = las / a[i] * a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = las;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Robot-Path-Decoding"><a href="#Robot-Path-Decoding" class="headerlink" title="Robot Path Decoding"></a>Robot Path Decoding</h2><p>差不多就是模拟叭，就是加（）可以当作递归写，反正数据范围很小，统计贡献方便且快。</p><figure class="highlight maxima"><figcaption><span>Robot Path Decoding.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef pair&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line">pll <span class="built_in">go</span>(<span class="built_in">string</span> &amp;s, int l, int r, int mul) &#123;</span><br><span class="line">    pll res;</span><br><span class="line">    <span class="keyword">for</span> (int i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isdigit(s[i])) &#123;</span><br><span class="line">            int cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (int j = i + <span class="number">1</span>; j &lt;= r; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == '(') ++cnt;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == ')') --cnt;</span><br><span class="line">                <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">                    pll t = <span class="built_in">go</span>(s, i + <span class="number">1</span>, j, s[i] - '<span class="number">0</span>');</span><br><span class="line">                    i = j;</span><br><span class="line">                    res.<span class="built_in">first</span> += t.<span class="built_in">first</span>;</span><br><span class="line">                    res.<span class="built_in">second</span> += t.<span class="built_in">second</span>;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == 'N') res.<span class="built_in">first</span> += <span class="built_in">mod</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == 'S') res.<span class="built_in">first</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == 'E') res.<span class="built_in">second</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == 'W') res.<span class="built_in">second</span> += <span class="built_in">mod</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">first</span> &gt; <span class="built_in">mod</span>) res.<span class="built_in">first</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">second</span> &gt; <span class="built_in">mod</span>) res.<span class="built_in">second</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">first</span> = res.<span class="built_in">first</span> * mul;</span><br><span class="line">    res.<span class="built_in">second</span> = res.<span class="built_in">second</span> * mul;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="built_in">first</span> &gt; <span class="built_in">mod</span>) res.<span class="built_in">first</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="built_in">second</span> &gt; <span class="built_in">mod</span>) res.<span class="built_in">second</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (int cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        pii ans = <span class="built_in">go</span>(s, <span class="number">0</span>, s.<span class="built_in">length</span>() - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        ans.<span class="built_in">first</span>++; ans.<span class="built_in">second</span>++;</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">first</span> &gt; <span class="built_in">mod</span>) ans.<span class="built_in">first</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">second</span> &gt; <span class="built_in">mod</span>) ans.<span class="built_in">second</span> <span class="symbol">%</span>= <span class="built_in">mod</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d %d\n"</span>, cas, ans.<span class="built_in">second</span>, ans.<span class="built_in">first</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Wandering-Robot"><a href="#Wandering-Robot" class="headerlink" title="Wandering Robot"></a>Wandering Robot</h2><p>看了题解分析后，感觉写了这么久题，反而把计算机最原始的数值计算的功能忽略了，所以被精度问题绝杀。</p><p>分析一下可以想到假设每个格子都能走的话，走到位于$(x,y)$的概率斜着看是二项式系数除$2^n$，所以问题就变成求一些格子上$\frac{C_n^k}{2^n}$的和。<br><img src="/images/ks2020/two_path.png" class=""><br>由于如上图有两条路能走，可以翻转后等效，因此下面考虑一条路。<br><img src="/images/ks2020/critical_point.png" class="" title="上述求和即图中绿色部分格子"></p><p>由于求$\frac{C_n^k}{2^n}$中间太大，可以把换成$e^{\ln{\frac{C_n^k}{2^n}}} = e^{\ln{n!}-\ln{k!}-\ln{(n-k)!}-\ln{2^n}}$，预处理一下，就可以算了。<br>不过，由于右和下边界和内部规则不同，计算略有不同。假设当我们走到$(w,i)$时，这里上式算出来的值和实际是不同的，实际它差的是$i\in [1,i)$的和除$2$，原因还是很好想到的。</p><figure class="highlight cpp"><figcaption><span>Wandering Robot.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ln_fac[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exp</span>(ln_fac[n] - ln_fac[k] - ln_fac[n - k] - p[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p[<span class="number">1</span>] = <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        ln_fac[i] = ln_fac[i - <span class="number">1</span>] + <span class="built_in">log</span>(i);</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + p[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        --x, --y, --x1, --y1, --x2, --y2;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> go = [&amp;]() &#123;</span><br><span class="line">            <span class="keyword">int</span> tx = x2, ty = y1;</span><br><span class="line">            <span class="keyword">if</span> (x2 &lt; x) &#123;</span><br><span class="line">                <span class="keyword">double</span> fl = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (ty) &#123;</span><br><span class="line">                    ty--, tx++;</span><br><span class="line">                    <span class="keyword">if</span> (tx &gt; x) &#123;</span><br><span class="line">                        fl = <span class="number">0.5</span>;</span><br><span class="line">                        --tx;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans += fl * calc(tx, ty + tx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        go();</span><br><span class="line">        swap(x, y); swap(x1, y1); swap(x2, y2);</span><br><span class="line">        go();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.7lf\n"</span>, cas, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没啥难度，和上次55开（除了我僵硬的一p）&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Kickstart" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Kickstart/"/>
    
    
      <category term="Kickstart" scheme="https://blog.wgree.site/tags/Kickstart/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 635 Div.2 题解</title>
    <link href="https://blog.wgree.site/3213635929/"/>
    <id>https://blog.wgree.site/3213635929/</id>
    <published>2020-04-16T15:22:21.000Z</published>
    <updated>2020-04-16T16:47:39.826Z</updated>
    
    <content type="html"><![CDATA[<p>正常了一把，可惜没过了E<br><a id="more"></a></p><p>前两题也没啥好讲的，看代码就🆗</p><h2 id="1337A-Ichihime-and-Triangle"><a href="#1337A-Ichihime-and-Triangle" class="headerlink" title="1337A Ichihime and Triangle"></a>1337A Ichihime and Triangle</h2><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1337B-Kana-and-Dragon-Quest-game"><a href="#1337B-Kana-and-Dragon-Quest-game" class="headerlink" title="1337B Kana and Dragon Quest game"></a>1337B Kana and Dragon Quest game</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp;&amp; x &gt; <span class="number">20</span>) </span><br><span class="line">                --n, x = x / <span class="number">2</span> + <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (m) </span><br><span class="line">                --m, x -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336A-Linova-and-Kingdom"><a href="#1336A-Linova-and-Kingdom" class="headerlink" title="1336A Linova and Kingdom"></a>1336A Linova and Kingdom</h2><p>有一颗以$1$为根的树，把$k$个点涂成黑色，问每个黑色点到根的路径上白色点数量的和是多少。</p><p>如果一个点涂黑了，意味着这颗子树全部被涂黑了，那么讨论这个点（的子树除了自己全部涂色后）涂色对答案的贡献，即 $(dpt_i-1)sz_i-dpt_i(sz_i-1)$，排序后取前$n-k$大就是答案，$O(n\log n)$，题解提到如果用 $STL$ 的 $nth_element()$ 部分排序可以做到$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll cnt[N], dpt[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ps;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dpt[v] = dpt[u] + <span class="number">1</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        cnt[u] += cnt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    ++cnt[u];</span><br><span class="line">    ps.emplace_back(u, (dpt[u] - <span class="number">1</span>) * cnt[u] - dpt[u] * (cnt[u] - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dpt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    sort(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>(), [&amp;](pii a, pii b) &#123; <span class="keyword">return</span> a.second &gt; b.second; &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        ans += ps[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336B-Xenia-and-Colorful-Gems"><a href="#1336B-Xenia-and-Colorful-Gems" class="headerlink" title="1336B Xenia and Colorful Gems"></a>1336B Xenia and Colorful Gems</h2><p>有三种颜色的宝石，每个宝石都有权值，要求每个颜色的宝石取一个，问能取的最小的$(x-y)^2+(y-z)^2+(z-x)^2$是多少。</p><p>如果我们将取得得三个值排序，那么两边得数越接近中间的，答案就越小。因此枚举中间值，二分找另外两个数，$O(n\log n)$。</p><figure class="highlight reasonml"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const <span class="built_in">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">int</span> a<span class="literal">[<span class="number">3</span>]</span><span class="literal">[N]</span>, n<span class="literal">[<span class="number">3</span>]</span>;</span><br><span class="line"></span><br><span class="line">void calc(<span class="built_in">int</span> q, <span class="built_in">int</span> w, <span class="built_in">int</span> e) &#123;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n<span class="literal">[<span class="identifier">q</span>]</span>; ++i) &#123;</span><br><span class="line">        auto p2 = lower<span class="constructor">_bound(<span class="params">a</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">w</span>] + <span class="params">n</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">w</span>]</span>;</span><br><span class="line">        auto p3 = upper<span class="constructor">_bound(<span class="params">a</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">e</span>] + <span class="params">n</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">e</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span> (p3 != <span class="number">0</span>) --p3;</span><br><span class="line">        <span class="keyword">if</span> (p2<span class="operator"> == </span>n<span class="literal">[<span class="identifier">w</span>]</span>) --p2;</span><br><span class="line">        ll x = a<span class="literal">[<span class="identifier">q</span>]</span><span class="literal">[<span class="identifier">i</span>]</span>, y = a<span class="literal">[<span class="identifier">w</span>]</span><span class="literal">[<span class="identifier">p2</span>]</span>, z = a<span class="literal">[<span class="identifier">e</span>]</span><span class="literal">[<span class="identifier">p3</span>]</span>;</span><br><span class="line">        ans = min(ans, (x - y)<span class="operator"> * </span>(x - y) + (x - z)<span class="operator"> * </span>(x - z) + (y - z)<span class="operator"> * </span>(y - z));</span><br><span class="line">        p2 = upper<span class="constructor">_bound(<span class="params">a</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">w</span>] + <span class="params">n</span>[<span class="params">w</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">w</span>]</span>;</span><br><span class="line">        p3 = lower<span class="constructor">_bound(<span class="params">a</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">e</span>] + <span class="params">n</span>[<span class="params">e</span>], <span class="params">a</span>[<span class="params">q</span>][<span class="params">i</span>])</span> - a<span class="literal">[<span class="identifier">e</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span> (p2 != <span class="number">0</span>) --p2;</span><br><span class="line">        <span class="keyword">if</span> (p3<span class="operator"> == </span>n<span class="literal">[<span class="identifier">e</span>]</span>) --p3;</span><br><span class="line">        x = a<span class="literal">[<span class="identifier">q</span>]</span><span class="literal">[<span class="identifier">i</span>]</span>, y = a<span class="literal">[<span class="identifier">w</span>]</span><span class="literal">[<span class="identifier">p2</span>]</span>, z = a<span class="literal">[<span class="identifier">e</span>]</span><span class="literal">[<span class="identifier">p3</span>]</span>;</span><br><span class="line">        ans = min(ans, (x - y)<span class="operator"> * </span>(x - y) + (x - z)<span class="operator"> * </span>(x - z) + (y - z)<span class="operator"> * </span>(y - z));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; n<span class="literal">[<span class="number">0</span>]</span> &gt;&gt; n<span class="literal">[<span class="number">1</span>]</span> &gt;&gt; n<span class="literal">[<span class="number">2</span>]</span>;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; n<span class="literal">[<span class="identifier">i</span>]</span>; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; a<span class="literal">[<span class="identifier">i</span>]</span><span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(a<span class="literal">[<span class="identifier">i</span>]</span>, a<span class="literal">[<span class="identifier">i</span>]</span> + n<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = LLONG_MAX;</span><br><span class="line">        calc(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        calc(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        calc(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1336C-Kaavi-and-Magic-Spell"><a href="#1336C-Kaavi-and-Magic-Spell" class="headerlink" title="1336C Kaavi and Magic Spell"></a>1336C Kaavi and Magic Spell</h2><p>感觉挺开拓思维的一道题 <del>其实是我$dp$太差想不到</del><br>有两个字符串$s,t$和一个空串$a$，现在每次操作可以把$s$的首字母添加到$a$的头或尾，问在所有的操作序列中，产生的$a$以$t$为前缀个序列个数，具体题意请看<a href="https://codeforces.com/contest/1336/problem/C" target="_blank" rel="noopener">样例解释</a>吧。</p><p>正解是区间$dp$，设$dp[l][r]$为操作第$x$个字母后，与$t[l][r]$匹配的$a$的个数，那么：</p><ul><li>当枚举到第$x$个字母时，$r=l+x-1$；</li><li>当$s_x == t_l$时，也就是说可以从$dp[l+1][r]$转移到$dp[l][r]$；</li><li>当$s_x == t_r$时，也就是说可以从$dp[l][r-1]$转移到$dp[l][r]$；</li><li>对于上述的$l,r&gt;m$时，因为已经不会影响匹配，就可以直接转移；</li><li>当$x=1$时，需要从$dp[i][i-1]$转移一下，此时设为$1$即可；<br>答案即$\sum_{i=m}^n dp[1][i]$，$O(n^2)$</li></ul><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> n = s.length(), m = t.length();</span><br><span class="line">    s = <span class="string">' '</span> + s, t = <span class="string">' '</span> + t;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n + <span class="number">2</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        dp[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n - i + <span class="number">1</span>; ++l) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; m || s[i] == t[l]) dp[l][r] = (dp[l][r] + dp[l + <span class="number">1</span>][r]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; m || s[i] == t[r]) dp[l][r] = (dp[l][r] + dp[l][r - <span class="number">1</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans = (ans + dp[<span class="number">1</span>][i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常了一把，可惜没过了E&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 634 Div.3 题解</title>
    <link href="https://blog.wgree.site/3995717809/"/>
    <id>https://blog.wgree.site/3995717809/</id>
    <published>2020-04-14T03:17:56.000Z</published>
    <updated>2020-04-14T03:39:34.217Z</updated>
    
    <content type="html"><![CDATA[<p>前几题也没什么好讲的，只写了E、F的分析。</p><a id="more"></a><h2 id="1335A-Candies-and-Two-Sisters"><a href="#1335A-Candies-and-Two-Sisters" class="headerlink" title="1335A Candies and Two Sisters"></a>1335A Candies and Two Sisters</h2><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        n = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335B-Construct-the-String"><a href="#1335B-Construct-the-String" class="headerlink" title="1335B Construct the String"></a>1335B Construct the String</h2><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(i % b + <span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335C-Two-Teams-Composing"><a href="#1335C-Two-Teams-Composing" class="headerlink" title="1335C Two Teams Composing"></a>1335C Two Teams Composing</h2><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            ++mp[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : mp) &#123;</span><br><span class="line">            cnt.emplace_back(i.second, i.first);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt.back().first - <span class="number">1</span> &gt;= cnt.<span class="built_in">size</span>())</span><br><span class="line">            ans = cnt.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; !ans; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt.back().first &gt;= i ) &#123;</span><br><span class="line">                ans = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335D-Anti-Sudoku"><a href="#1335D-Anti-Sudoku" class="headerlink" title="1335D Anti-Sudoku"></a>1335D Anti-Sudoku</h2><p>题目的要求提示也比较明显，$9$行$9$列和$9$大方块对应一下。</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        s[<span class="number">0</span>][<span class="number">0</span>] = s[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                s[i * <span class="number">3</span> + j][j * <span class="number">3</span> + i] = s[i * <span class="number">3</span>][j * <span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335E-Three-Blocks-Palindrome-easy-amp-hard-version"><a href="#1335E-Three-Blocks-Palindrome-easy-amp-hard-version" class="headerlink" title="1335E Three Blocks Palindrome (easy &amp; hard version)"></a>1335E Three Blocks Palindrome (easy &amp; hard version)</h2><p>首先可以想到枚举两个颜色，咋一看好像复杂度是$200\times 200 \times 2e…^5$，但是实际上可以想到对于一个颜色作为两端来说，它确定左端长度，也就有唯一对应的右端，那么就是找中间段的某个颜色最多的个数，由于$\sum pos_i \leq 2e^5$，那么最多只有这么多$\div 2$个位置对，每个位置对再前缀和后暴力枚举众数，复杂度最多$O(2e^7)$。<br>$E1$可以通过暴力解决，具体的话我么想。</p><figure class="highlight inform7"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5 + 5;</span><br><span class="line"></span><br><span class="line">int a<span class="comment">[N]</span>, cnt<span class="comment">[N]</span><span class="comment">[200]</span>;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        int n, ans = 0;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; pos(201);</span><br><span class="line">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a<span class="comment">[i]</span>;</span><br><span class="line">            for (int j = 1; j &lt;= 200; ++j) &#123;</span><br><span class="line">                cnt<span class="comment">[i]</span><span class="comment">[j]</span> = cnt<span class="comment">[i - 1]</span><span class="comment">[j]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++cnt<span class="comment">[i]</span><span class="comment">[a<span class="comment">[i]</span>]</span>;</span><br><span class="line">            pos<span class="comment">[a<span class="comment">[i]</span>]</span>.emplace_back(i);</span><br><span class="line">            ans = max(ans, cnt<span class="comment">[i]</span><span class="comment">[a<span class="comment">[i]</span>]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= 200; ++i) &#123;</span><br><span class="line">            if (pos<span class="comment">[i]</span>.empty()) continue;</span><br><span class="line">            int l = 0, r = pos<span class="comment">[i]</span>.size() - 1;</span><br><span class="line">            for (;l &lt; pos<span class="comment">[i]</span>.size() &amp;&amp; l &lt; r; ++l) &#123;</span><br><span class="line">                while (cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[i]</span> &gt; cnt<span class="comment">[n]</span><span class="comment">[i]</span> - cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[r - 1]</span>]</span><span class="comment">[i]</span>) --r;</span><br><span class="line">                if (l &gt;= r) break;</span><br><span class="line">                for (int j = 1; j &lt;= 200; ++j) &#123;</span><br><span class="line">                    ans = max(ans, 2 * cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[i]</span> + cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[r]</span> - 1]</span><span class="comment">[j]</span> - cnt<span class="comment">[pos<span class="comment">[i]</span><span class="comment">[l]</span>]</span><span class="comment">[j]</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1335F-Robots-on-a-Grid"><a href="#1335F-Robots-on-a-Grid" class="headerlink" title="1335F Robots on a Grid"></a>1335F Robots on a Grid</h2><p>这个题解法还是挺明显的，因为某些路径一定会成环（否则机器人就不能无限走下去了），那么如果将矩阵转化为图后，每个连通块就是一个基环内向树，最多放机器人个数就是环长的和。最多在黑色格子的可以这样考虑：<br>如果环外的链上有若干黑色点，那么如果把这些链按方向合并到环上，最后环上有几个黑色点，就是最多的答案。<br>（自己写成码农了，后来跟jls学了波姿势，灰常清楚）</p><figure class="highlight pgsql"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q<span class="comment">--) &#123;</span></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        vector&lt;string&gt; g(n), col(n);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="keyword">to</span>(n * m), dgr(n * m);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; e(n * m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; col[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; g[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> xx = i, yy = j;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">'U'</span>) <span class="comment">--xx;</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">'D'</span>) ++xx;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">'L'</span>) <span class="comment">--yy;</span></span><br><span class="line">                <span class="keyword">else</span> ++yy;</span><br><span class="line">                <span class="keyword">to</span>[i * m + j] = xx * m + yy;</span><br><span class="line">                ++dgr[<span class="keyword">to</span>[i * m + j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; cut_chain = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            <span class="comment">--dgr[x];</span></span><br><span class="line">            e[<span class="keyword">to</span>[x]].emplace_back(x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="comment">--dgr[to[x]] == 0)</span></span><br><span class="line">                cut_chain(<span class="keyword">to</span>[x]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dgr[i])</span><br><span class="line">                cut_chain(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dgr[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="keyword">to</span>[i]; j != i; j = <span class="keyword">to</span>[j]) &#123;</span><br><span class="line">                    e[<span class="keyword">to</span>[j]].emplace_back(j);</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">                ans1 += cnt;</span><br><span class="line">                vector&lt;<span class="type">bool</span>&gt; cc(cnt);</span><br><span class="line">                <span class="keyword">function</span>&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> dpt) &#123;</span><br><span class="line">                    dgr[u] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (col[u / m][u % m] == <span class="string">'0'</span>) cc[dpt % cnt] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> v : e[u])</span><br><span class="line">                        dfs(v, dpt + <span class="number">1</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">                dfs(i, <span class="number">0</span>);</span><br><span class="line">                ans2 += count(cc.<span class="keyword">begin</span>(), cc.<span class="keyword">end</span>(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans1 &lt;&lt; <span class="string">' '</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几题也没什么好讲的，只写了E、F的分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div3" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div3/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div3" scheme="https://blog.wgree.site/tags/div3/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 85 题解</title>
    <link href="https://blog.wgree.site/1577963147/"/>
    <id>https://blog.wgree.site/1577963147/</id>
    <published>2020-04-12T16:24:51.000Z</published>
    <updated>2020-04-12T16:43:05.881Z</updated>
    
    <content type="html"><![CDATA[<p>本来想补了后面题再写的，不过这几天好像事有点多<br><a id="more"></a></p><h2 id="1334A-Level-Statistics"><a href="#1334A-Level-Statistics" class="headerlink" title="1334A Level Statistics"></a>1334A Level Statistics</h2><p>有个关卡，给出每天$a-$挑战的人次，$b-$通关的人次，问一个序列是否满足逻辑。</p><p>就和现实一样，判断$a,b$关系和上一轮关系，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, n, ta, tb, f = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        --n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; b) f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ta &gt;&gt; tb;</span><br><span class="line">            <span class="keyword">if</span> (ta &lt; tb) f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; ta || b &gt; tb) f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (tb - b &gt; ta - a) f = <span class="number">0</span>;</span><br><span class="line">            a = ta, b = tb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334B-Middle-Class"><a href="#1334B-Middle-Class" class="headerlink" title="1334B Middle Class"></a>1334B Middle Class</h2><p>有一些数字，可以选择一些数，把他们变成和额度平均值，问最多能让多少个数$\geq x$。</p><p>排序后从大到小贪心，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, x, num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= x) sum += t, ++num;</span><br><span class="line">            <span class="keyword">else</span> a.emplace_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span> (!a.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sum + a.back()) / x &lt; num + <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            sum += a.back();</span><br><span class="line">            a.pop_back();</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334C-Circle-of-Monsters"><a href="#1334C-Circle-of-Monsters" class="headerlink" title="1334C Circle of Monsters"></a>1334C Circle of Monsters</h2><p>有一些怪在一个环上，开一枪可以让一个怪血量$-1$，一个怪死后会对背后的怪溅射伤害，如果背后的怪已经死了则无影响。问最少开几枪打死全部怪。</p><p>因为在打死一个怪以后，环就变成了链，那么开枪的顺序就固定下来了，因此枚举第一个打死哪个怪即可，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[N], b[N], ss[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">            ss[i] = <span class="built_in">max</span>(<span class="number">0l</span>l, a[i] - b[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ss[<span class="number">1</span>] = <span class="built_in">max</span>(<span class="number">0l</span>l, a[<span class="number">1</span>] - b[n]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            sum += ss[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = INF64;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, sum - ss[i] + a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334D-Minimum-Euler-Cycle"><a href="#1334D-Minimum-Euler-Cycle" class="headerlink" title="1334D Minimum Euler Cycle"></a>1334D Minimum Euler Cycle</h2><p>一个有向的完全图，按字典序最小的方式走出欧拉环，然后问第$l\sims r$的数字是哪些。</p><p>这个顺序只要画画能发现，即$1,2,1,3,1,4…1,x,2,3,2,4…2,x,3,4……$，所以预处理下每一段长度再计算一下即可，$(r-l)$。</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; cnt[n]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ptr = lower_bound(cnt, cnt + n, x) - cnt;</span><br><span class="line">    <span class="keyword">int</span> t = x - cnt[ptr - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>) <span class="keyword">return</span> ptr;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> t / <span class="number">2</span> + ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        ll l, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cnt[i] = cnt[i - <span class="number">1</span>] + <span class="number">2</span> * (n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; calc(i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1334E-Divisor-Paths"><a href="#1334E-Divisor-Paths" class="headerlink" title="1334E Divisor Paths"></a>1334E Divisor Paths</h2><p>过阵子必补</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来想补了后面题再写的，不过这几天好像事有点多&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/edu/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 633 Div.2 题解</title>
    <link href="https://blog.wgree.site/1196325615/"/>
    <id>https://blog.wgree.site/1196325615/</id>
    <published>2020-04-12T15:57:27.000Z</published>
    <updated>2020-04-12T16:21:50.994Z</updated>
    
    <content type="html"><![CDATA[<p>照例<br><a id="more"></a></p><h2 id="1339A-Filling-Diamonds"><a href="#1339A-Filling-Diamonds" class="headerlink" title="1339A Filling Diamonds"></a>1339A Filling Diamonds</h2><p>这样的<a href="https://espresso.codeforces.com/253cb03aef62ea2260f28f431e7e51c962b79f23.png" target="_blank" rel="noopener">图形</a>，用$n=1$的子图形去<a href="https://espresso.codeforces.com/e72f8c635d8dc8aff12edac5df922a9410645cbb.png" target="_blank" rel="noopener">这样填</a>，问有几种填法。</p><p>由于必有且仅有一个竖的，那么答案就是$n$，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1339B-Sorted-Adjacent-Differences"><a href="#1339B-Sorted-Adjacent-Differences" class="headerlink" title="1339B Sorted Adjacent Differences"></a>1339B Sorted Adjacent Differences</h2><p>有一个序列，要求重排后，$|a_i-a_{i-1}|\leq |a_i-a_{i+1}|$，给出方案。</p><p>从小到大排序后从两端向中间取，差的绝对值一定越来越小，再反向输出，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            ans.emplace_back(a[l++]);</span><br><span class="line">            ans.emplace_back(a[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l == r) ans.emplace_back(a[l]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1338A-Powered-Addition"><a href="#1338A-Powered-Addition" class="headerlink" title="1338A Powered Addition"></a>1338A Powered Addition</h2><p>有一个序列，在第$x$次操作可以选一些数给它$+=2^{x-1}$，问最少到第几次操作结束后序列可以变为非减的。</p><p>最后的序列一定是阶梯状的，那么就是找前面的最大值和后面较小值的最大的差，答案就是差的二进制位数，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        ll mx = <span class="number">-1e9</span>, mxx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (ll &amp;i : a) <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, a[i]);</span><br><span class="line">            mxx = <span class="built_in">max</span>(mxx, mx - a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mxx &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">                ans = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1338B-Edge-Weight-Assignment"><a href="#1338B-Edge-Weight-Assignment" class="headerlink" title="1338B Edge Weight Assignment"></a>1338B Edge Weight Assignment</h2><p>有一颗树，边有边权，要求叶子到叶子的路径权值异或和为$0$，问最少用几种数字和最多用几种。</p><ul><li>最少的答案可以很明显想到和叶子间的路径长度奇偶性有关，如果距离都是偶数，那么用一样的数就可以了；那么如果有一个或以上的奇数呢，首先一定会有偶数的距离（或只有一条奇数长度链），那么用$1,2,3$，将$1$放在偶数那些叶子那条边上，剩下用其他的填，一定有方案。</li><li>最多答案的话，答案最多是总边数，而且可以发现如果有距离为$2$的叶子对的话，这两边必须相同，手写一下好像其他一定有方案（其实不会证，看官方题解叭）。<br>$O(n)$（莽了一发过了。。。）</li></ul><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> has[N][<span class="number">2</span>], f;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g[u].<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        has[u][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        has[u][<span class="number">1</span>] |= has[v][<span class="number">0</span>];</span><br><span class="line">        has[u][<span class="number">0</span>] |= has[v][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (has[u][<span class="number">0</span>] &amp;&amp; has[u][<span class="number">1</span>]) f = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : g[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[v].<span class="built_in">size</span>() == <span class="number">1</span>) ++t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (g[i].<span class="built_in">size</span>() &gt; <span class="number">1</span>) rt = i;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) ans += t;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt);</span><br><span class="line"></span><br><span class="line">    ans = n - <span class="number">1</span> - ans;</span><br><span class="line">    <span class="keyword">if</span> (f) <span class="built_in">cout</span> &lt;&lt; <span class="string">"3 "</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照例&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 632 Div.2 题解</title>
    <link href="https://blog.wgree.site/3661732761/"/>
    <id>https://blog.wgree.site/3661732761/</id>
    <published>2020-04-09T05:11:19.000Z</published>
    <updated>2020-04-09T06:08:41.655Z</updated>
    
    <content type="html"><![CDATA[<p>没想清就写-&gt;细节爆炸<br><a id="more"></a></p><h2 id="1333A-Little-Artem"><a href="#1333A-Little-Artem" class="headerlink" title="1333A Little Artem"></a>1333A Little Artem</h2><p>记$W$为相邻至少有一个黑格的白格数，$B$为相邻至少有一个白格的黑格数，给出一种涂色使$B=W+1$成立。</p><p>就是交叉放，分个小类讨论下，$O(nm)$。<br>一看觉得很简单，决定手模，然后 （+1）</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (n * m &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BW"</span>[(i + j) &amp; <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"WB"</span>[(i + j) &amp; <span class="number">1</span> | (i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333B-Kind-Anton"><a href="#1333B-Kind-Anton" class="headerlink" title="1333B Kind Anton"></a>1333B Kind Anton</h2><p>一个仅有$0,-1,1$构成的序列$a$，现在可以把前面的一个数加到这个数上，问能不能通过若干次这样的操作得到序列$b$。</p><p>就是看前面有没有$+1，-1$，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], has[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            has[i][<span class="number">0</span>] = has[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            has[i][<span class="number">1</span>] = has[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) has[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) has[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i] == a[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b[i] &lt; a[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!has[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                    f = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!has[i - <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                f = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333C-Eugene-and-an-array"><a href="#1333C-Eugene-and-an-array" class="headerlink" title="1333C Eugene and an array"></a>1333C Eugene and an array</h2><p>有一个序列，求有多少个子段，它的子段内没有求合为$0$的段。</p><p>从前往后枚举$r$也就是右边界，找到最右的左边界$l$，使得$\sum_{j=l}^{r}a_j = 0$,可以通过前缀和找。<br>那么这样可以得到很多对$(l,r)$，左右任选都是不合法的答案，也就是$l\times (n-l+1)$。很明显这样有重复，因此稍微（+4，写到最后发现一开始斥飞了）容斥一下。<br>可以发现多算的部分就是$min(l_i,l-j)\times (n +1 -max(r_i,r_j))$，那么按$r$排序，每次保留最右的$l$的答案就好了，具体看代码吧，$O(n\log n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, f = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">map</span>&lt;ll, ll&gt; mp;</span><br><span class="line">    ll pre = <span class="number">0</span>, ans = <span class="number">0</span>, l = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        pre += t;</span><br><span class="line">        <span class="keyword">if</span> (mp.count(pre)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[pre] + <span class="number">1</span> &gt;= l) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f) ans -= <span class="built_in">min</span>(mp[pre] + <span class="number">1</span>, l) * (n - i + <span class="number">1</span>);</span><br><span class="line">                l = mp[pre] + <span class="number">1</span>;</span><br><span class="line">                ans += l * (n - i + <span class="number">1</span>);</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[pre] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ll(n + <span class="number">1</span>) * n / <span class="number">2</span> - ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333D-Challenges-in-school-№41"><a href="#1333D-Challenges-in-school-№41" class="headerlink" title="1333D Challenges in school №41"></a>1333D Challenges in school №41</h2><p>有一堆小孩在一列，向左或向右看，每次可以操作一对相互看的小孩反向，问能否精确$k$轮使得没有一对小孩可以继续操作。</p><p>因为题目保证答案存在就一定在$n^2$内，那么就可以暴力预处理，每轮把可以操作的位置都操作，到最后一定在$n^2$内结束。<br>然后就变成了构造题，一共操作$mx$个位置，最少操作$cnt$轮，那么此外的$k$都是无法构造出来的，从尾开始“伸展”是一种比较简单的写法（我自己的写法+3…）。</p><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> &amp;t : c) <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="string">'R'</span> &amp;&amp; c[i + <span class="number">1</span>] == <span class="string">'L'</span>) &#123;</span><br><span class="line">                ans[cnt].emplace_back(i + <span class="number">1</span>);</span><br><span class="line">                swap(c[i], c[i + <span class="number">1</span>]);</span><br><span class="line">                ++i; ++mx; f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!f) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mx &lt; k || k &lt; cnt) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        --cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[cnt].empty()) --cnt;</span><br><span class="line">            <span class="keyword">if</span> (i == cnt) <span class="keyword">break</span>;</span><br><span class="line">            ans[i] = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;ans[cnt].back()&#125;;</span><br><span class="line">            ans[cnt].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i].<span class="built_in">size</span>() &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;j : ans[i]) </span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333E-Road-to-1600"><a href="#1333E-Road-to-1600" class="headerlink" title="1333E Road to 1600"></a>1333E Road to 1600</h2><p>国际象棋车走四个方向，后走八个方向，对于一个棋盘，每次都走可达位置中权值最小的点，如果没位置可走就要花一代价跳跃至权值最小点，要求构造一个$n\times n$的矩阵，使得后走完所有点的代价比车大。</p><p>可以通过先构造一个小的矩阵使得 后的代价$&gt;$车的代价，然后剩下的构造一条路使得二车代价一样即可，$O(nm)$。<br>这里构造的是：</p><script type="math/tex; mode=display">\begin{matrix} 8&5&1 \\ 7&4&9 \\ 6&3&2 \end{matrix}</script><figure class="highlight lsl"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    if (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">vector</span>&lt;<span class="type">vector</span>&lt;int&gt;&gt; ans(n + <span class="number">1</span>, <span class="type">vector</span>&lt;int&gt; (n + <span class="number">1</span>));</span><br><span class="line">    int cnt = n * n;</span><br><span class="line">    ans[<span class="number">2</span>][<span class="number">3</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">1</span>] = cnt--; ans[<span class="number">2</span>][<span class="number">1</span>] = cnt--;</span><br><span class="line">    ans[<span class="number">3</span>][<span class="number">1</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">2</span>] = cnt--; ans[<span class="number">2</span>][<span class="number">2</span>] = cnt--;</span><br><span class="line">    ans[<span class="number">3</span>][<span class="number">2</span>] = cnt--; ans[<span class="number">3</span>][<span class="number">3</span>] = cnt--; ans[<span class="number">1</span>][<span class="number">3</span>] = cnt--;</span><br><span class="line">    for (int i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        if (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            for (int j = <span class="number">1</span>; j &lt;= i; ++j) ans[j][i] = cnt--;</span><br><span class="line">            for (int j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) ans[i][j] = cnt--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int j = <span class="number">1</span>; j &lt;= i; ++j) ans[i][j] = cnt--;</span><br><span class="line">            for (int j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) ans[j][i] = cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        for (int j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; ' ';</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1333F-Kate-and-imperfection"><a href="#1333F-Kate-and-imperfection" class="headerlink" title="1333F Kate and imperfection"></a>1333F Kate and imperfection</h2><p>对于$1…n$个数，选择一个子序列，他的权值为序列里最大的$gcd(i,j),(i!=j)$，现在问子序列长度从$2…n$的全部答案。</p><p>很明显和质数有点关系</p><ul><li>如果答案是$1$的话，那么所有的数都必须是互质的，这样一直选$1$和质数是最多的；</li><li>如果是$2$的话，那么最多选$1$和质数和$4$；</li><li>如果是$3$的话，那么最多选$1$和质数和$4$，以及$6,9$；</li><li>也就是说，对于答案为$x$，那么序列最长长度和$x$以及$\leq x$的质数有关。<br>那么就可以操作了，直接按下面代码贪就好了，$O(n\log n)$</li></ul><figure class="highlight arduino"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt;= n; j += i)</span><br><span class="line">            a[j] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没想清就写-&amp;gt;细节爆炸&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 631 Div.2 题解</title>
    <link href="https://blog.wgree.site/2787163714/"/>
    <id>https://blog.wgree.site/2787163714/</id>
    <published>2020-04-04T09:12:08.000Z</published>
    <updated>2020-04-04T10:00:19.612Z</updated>
    
    <content type="html"><![CDATA[<p>场上可能忘记带🧠了<br><a id="more"></a></p><h2 id="1330A-Dreamoon-and-Ranking-Collection"><a href="#1330A-Dreamoon-and-Ranking-Collection" class="headerlink" title="1330A Dreamoon and Ranking Collection"></a>1330A Dreamoon and Ranking Collection</h2><p>一列$[1,100]$的数，可以向其补$x$个数，问从$[1,k]$都出现过打的最大的$k$是多少。</p><p>前缀和找一下最大的$k - cnt[k] = x$，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">205</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            a[t] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i) &#123;</span><br><span class="line">            a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i - a[i] == x) ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1330B-Dreamoon-Likes-Permutations"><a href="#1330B-Dreamoon-Likes-Permutations" class="headerlink" title="1330B Dreamoon Likes Permutations"></a>1330B Dreamoon Likes Permutations</h2><p>现在有个序列$a$，问把$a$分为两段，且两段都是排列的方案数。</p><p>分别记一下每个位置从头从尾的方向是否是排列，然后枚举分界点。<br>$O(n\log n)$（我这里用了线段树判断是否是排列，应该有别的做法）</p><figure class="highlight excel"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">namespace data_struct &#123;</span><br><span class="line">    class segment_tree &#123;</span><br><span class="line">#define nd node[<span class="built_in">now</span>]</span><br><span class="line">#define ndl node[<span class="built_in">now</span> &lt;&lt; <span class="number">1</span>]</span><br><span class="line">#define ndr node[<span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]</span><br><span class="line">#define <span class="built_in">mid</span> ((nd.l + nd.r) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    publ<span class="symbol">ic:</span></span><br><span class="line">        struct segment_node &#123;</span><br><span class="line">            <span class="built_in">int</span> l, r, val;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> nn;</span><br><span class="line">        vector&lt;segment_node&gt; node;</span><br><span class="line"></span><br><span class="line">        void pushup(<span class="built_in">int</span> <span class="built_in">now</span>) &#123;</span><br><span class="line">            nd.val = ndl.val + ndr.val;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        void build(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            nd.l = s, nd.r = <span class="built_in">t</span>;</span><br><span class="line">            <span class="built_in">if</span> (s == <span class="built_in">t</span>) &#123;</span><br><span class="line">                nd.val = <span class="number">0</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            build(s, (s + <span class="built_in">t</span>) &gt;&gt; <span class="number">1</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            build(((s + <span class="built_in">t</span>) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            pushup(<span class="built_in">now</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void update(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> x, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= nd.l &amp;&amp; <span class="built_in">t</span> &gt;= nd.r) &#123;</span><br><span class="line">                nd.val |= <span class="number">1</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= <span class="built_in">mid</span>)</span><br><span class="line">                update(s, <span class="built_in">t</span>, x, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (<span class="built_in">t</span> &gt; <span class="built_in">mid</span>)</span><br><span class="line">                update(s, <span class="built_in">t</span>, x, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            pushup(<span class="built_in">now</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> query(<span class="built_in">int</span> s, <span class="built_in">int</span> <span class="built_in">t</span>, <span class="built_in">int</span> <span class="built_in">now</span> = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= nd.l &amp;&amp; <span class="built_in">t</span> &gt;= nd.r) &#123;</span><br><span class="line">                return nd.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">if</span> (s &lt;= <span class="built_in">mid</span>) &#123;</span><br><span class="line">                ret += query(s, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">if</span> (<span class="built_in">t</span> &gt; <span class="built_in">mid</span>) &#123;</span><br><span class="line">                ret += query(s, <span class="built_in">t</span>, <span class="built_in">now</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            return ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void init(<span class="built_in">int</span> nnn) &#123;</span><br><span class="line">            nn = nnn;</span><br><span class="line">            node.resize(nn &lt;&lt; <span class="number">2</span> | <span class="number">3</span>);</span><br><span class="line">            build(<span class="number">1</span>, nn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; tree;</span><br><span class="line">&#125;</span><br><span class="line">using namespace data_struct;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">        cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line"></span><br><span class="line">        tree.init(<span class="built_in">n</span>);</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; a(<span class="built_in">n</span> + <span class="number">5</span>), pre(<span class="built_in">n</span> + <span class="number">5</span>), suf(<span class="built_in">n</span> + <span class="number">5</span>);</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            tree.update(a[i], a[i], <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (tree.query(<span class="number">1</span>, i) == i)</span><br><span class="line">                pre[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tree.init(<span class="built_in">n</span>);</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="built_in">n</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            tree.update(a[i], a[i], <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">if</span> (tree.query(<span class="number">1</span>, <span class="built_in">n</span> - i + <span class="number">1</span>) == <span class="built_in">n</span> - i + <span class="number">1</span>)</span><br><span class="line">                suf[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;pii&gt; ans;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">if</span> (pre[i] &amp;&amp; suf[i + <span class="number">1</span>])</span><br><span class="line">                ans.emplace_back(i, <span class="built_in">n</span> - i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans.size() &lt;&lt; endl;</span><br><span class="line">        for (pii i <span class="symbol">:</span> ans)</span><br><span class="line">            cout &lt;&lt; i.first &lt;&lt; ' ' &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329A-Dreamoon-Likes-Coloring"><a href="#1329A-Dreamoon-Likes-Coloring" class="headerlink" title="1329A Dreamoon Likes Coloring"></a>1329A Dreamoon Likes Coloring</h2><p>有$n$个位置，$m$个颜色，每个颜色涂长$l_i$的段，问能否让每个格子都被涂色，且最终每个颜色至少留下一格。</p><p>因为每个颜色只涂一次，那么从右涂，下一次涂色覆盖它的一部分，仅留下右端点，如果剩余的长度$\geq$当前段长度，就能保证每个颜色出现一次。如果有格子没涂，只需要将后涂的颜色从左涂就行，$O(m)$。</p><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, nn;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    nn = n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l[i];</span><br><span class="line">        sum += l[i];</span><br><span class="line">        <span class="keyword">if</span> (l[i] &gt; n) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.emplace_back(n - l[i] + <span class="number">1</span>);</span><br><span class="line">        --n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; nn) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.back() != <span class="number">1</span>) &#123;</span><br><span class="line">        ans.back() = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i] + l[i] &lt; ans[i - <span class="number">1</span>])</span><br><span class="line">                ans[i - <span class="number">1</span>] = ans[i] + l[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : ans) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329B-Dreamoon-Likes-Sequences"><a href="#1329B-Dreamoon-Likes-Sequences" class="headerlink" title="1329B Dreamoon Likes Sequences"></a>1329B Dreamoon Likes Sequences</h2><p>有一个上界$d$，一个任意长度的序列如果$a_i\leq d$，且$\oplus_{j=1}^{i-1} a_i&lt; \oplus_{j=1}^i a_i, i\in [1,n]$即合法，求能构造的合法序列数量。</p><p>关键在于异或是不进位的加法，那么新加入的数必定要比前一个数的二进制第一个有效位靠前，所有按每个数二进制最高位分组统计个数$(cnt[i])$，然后设&amp;dp[i]&amp;表示序列最长长度为$i$时的答案，转移方程为：</p><script type="math/tex; mode=display">dp[i] = (dp[i - 1] + 1) * cnt[i - 1]</script><p>因为前一组的答案都可以再添加一个当前组的数字，也可以只选当前组的数字，所以是$dp[i - 1] + 1$，$O(32)$。</p><figure class="highlight lsl"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int q, m, n;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    while (q--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="type">vector</span>&lt;int&gt; dp(<span class="number">35</span>), cnt(<span class="number">35</span>);</span><br><span class="line">        for (int i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; <span class="number">31</span>; ++i) &#123;</span><br><span class="line">            cnt[i] = (min(n, (j &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>) + <span class="number">1</span> - j) % m;</span><br><span class="line">            if (cnt[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cnt[i] = <span class="number">0</span>;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = <span class="number">1</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">            dp[i] = (ll(dp[i - <span class="number">1</span>] + <span class="number">1</span>) * cnt[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>]) % m;</span><br><span class="line">        cout &lt;&lt; dp[<span class="number">31</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1329C-Drazil-Likes-Heap"><a href="#1329C-Drazil-Likes-Heap" class="headerlink" title="1329C Drazil Likes Heap"></a>1329C Drazil Likes Heap</h2><p>有一个满二叉树形式的高$h$的堆，现在可以选择一个位置，将这个位置值变成大儿子的值，然后再递归操作自己的大儿子，问如何操作让堆变成满二叉树且树高为$g$的形式，且权值最小的方案。<br>（上面说的操作相当于选一个点删除，递归的把大儿子移上来）</p><p>因为大顶堆，所以每次从上层操作收益一定是最大的。而当我们选定一个点后，如果操作，那么它的路径是唯一的。因此我们从树顶开始枚举，能删就删。判断是否可以删除，只需要看最终影响的叶子节点的高度，详细可以看代码。$O(2^gh)$</p><figure class="highlight arduino"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h, g;</span><br><span class="line"><span class="keyword">int</span> a[sz &lt;&lt; <span class="number">1</span>], hit[sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l (u &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r l + 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> uu = u;</span><br><span class="line">    hit[u] = hit[u &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[l] &gt; a[r]) u = l;</span><br><span class="line">        <span class="keyword">else</span> u = r;</span><br><span class="line">        hit[u] = hit[u &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hit[u] &gt; g) &#123;</span><br><span class="line">        u = uu;</span><br><span class="line">        <span class="keyword">while</span> (a[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[l] &gt; a[r]) a[u] = a[l], u = l;</span><br><span class="line">            <span class="keyword">else</span> a[u] = a[r], u = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; h &gt;&gt; g;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; h); ++i)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; h; i &lt; (<span class="number">2</span> &lt;&lt; h); ++i)</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        hit[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        ans.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; g); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (check(i))</span><br><span class="line">                ans.emplace_back(i);</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : ans) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（下一题太难了，所以结束了）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场上可能忘记带🧠了&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 79 题解</title>
    <link href="https://blog.wgree.site/3592098837/"/>
    <id>https://blog.wgree.site/3592098837/</id>
    <published>2020-04-03T12:02:13.000Z</published>
    <updated>2020-04-04T16:44:38.889Z</updated>
    
    <content type="html"><![CDATA[<p>VP了一场<br><a id="more"></a></p><h2 id="1279A-New-Year-Garland"><a href="#1279A-New-Year-Garland" class="headerlink" title="1279A New Year Garland"></a>1279A New Year Garland</h2><p>有三种东西，分别$a,b,c$个，问能不能组成相同物品不相邻的一列。</p><p>挑最大的把其他插到最大的间隔里就行，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">        sort(a, a + <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] + a[<span class="number">1</span>] &lt; a[<span class="number">2</span>] - <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279B-Verse-For-Santa"><a href="#1279B-Verse-For-Santa" class="headerlink" title="1279B Verse For Santa"></a>1279B Verse For Santa</h2><p>有$n$个物品，各自有长度，依次的放在长$s$内，现在可以省略一个，问最多放几个。</p><p>贪心比较，如果有必要省略必定省去最长的，否则不省略，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll sum = <span class="number">0</span>, la = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (la &lt; a[i]) &#123;</span><br><span class="line">                sum += la;</span><br><span class="line">                la = a[i];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> sum += a[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; k) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k - sum &gt;= la) ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279C-Stack-of-Presents"><a href="#1279C-Stack-of-Presents" class="headerlink" title="1279C Stack of Presents"></a>1279C Stack of Presents</h2><p>有一个长$n$的排列，从右到左压到栈里，现在要取出$m$个数，如果这个数上面有$k$个数，需要花$2k+1$秒，但在放回$k$个数时，可以按任意顺序放回，问取出$m$个数的最小耗时。</p><p>在取出一个较深的数的时候，前面的数我们可以按照被取的顺序，倒序放回，这样取它的时候就会在栈顶。那么维护一个最深操作的深度，在操作比这个位置深得数的代价就是$2k+1$，否则代价是$1$，$O(n+m)$</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, la = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            pos[t] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            <span class="keyword">if</span> (pos[t] &lt; la) ++ans;</span><br><span class="line">            <span class="keyword">else</span> ans += <span class="number">2</span> * (pos[t] - i) + <span class="number">1</span>;</span><br><span class="line">            la = <span class="built_in">max</span>(la, pos[t]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279D-Santa’s-Bot"><a href="#1279D-Santa’s-Bot" class="headerlink" title="1279D Santa’s Bot"></a>1279D Santa’s Bot</h2><p>圣诞老人用机器人发礼物，有$n$个小孩，每个小孩有$k_i$个愿望。但是机器人会随机的选一个小孩$x$，再随机选他的一个愿望$y$，再随机发给某个小孩$z$，假如$y$确实是$z$的愿望之一，那么这样的一个三元组$(x,y,z)$就是正确的，问机器人选出正确三元组的概率。</p><p>因为愿望最多不超过$10^6$，所有我们枚举愿望。选中一个孩子的概率是$\frac 1n$，选他的一个愿望被选中的概率是$\frac 1{k_i}$，统计想要这个礼物的孩子个数$cnt[j]$，那么发送正确的概率是$\frac {cnt[j]}n$，因为每个情况独立，可以相加，$O(\sum k_i)$。</p><figure class="highlight excel"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">mod</span> = <span class="number">998244353</span>;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">1</span>e6 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; gift[<span class="built_in">N</span>];</span><br><span class="line">ll cnt[<span class="built_in">N</span>], inv[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line">void init() &#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1</span>e6; ++i) &#123;</span><br><span class="line">        inv[i] = (<span class="built_in">mod</span> - <span class="built_in">mod</span> / i) * inv[<span class="built_in">mod</span> % i] % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">t</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; <span class="built_in">t</span>;</span><br><span class="line">        gift[i].resize(<span class="built_in">t</span>);</span><br><span class="line">        for (<span class="built_in">int</span> &amp;j <span class="symbol">:</span> gift[i]) &#123;</span><br><span class="line">            cin &gt;&gt; j;</span><br><span class="line">            ++cnt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        for (<span class="built_in">int</span> j <span class="symbol">:</span> gift[i]) tmp += cnt[j];</span><br><span class="line">        ans = (ans + inv[gift[i].size()] * tmp % <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * inv[<span class="built_in">n</span>] % <span class="built_in">mod</span> * inv[<span class="built_in">n</span>] % <span class="built_in">mod</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279E-New-Year-Permutations"><a href="#1279E-New-Year-Permutations" class="headerlink" title="1279E New Year Permutations"></a>1279E New Year Permutations</h2><p>题意比较难描述，建议看<a href="https://codeforces.com/contest/1279/problem/E" target="_blank" rel="noopener">原文</a>/翻译</p><p>首先考虑一个长$n$的大环有多少排列，因为$n$一定是开头，$1$一定是$n$的前驱，之后剩下的$n-2$个点可以任意排，即$(n-2)!$。现在设$dp[i]$表示长为$i$的串有多少种合法排列，转移方程即：</p><script type="math/tex; mode=display">dp[i] = \sum_{j=0}^{i-1}dp[j](i-j-2)!</script><p>然后我们可以通过从字典序由小到大枚举，得到第$k$大的排列由哪些长度小序列组成。根据这一步得到的结果，问题被分解成了长为$l$的环，$l$位置固定，$1$固定是$l$前驱，字典序的第$x$个环是哪个（在按位枚举字典序的时候其实就是空闲位的阶乘，枚举的过程中要保证不能形成小环，即长度必须是上一步算出的结果）,那么拼起来就可以得到最终答案，$O(n^2)$</p><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">55</span>], fa[<span class="number">55</span>], vis[<span class="number">55</span>];</span><br><span class="line">ll dp[<span class="number">55</span>], fac[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    x -= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &lt;= <span class="number">50</span>; ++i)</span><br><span class="line">        fac[i] = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">22</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            dp[i] += dp[j] * calc(i - j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">22</span>; i &lt;= <span class="number">50</span>; ++i) &#123;</span><br><span class="line">        dp[i] = <span class="number">1e18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != fa[x])</span><br><span class="line">        <span class="keyword">return</span> fa[x] = fi(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permute</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, ll rk)</span> </span>&#123;</span><br><span class="line">    ans[l] = r;</span><br><span class="line">    vis[r] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = r - l - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt;= r; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == r &amp;&amp; !vis[j]) &#123;</span><br><span class="line">                ans[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (vis[j] || fi(i) == fi(j)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (fac[x] &gt;= rk) &#123;</span><br><span class="line">                --x;</span><br><span class="line">                ans[i] = vis[j] = j;</span><br><span class="line">                fa[fi(j)] = fi(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                rk -= fac[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        ll k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; dp[n]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (r = l; r &lt;= n; ++r) &#123;</span><br><span class="line">                ll term = calc(r - l + <span class="number">1</span>) * dp[n - r];</span><br><span class="line">                <span class="keyword">if</span> (term &gt;= k)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k -= term;</span><br><span class="line">            &#125;</span><br><span class="line">            ll rk = (k - <span class="number">1</span>) / dp[n - r] + <span class="number">1</span>;</span><br><span class="line">            k = (k - <span class="number">1</span>) % dp[n - r] + <span class="number">1</span>;</span><br><span class="line">            permute(l, r, rk);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1279F-New-Year-and-Handle-Change"><a href="#1279F-New-Year-and-Handle-Change" class="headerlink" title="1279F New Year and Handle Change"></a>1279F New Year and Handle Change</h2><p>有一个字符串，含有大小写字母，每次操作可以把长为$l$的一段字母全变成大写或小写，问最后能得到的$min$（大写字母，小写字母）的值。</p><p>挂个链，有缘回来看。<a href="https://twifor.github.io/2020/01/29/Educational-Codeforces-Round-79/" target="_blank" rel="noopener">题解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VP了一场&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/edu/"/>
    
    
      <category term="codeforces" scheme="https://blog.wgree.site/tags/codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 630 Div.2 题解</title>
    <link href="https://blog.wgree.site/1747842812/"/>
    <id>https://blog.wgree.site/1747842812/</id>
    <published>2020-04-02T11:34:10.000Z</published>
    <updated>2020-04-02T12:58:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>忘记比赛时间了…<br><a id="more"></a></p><h2 id="1332A-Exercising-Walk"><a href="#1332A-Exercising-Walk" class="headerlink" title="1332A Exercising Walk"></a>1332A Exercising Walk</h2><p>有一个机器人开始位于$(x,y)$，现在要求上下左右分别走$a,b,c,d$步，要求路径在$(x1,y1),(x2,y2)$为对角的矩形范围内，问是否可行。</p><p>横竖可以分别考虑，如果最终点在限制范围内，一定可以有满足条件的路，但当给的矩形长或宽为$1$的时候要特判，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d, x, y, x1, y1, x2, y2, f = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d</span><br><span class="line">            &gt;&gt; x &gt;&gt; y &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="keyword">if</span> ((x1 == x2) &amp;&amp; (a || b))</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((y1 == y2) &amp;&amp; (c || d))</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        b -= a, d -= c;</span><br><span class="line">        <span class="keyword">if</span> (b + x &lt; x1 || b + x &gt; x2)</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (d + y &lt; y1 || d + y &gt; y2)</span><br><span class="line">            f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (f)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332B-Composite-Coloring"><a href="#1332B-Composite-Coloring" class="headerlink" title="1332B Composite Coloring"></a>1332B Composite Coloring</h2><p>有$n$个$\le 1000$的数，要求涂色相同的数字不互质，最多$11$种颜色，问一种合法的涂色方案。</p><p>读反要求了，刚了好一会。。只要按最小质因子涂色就行，因为第$11$个因子是$31$，那么比它大的合数一定在这$11$个质数内有质因子，$O(n^2)$。</p><figure class="highlight properties"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attr">using</span> <span class="string">namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">int</span> <span class="string">main() &#123;</span></span><br><span class="line">    <span class="attr">int</span> <span class="string">q;</span></span><br><span class="line">    <span class="attr">cin</span> <span class="string">&gt;&gt; q;</span></span><br><span class="line">    <span class="attr">while</span> <span class="string">(q--) &#123;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">n, t;</span></span><br><span class="line">        <span class="attr">cin</span> <span class="string">&gt;&gt; n;</span></span><br><span class="line">        <span class="meta">vector&lt;int&gt;</span> <span class="string">ans(n), tmp[1001];</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">            <span class="attr">cin</span> <span class="string">&gt;&gt; t;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(int j = 2; j &lt; 1001; ++j) &#123;</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">(t % j == 0) &#123;</span></span><br><span class="line">                    <span class="attr">tmp[j].emplace_back(i);</span></span><br><span class="line">                    <span class="attr">break;</span></span><br><span class="line">                <span class="attr">&#125;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">int</span> <span class="string">cnt = 0;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(auto &amp;i : tmp) &#123;</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(!i.empty()) ++cnt;</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">(int j : i) ans[j] = cnt;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">(int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">            <span class="attr">cout</span> <span class="string">&lt;&lt; ans[i] &lt;&lt; ' ';</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">cout</span> <span class="string">&lt;&lt; endl;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">0;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1332C-K-Complete-Word"><a href="#1332C-K-Complete-Word" class="headerlink" title="1332C K-Complete Word"></a>1332C K-Complete Word</h2><p>一个字符串$S$，要求$T$是回文的，且$k$是它的周期，一次操作可以换一个字符，问最少操作次数让$S$满足要求。</p><p>因为$S$对应的合法串是固定的，那么按题意取某些对应位置暴力就行了，每个位置只访问一次，$O(n)$。</p><figure class="highlight arduino"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j += k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!v[j]) &#123;</span><br><span class="line">                    v[j] = <span class="number">1</span>;</span><br><span class="line">                    ++cnt[s[j] - <span class="string">'a'</span>];</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!v[n - j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    v[n - j - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    ++cnt[s[n - j - <span class="number">1</span>] - <span class="string">'a'</span>];</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j) &#123;</span><br><span class="line">                tmp = <span class="built_in">max</span>(tmp, cnt[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = num - tmp;</span><br><span class="line">            ans += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332D-Walk-on-Matrix"><a href="#1332D-Walk-on-Matrix" class="headerlink" title="1332D Walk on Matrix"></a>1332D Walk on Matrix</h2><p>现在有一个假$DP$算法，求一个矩阵从左上到右下角路径各店权值$\&amp;$起来的最大权值，要求构造一个矩阵$(n\leq 500)$，是真实值和算法得到的结果相差$k$。</p><p>假的原因是贪心对$\&amp;$不成立。其实只要构造两条路的矩阵，一条的值稍大，另一条稍小，但到终点的时候大值没办法取就好，$O(1)$。<br>（听说了很多乱搞的做法，但其实样例2提醒挺明显的。。。）</p><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3 3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1</span> &lt;&lt; (<span class="number">32</span> - __builtin_clz(k));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (c + k) &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="string">" 0"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">         &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="string">" 0"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">         &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; (c + k) &lt;&lt; <span class="string">' '</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332E-Height-All-the-Same"><a href="#1332E-Height-All-the-Same" class="headerlink" title="1332E Height All the Same"></a>1332E Height All the Same</h2><p>一个大小为$n\times m$的矩阵，初始值为${ij}$，每次操作可以把一个位置增加$2$，或把相邻的两个位置各增加$1$，要求$L \leq a_{ij} \leq R$，问这样的矩阵有几个。</p><p>其实很容易想到奇偶性的问题，操作二可以把相邻的两个数奇偶性取反，第一个操作可以把奇偶性相同的数补成相同值。那么如果原始矩阵里奇数的个数或偶数的个数为偶数，就一定可以把所有数奇偶性转化相同。<br>问题就变成了$n\times m$各数字有几种放法，我们把总数分奇偶考虑：</p><ul><li>如果$n\times m$是奇数，那么所有数字可以随便放，答案就是$(R-L+1)^{n\times m}$</li><li>如果$n\times m$是偶数，设$odd$为$a_{ij}$为奇数个数，$even$为偶数个数，那么$odd$和$even$都需要取偶数，设$x$为$[L,R]$中的奇数个数，$y$为$[L,R]$中的偶数个数，答案就是$\sum_{odd=2k}^{n\times m}C_{odd}^{n\times m - odd}x^{odd}y^{even}$。可以发现这其实就是二项式中的偶数项的和，因此化简为：<script type="math/tex; mode=display">\frac {(x + y)^{n\times m} - (x - y)^{n\times m}}{2}</script>$O(\log nm)$</li></ul><figure class="highlight nginx"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="attribute">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ll</span> qpow(ll a, ll b) &#123;</span><br><span class="line">    <span class="attribute">ll</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">while</span> (b) &#123;</span><br><span class="line">        <span class="attribute">if</span> (b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        <span class="attribute">a</span> = a * a % mod; <span class="attribute">b</span> &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">int</span> main() &#123;</span><br><span class="line">    <span class="attribute">ll</span> l, r, n, m;</span><br><span class="line">    <span class="attribute">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="attribute">n</span> *= m;</span><br><span class="line">    <span class="attribute">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="attribute">cout</span> &lt;&lt; qpow(r - l + <span class="number">1</span>, n) &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="section">else</span> &#123;</span><br><span class="line">        <span class="attribute">ll</span> odd = (r + <span class="number">1</span>) / <span class="number">2</span> - l / <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">ll</span> even = r / <span class="number">2</span> - (l - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">cout</span> &lt;&lt; ((qpow(even + odd, n) + qpow(even - odd, n)) * (mod + <span class="number">1</span>) / <span class="number">2</span>) % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1332F-Independent-Set"><a href="#1332F-Independent-Set" class="headerlink" title="1332F Independent Set"></a>1332F Independent Set</h2><p>有一颗无根树，现在求出各个边导出子图各独立集个数的和。</p><p>首先一颗树的独立集个数可以树$dp$得到，此题要求所有的边导出子图求和，实际上相当于删掉了一些边，其中如果有孤立点的话不能选中这个点。做法是维护$3$个值，$dp[u][0]$表示点$u$不被选中时的答案，$dp[u][1]$表示点$u$不被选中时的答案，$dp[u][2]$表示点$u$和子结点一条边都不连时的答案。在$DFS$中用$num0$表示以$u$的子结点$v$为根的子树的全部答案，用$num1$表示子树的全部答案去掉$v$孤立的答案，那么转移：</p><ul><li>$dp[u][0]=\prod (num0+num1)$，即当$u$选中时，子结点状态任意:<ul><li>当$u$不选时，选$e(u,v)$这条边，那么有$num1$的贡献。</li><li>当$u$不选时，不选$e(u,v)$这条边，那么有$num0$的贡献（因为不能让$v$孤立且被选）。</li></ul></li><li>$dp[u][1]=\prod (num0+dp[v][0])$，当$u$选中时，子结点不能被选；<ul><li>当$u$选中时，选$e(u,v)$这条边，那么有$dp[v][0]$的贡献（因为相邻结点不能再被选中）。</li><li>当$u$选中时，不选$e(u,v)$这条边，那么有$num0$的贡献（同上$2$）。</li></ul></li><li>$dp[u][2]=\prod num0$，<ul><li>当$u$孤立时，那么有$num0$的贡献（同上$2$）。</li></ul></li></ul><figure class="highlight prolog"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int <span class="symbol">N</span> = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="symbol">N</span>][<span class="number">3</span>];</span><br><span class="line">vector&lt;int&gt; g[<span class="symbol">N</span>];</span><br><span class="line"></span><br><span class="line">void dfs(int u, int fa = <span class="number">0</span>) &#123;</span><br><span class="line">    dp[u][<span class="number">0</span>] = dp[u][<span class="number">1</span>] = dp[u][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    for (int v : g[u]) &#123;</span><br><span class="line">        if (v == fa) continue;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        ll num1 = dp[v][<span class="number">0</span>] + dp[v][<span class="number">1</span>] - dp[v][<span class="number">2</span>];</span><br><span class="line">        ll num0 = dp[v][<span class="number">0</span>] + dp[v][<span class="number">1</span>];</span><br><span class="line">        dp[u][<span class="number">0</span>] = dp[u][<span class="number">0</span>] * (num1 + num0) <span class="comment">% mod;</span></span><br><span class="line">        dp[u][<span class="number">2</span>] = dp[u][<span class="number">2</span>] * (num1) <span class="comment">% mod;</span></span><br><span class="line">        dp[u][<span class="number">1</span>] = dp[u][<span class="number">1</span>] * (num1 + dp[v][<span class="number">0</span>]) <span class="comment">% mod;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].emplace_back(v);</span><br><span class="line">        g[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; (dp[<span class="number">1</span>][<span class="number">0</span>] + dp[<span class="number">1</span>][<span class="number">1</span>] - dp[<span class="number">1</span>][<span class="number">2</span>] - <span class="number">1</span> + <span class="number">2</span> * mod) <span class="comment">% mod &lt;&lt; endl;</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忘记比赛时间了…&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/div2/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="div2" scheme="https://blog.wgree.site/tags/div2/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 84 题解</title>
    <link href="https://blog.wgree.site/1933395439/"/>
    <id>https://blog.wgree.site/1933395439/</id>
    <published>2020-03-29T04:06:22.000Z</published>
    <updated>2020-04-30T03:00:53.193Z</updated>
    
    <content type="html"><![CDATA[<p>又血崩了一场<br><a id="more"></a></p><h2 id="1237A-Sum-of-Odd-Integers"><a href="#1237A-Sum-of-Odd-Integers" class="headerlink" title="1237A Sum of Odd Integers"></a>1237A Sum of Odd Integers</h2><p>给一个数$n$，问能否分成$k$个奇数的和。</p><p>可以等差数列算出$k$个奇数最小的和，之后判断它和$n$的关系就好，$O(1)$。</p><figure class="highlight cpp"><figcaption><span>A.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        ll mi = ll(<span class="number">1</span> + <span class="number">2</span> * (k - <span class="number">1</span>) + <span class="number">1</span>) * k / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n - mi &gt;= <span class="number">0</span> &amp;&amp; (n - mi) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237B-Princesses-and-Princes"><a href="#1237B-Princesses-and-Princes" class="headerlink" title="1237B Princesses and Princes"></a>1237B Princesses and Princes</h2><p>有$n$个公主和$n$个王子，每个公主有一列喜欢的王子，如果一个公主喜欢的王子没被分配的时候，她会和最小编号的王子结合。现在可以给一个公主加一个喜欢的人，问是否需要，如果需要，方案是什么。</p><p>如果一个公主剩下了，那么一定有一个王子剩下，那么选择一对结合就好，$O(n)$。</p><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, la = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> k, t, f = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">                <span class="keyword">if</span> (!f &amp;&amp; !b[t]) b[t] = f = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!f) la = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (la == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"OPTIMAL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[i]) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPROVE"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">                     &lt;&lt; la &lt;&lt; <span class="string">' '</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237C-Game-with-Chips"><a href="#1237C-Game-with-Chips" class="headerlink" title="1237C Game with Chips"></a>1237C Game with Chips</h2><p>在一个$n\times m$的格子上有$n$个可移动点以及对应$n$个目标点，每次操作可以让所有可移动的点全部上下左右移动一格，要求在$2nm$次操作内让所有点经过目标点至少一次，输出方案。</p><p>先用$n+m-2$次操作将所有点移动到一角，再用$n\times m-1$次操作遍历所有格子，$O(nm)$。</p><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k * <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n + m - <span class="number">2</span> + n * (m - <span class="number">1</span>) + n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'L'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'U'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'L'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'R'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'D'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237D-Infinite-Path"><a href="#1237D-Infinite-Path" class="headerlink" title="1237D Infinite Path"></a>1237D Infinite Path</h2><p>有一个长为$n$的排列，每个位置有一个颜色，问最少做几次置换后某些位置可以产生一个同色的环。</p><p>对于一个长$m$的小环来说，有一个性质是：$p^k[x_i] = x_{(i+k)\;mod\;m}$，那么第$k$次置换可以将原来的环分为$GCD(k, m)$个小环，只需要对$p^0$的每个小环枚举因子取同色成立的最小值就好，$O(n^{\frac {4}{3}})$。</p><figure class="highlight arduino"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = INF32;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i]) &#123;</span><br><span class="line">                tmp.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">while</span> (c[j]) &#123;</span><br><span class="line">                    tmp.emplace_back(c[j]);</span><br><span class="line">                    c[j] = <span class="number">0</span>; j = p[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> m = tmp.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k * k &lt;= m; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m % k) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> strt = <span class="number">0</span>; strt &lt; k; ++strt) &#123;</span><br><span class="line">                        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                        j = strt;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; m) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmp[j] != tmp[(j + k) % m]) &#123;</span><br><span class="line">                                ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            j += k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (ok) ans = <span class="built_in">min</span>(ans, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> strt = <span class="number">0</span>; strt &lt; m / k; ++strt) &#123;</span><br><span class="line">                        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                        j = strt;</span><br><span class="line">                        <span class="keyword">while</span> (j &lt; m) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmp[j] != tmp[(j + m / k) % m]) &#123;</span><br><span class="line">                                ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            j += m / k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (ok) ans = <span class="built_in">min</span>(ans, m / k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237E-Count-The-Blocks"><a href="#1237E-Count-The-Blocks" class="headerlink" title="1237E Count The Blocks"></a>1237E Count The Blocks</h2><p>一个长为$n$的字符串，每个位置由$0\sim 9$组成，一个串中连续相同的数字分成一个长$x$的段，问所有字符串中长为$1\sim n$的段的数目分别是多少。</p><p>分三种情况DP：</p><ul><li>长为$n$的段只有10种；</li><li>从左/右开始的，自己有$1$种选法，相邻的位置有$9$种选法，剩下位置任选，$10*9*10^{n-len-1}$；</li><li>从中间放的，与上边类似，$10*9*9*10^{n-len-2}$。</li></ul><p>也可以找规律，公式是：</p><script type="math/tex; mode=display">\begin{cases}ans_n = 10, &\text{} \\ans_{n-1} = 180, &\text{} \\ans_{i} = 20*ans_{i+1}-100*ans_{i+2}, &\text{(i≤n-2)}\end{cases}</script><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MYDEBUG</span></span><br><span class="line">    freopen(<span class="string">"../0in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"../0out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a[n] = <span class="number">10</span>;</span><br><span class="line">    a[n - <span class="number">1</span>] = <span class="number">180</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">        a[n - <span class="number">2</span>] = <span class="number">2610</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">3</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        a[i] = (<span class="number">20</span> * a[i + <span class="number">1</span>] - <span class="number">100</span> * a[i + <span class="number">2</span>] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237F-AND-Segments"><a href="#1237F-AND-Segments" class="headerlink" title="1237F AND Segments"></a>1237F AND Segments</h2><p>有一个长为$n$的数列，$m$个形如$\{l,r,x\}$的限制，要$a[l] \&amp; a[l+1] \&amp; \dots \&amp; a[r] = x$，问有多少种不同的数列满足条件。</p><p>每一位分开考虑，对于某个$x_i$式这一位为$1$的限制，那么$a[l],a[l+1],…,a[r]$的这一位必须都为$1$。反之，$a[l],a[l+1],…,a[r]$的这一为至少有1个为$0$，可以预处理出某些位置必须放$1$或$1,0$都可以。<br>设$dp[i][j]$表示处理到第$i$位时上一次放$0$的是第$j$个数：</p><ul><li>如果放$1$，那么$dp[i][j] = dp[i-1][j]$；</li><li>如果放$0$，那么$dp[i][i] = \sum_{j=1}^{i-1} {dp[i-1][j]}$。<br>对于某段必须为0，也就是将$dp[r][0]$到$dp[r][l+1]$置$0$。很明显可以滚动数组，放$0$操作可以用前缀和转移，而清$0$后前面就不用考虑了，也就是每个$j$只会被删$1$次，维护一个指针就好，$O(n)$。</li></ul><figure class="highlight excel"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">5</span>e5 + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">n</span>, m;</span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt; l, r, x;</span><br><span class="line"></span><br><span class="line">ll calc(<span class="built_in">int</span> p) &#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; has(<span class="built_in">n</span> + <span class="number">2</span>), las(<span class="built_in">n</span> + <span class="number">2</span>);</span><br><span class="line">    vector&lt;ll&gt; dp(<span class="built_in">n</span> + <span class="number">2</span>);</span><br><span class="line">    p = <span class="number">1</span> &lt;&lt; p;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">if</span> (x[i] &amp; p) &#123;</span><br><span class="line">            ++has[l[i]];</span><br><span class="line">            --has[r[i] + <span class="number">1</span>];</span><br><span class="line">        &#125; else</span><br><span class="line">            las[r[i]] = <span class="built_in">max</span>(las[r[i]], l[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        has[i] += has[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> last = <span class="number">0</span>;</span><br><span class="line">    ll <span class="built_in">sum</span> = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">n</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">if</span> (!has[i]) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">sum</span>;</span><br><span class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> * <span class="number">2</span> % <span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        while (last &lt; las[i]) &#123;</span><br><span class="line">            tmp = (tmp + dp[last++]) % <span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sum</span> = (<span class="built_in">sum</span> - tmp + <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> k;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span> &gt;&gt; k &gt;&gt; m;</span><br><span class="line">    l.resize(m);</span><br><span class="line">    r = x = l;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cin &gt;&gt; l[i] &gt;&gt; r[i] &gt;&gt; x[i];</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        ans = ans * calc(i) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1237G-Letters-and-Question-Marks"><a href="#1237G-Letters-and-Question-Marks" class="headerlink" title="1237G Letters and Question Marks"></a>1237G Letters and Question Marks</h2><p>有$k$个模式串$t_1,t_2,…,t_k$，每个串带有一个权值，和一个文本串$S$，均有$a\sim n$组成，定义$S$的值是$t_i$在$S$出现的次数$\times$自己的权值。$S$中至多出现$14$个问号，用$a\sim n$内不同的字母填入后，$S$最大的权值是多少。</p><p>AC自动机+DP，设$dp[i][j][k]$表示处理到第$i$个字符，在自动机节点$j$，已用字符集的状态是$k$，在枚举到问号的时候枚举转移字符，一路加上权值就可以得到答案，但这样复杂度是$O(\lvert S \rvert*2^{14}*\sum {t})$。<br>很明显，对于被$?$分割出来的字串，只要知道开头在自动机的节点，就可以确定末尾转移到的节点，那么预处理自动机每个节点开始，$S$中第$i$个字串转移的结果，就可以$O(1)$转移。重设$dp[i][j][k]$，其中$i$表示处理到第$i$个问号，可以发现$i=k$中使用过的字符数量，只需要设二维，$O(|S|*\sum {t} + 14*2^{14}*\sum {t})$</p><figure class="highlight arduino"><figcaption><span>G.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = (<span class="number">1</span> &lt;&lt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="keyword">String</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> csize = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ahcm</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nd node[u]</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> ch[csize];</span><br><span class="line">            <span class="keyword">int</span> fail, val;</span><br><span class="line">        &#125; node[N];</span><br><span class="line">        <span class="keyword">int</span> numv;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q, q;</span><br><span class="line"></span><br><span class="line">        ahcm() &#123;</span><br><span class="line">            numv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!nd.ch[c - <span class="string">'a'</span>])</span><br><span class="line">                    nd.ch[c - <span class="string">'a'</span>] = ++numv;</span><br><span class="line">                u = nd.ch[c - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            nd.val += v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : node[<span class="number">0</span>].ch) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i)</span><br><span class="line">                    Q.emplace(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                Q.pop();</span><br><span class="line"></span><br><span class="line">                q.emplace(u);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; csize; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nd.ch[i]) &#123;</span><br><span class="line">                        node[nd.ch[i]].fail = node[nd.fail].ch[i];</span><br><span class="line">                        node[nd.ch[i]].val += node[node[nd.ch[i]].fail].val;</span><br><span class="line">                        Q.emplace(nd.ch[i]);</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        nd.ch[i] = node[nd.fail].ch[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pil <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">            ll v = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : s) &#123;</span><br><span class="line">                u = nd.ch[c - <span class="string">'a'</span>];</span><br><span class="line">                v += nd.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;u, v&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">ahcm am;</span><br><span class="line">pil go[<span class="number">1005</span>][<span class="number">18</span>];</span><br><span class="line">ll dp[<span class="number">1005</span>][sz];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, v;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; v;</span><br><span class="line">        am.insert(s, v);</span><br><span class="line">    &#125;</span><br><span class="line">    am.build();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> la = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; seg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">            seg.push_back(s.substr(la, i - la));</span><br><span class="line">            la = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seg.push_back(s.substr(la));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seg.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            go[j][i] = am.calc(j, seg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= am.numv; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j) &#123;</span><br><span class="line">            dp[i][j] = -INF64;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[go[<span class="number">0</span>][<span class="number">0</span>].first][<span class="number">0</span>] = go[<span class="number">0</span>][<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j][i] == -INF64) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">14</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i &gt;&gt; k) &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> to = am.node[j].ch[k];</span><br><span class="line">                <span class="keyword">int</span> ns = i | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">                <span class="keyword">int</span> count = __builtin_popcount(ns);</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= seg.<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> <span class="built_in">end</span> = go[to][count].first;</span><br><span class="line">                ll val = go[to][count].second + am.node[to].val;</span><br><span class="line">                dp[<span class="built_in">end</span>][ns] = <span class="built_in">max</span>(dp[<span class="built_in">end</span>][ns], dp[j][i] + val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = -INF64;</span><br><span class="line">    <span class="keyword">int</span> cnt = seg.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= am.numv; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcount(i) == cnt)</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又血崩了一场&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/categories/%E9%A2%98%E8%A7%A3/Codeforces/edu/"/>
    
    
      <category term="Codeforces" scheme="https://blog.wgree.site/tags/Codeforces/"/>
    
      <category term="edu" scheme="https://blog.wgree.site/tags/edu/"/>
    
  </entry>
  
</feed>
